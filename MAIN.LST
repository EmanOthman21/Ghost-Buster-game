Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-1


				EXTRN BITMAP_LEFT_PLAYER2 : BYTE 
				EXTRN BITMAP_UPLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER2 : BYTE
				EXTRN BITMAP_DOWNLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_DOWN_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER1 : BYTE
				EXTRN BITMAP_DOWN_PLAYER1 : BYTE
				EXTRN BITMAP_RIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_DOWNRIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_UPRIGHT_PLAYER1 : BYTE
				
				EXTRN GHOST1_0 : BYTE
				EXTRN GHOST1_1 : BYTE
				EXTRN GHOST1_2 : BYTE
				EXTRN GHOST2_0 : BYTE
				EXTRN GHOST2_1 : BYTE
				EXTRN GHOST2_2 : BYTE
				EXTRN GHOST3_0 : BYTE
				EXTRN GHOST3_1 : BYTE
				EXTRN GHOST3_2 : BYTE
				
				EXTRN PORTAL : BYTE
				
				EXTRN Bullet_1_Model : BYTE
				EXTRN BULLET_2_MODEL : BYTE
				
				EXTRN RED_HEART : BYTE
				EXTRN WHITE_HEART : BYTE
				
				EXTRN DMG_PRUP_1 : BYTE
				EXTRN DMG_PRUP_2 : BYTE
				EXTRN SPD_PRUP_1 : BYTE
				EXTRN SPD_PRUP_2 : BYTE
				
				EXTRN LOGO : BYTE
				
				
				EXTRN SOUND: FAR
				
				INCLUDE RANDOM.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO TO GET RANDOM NUMBER WITHIN A PROVIDED
				 RANGE 
			     C	;----------------------------------------------
				-------------------------------
			     C	RANDOMIZE MACRO LOWER, UPPER, NUMBER, SEED 
			     C	LOCAL SET, NODIVISION
			     C	   PUSH     AX
			     C	   PUSH     BX
			     C	   PUSH     CX
			     C	   PUSH     DX
			     C	
			     C	   MOV     AX, 25173          ; LCG MULTIPLIER 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-2


			     C	   MUL     WORD PTR SEED      ;DX:AX = LCG MULT
				IPLIER * SEED
			     C	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE
			     C	   ; MODULO 65536, AX = (MULTIPLIER*SEED+INCREM
				ENT) MOD 65536
			     C	   CMP     SEED, AX
			     C	   JNE     SET
			     C	   MOV     AH, 0
			     C	   INT     1AH
			     C	   MOV     SEED, DX    ; SEED WITH THE SYSTEM T
				IME
			     C	   
			     C	   SET:
			     C	   MOV     SEED, AX          ; UPDATE SEED = RE
				TURN VALUE
			     C	
			     C	   SUB      DX, DX
			     C	   MOV      CX, UPPER
			     C	   INC      CX
			     C	   SUB      CX, LOWER 
			     C	   CMP CX, 0 
			     C	   JE NODIVISION
			     C	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER)
			     C	   NODIVISION:
			     C	   ADD      DX, LOWER
			     C	   MOV      NUMBER, DX
			     C	
			     C	   POP      DX
			     C	   POP      CX
			     C	   POP      BX
			     C	   POP      AX
			     C	ENDM RANDOMIZE
				INCLUDE PRINTNUM.INC
			     C	
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to print any number providing the hexa
				decimal representation 
			     C	;----------------------------------------------
				-------------------------------
			     C	
			     C	PRINTNUM MACRO BINARY, DECIMAL
			     C	   LOCAL BACK 
			     C	   mov DECIMAL, '0'
			     C	   mov DECIMAL + 1, '0'
			     C	   MOV BX, 10            
			     C	   MOV SI, OFFSET DECIMAL
			     C	   ADD SI, 3
			     C	   DEC SI
			     C	   MOV AX, BINARY
			     C	   BACK:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-3


			     C	      SUB DX, DX
			     C	      DIV BX
			     C	      OR DL, 30H
			     C	      MOV [SI], DL
			     C	      DEC SI
			     C	      CMP AX, 0
			     C	      JA BACK 
			     C	    
			     C	   MOV AH, 2
			     C	   MOV DH, 1    ;Y POSITION FOR PRINTING
			     C	   MOV DL, 35    ;X POSITION FOR PRINTING
			     C	   INT 10H
			     C	    
			     C	   MOV AH, 9H      ;PRINT THE NUMBER
			     C	   MOV DX, OFFSET DECIMAL   
			     C	   INT 21H
			     C	    
			     C	ENDM PRINTNUM 
				INCLUDE BUNDRY.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO CHECK IF THE SHAPE IS WITHIN BOUNDARIE
				S 
			     C	;----------------------------------------------
				-------------------------------
			     C	WITHIN_BOUNDARIES MACRO STARTPOSX, STARTPOSY, S
				IZE, RESULT
			     C	   LOCAL UPPER_CHECK, LOWERCHECK, LEFTCHECK, RI
				GHTCHECK, WITHINRANGE
			     C	   PUSH AX
			     C	   PUSH BX
			     C	   PUSH CX
			     C	   PUSH DX
			     C	
			     C	
			     C	   MOV RESULT, 1           ;FIRST ASSUME THAT T
				HE SHAPE IS WITHIN BOUNDARIES
			     C	   UPPER_CHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ABOVE
			     C	      MOV CX, STARTPOSY
			     C	      MOV BX, UPPERBOUND_Y
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE LOWERCHECK
			     C	      MOV RESULT, 0   
			     C	   ;}
			     C	   
			     C	   LOWERCHECK:
			     C	   ;{CHECK FOR BOUNDARIES BELOW
			     C	      MOV CX, STARTPOSY
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, LOWERBOUND_Y
			     C	      SUB BX, CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-4


			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE RIGHTCHECK
			     C	      MOV RESULT, 0
			     C	   ;}  
			     C	
			     C	   RIGHTCHECK:
			     C	   ;{CHECK FOR BOUNDARIES ON THE RIGHT
			     C	      MOV CX, STARTPOSX
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, RIGHTBOUND_X
			     C	      SUB BX, CX
			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE LEFTCHECK
			     C	      MOV RESULT, 0
			     C	   ;} 
			     C	
			     C	   LEFTCHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ON THE LEFT
			     C	      MOV CX, STARTPOSX
			     C	      MOV BX, LEFTBOUND_X
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE WITHINRANGE
			     C	      MOV RESULT, 0   
			     C	   ;} 
			     C	
			     C	   WITHINRANGE:
			     C	   POP DX
			     C	   POP CX
			     C	   POP BX
			     C	   POP AX
			     C	ENDM WITHIN_BOUNDARIES 
				INCLUDE DWOBJ.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to draw any needed object(square) prov
				iding the length of the side,
			     C	;  a register containing the offset of the colo
				rs in the ds, starting x and y
			     C	;----------------------------------------------
				-------------------------------
			     C	DRAW_OBJECT MACRO SIZE, BITMAP, X, Y
			     C	LOCAL INNERLOOP, OUTERLOOP, DONT_DRAW
			     C	;{
			     C	   PUSH CX
			     C	   PUSH BX
			     C	   MOV SI, BITMAP  ;TAKE THE RIGHT BITMAP FROM 
				A REGISTER CONTAINING THE OFFSET
			     C	   MOV     DX, Y     ; Y TO START DRAWING AT
			     C	   MOV BP, SIZE
			     C	   MOV BH, [SI]
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-5


			     C	   
			     C	
			     C	   OUTERLOOP:;{ FOR(BP = 50; BD > 0; BP--)
			     C	      MOV     CX, X    ; X TO START 
			     C	      MOV DI, SIZE
			     C	      INNERLOOP:;{ FOR(DX = 50; DX > 0; DX--)
			     C	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL
			     C	         CMP BH ,AL
			     C	         JE DONT_DRAW
			     C	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL
			     C	         INT     10H
			     C	         DONT_DRAW:
			     C	         INC     CX         ; NEXT X POSITION
			     C	         DEC     DI
			     C	         JNZ     INNERLOOP
			     C	         ;}
			     C	      INC     DX         ; NEXT Y POSITION
			     C	      DEC     BP
			     C	      JNZ     OUTERLOOP
			     C		  
			     C	      POP BX
			     C	      POP CX
			     C	;} 
			     C	ENDM DRAW_OBJECT
				INCLUDE MENU.INC
			     C	MENU MACRO 
			     C	LOCAL OUTERLOOP, INNERLOOP, PRINT1, PRINT2, PRI
				NT3
			     C	                    ;{ OPEN VEDIO MODE
			     C	                        MOV     AX, 4F02H
			     C	                        MOV     BX, 105H
			     C	                        INT     10H
			     C	                    ;}
			     C	
			     C	
			     C	                ;{ DRAWING BACKGROUND
			     C	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE
			     C	                    MOV     DX, 0     ; Y TO ST
				ART
			     C	                    MOV     CX, 0
			     C	                    MOV     AL, 7
			     C	                    MOV     AH, 0CH
			     C	                           OUTERLOOP: 
			     C	                                          INNER
				LOOP: 
			     C	                                               
				             INT     10H
			     C	                                               
				             INC     CX
			     C	                                               
				             CMP     CX, 1024
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-6


			     C	                                               
				             JNZ     INNERLOOP
			     C	                                          ;}
			     C	                                    MOV     CX,
				0
			     C	                                    INC     DX 
				        ; NEXT Y
			     C	                                    CMP     DX,
				 780
			     C	                                    JNZ     OUT
				ERLOOP
			     C	                ;}
			     C	                ;{ CLEAR THE PAGE
			     C	                    MOV     AX, 0600H
			     C	                    MOV     BH, 0
			     C	                    MOV     CX, 0
			     C	                    MOV     DX, 184FH
			     C	                    INT     10H
			     C	                ;}
			     C	                ;{ CURSUR = (34H,1AH)
			     C	                    MOV     AH, 2
			     C	                    MOV     DX, 1B34H
			     C	                    INT     10H
			     C	                ;}
			     C	                LEA     SI, MENUITEM1
			     C	                PRINT1:
			     C	                    ;{ PRINTING MENUETIME1
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT1
			     C	                    ;}
			     C	                    ;{ CURSUR = (1BH,34H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1D34H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM2
			     C	                    PRINT2:
			     C	                    ;{ PRINTING MENUETIME2
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-7


			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT2 
			     C	                    ;}
			     C	                    ;{ CURSUR = (33H,19H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1933H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM3
			     C	                    PRINT3:
			     C	                    ;{ PRINTING MENUETIME3
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT3
			     C	                    ;}
			     C	ENDM MENU
				INCLUDE GHOST.INC
			     C	GHOSTWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, GMODC
				, GMODR
			     C	;GHOSTBUSTERS
			     C	;{ THIS BLOCK DRAW GHOST WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,250 ; Y = 250
			     C	    MOV CX,400 ; X = 400
			     C	
			     C	    MOV AL,04
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'G'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(G) WE HANDLE IT'S VERTICAL LI
				NES 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-8


			     C	                CMP DX,270
			     C	                JA D
			     C	                INT 10H
			     C	                JMP CON
			     C	                D: CMP DX,290 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'H'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;} 
			     C	        ;{ VERTICAL LINS OF 'O'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	         ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,275
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;} 
			     C	        SUB CX,215 
			     C	        INC DX
			     C	        CMP DX,310
			     C	        JNZ COL
			     C	    MOV DX,250      
			     C	    INC CX
			     C	    CMP CX,410
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ;{ MODIFICATION TO 'G'
			     C	        MOV CX,420
			     C	        MOV DX,280
			     C	        GMODR:
			     C	            GMODC:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-9


			     C	                INT 10H
			     C	                INC CX
			     C	                CMP CX,440
			     C	            JNZ GMODC
			     C	        MOV CX,420
			     C	        INC DX
			     C	        CMP DX,290
			     C	        JNZ GMODR    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,400
			     C	    MOV DX,250
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        
			     C	        ;{ HORIZONTAL LINS OF 'H'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            ADD DX,25
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{ HORIZONTAL LINS OF 'O'
			     C	            SUB DX,25
			     C	            SUB CX,50
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'T'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	        ;}
			     C	        SUB CX,200
			     C	        INC CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-10


			     C	        CMP CX,440
			     C	        JNZ RW
			     C	    MOV CX,400
			     C	    INC DX
			     C	    CMP DX,260
			     C	    JNZ CLM
			     C	;}
			     C	ENDM GHOSTWORD
				INCLUDE BUSTERS.INC
			     C	BUSTERWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, CN, R
				, L, CON3, T, CON4, CON5, CON6, CLMM, ROOW, K, 
				CON7, CON8, CON9, F, CON10
			     C	;{ THIS BLOCK DRAW BUSTER WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,320 ; Y = 320
			     C	    MOV CX,380 ; X = 380
			     C	
			     C	    MOV AL,01
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF BUSTER W
				ORD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'B'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(B) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA D
			     C	                INT 10H
			     C	                JMP CON
			     C	                D: CMP DX,355 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'U'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-11


			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;}
			     C	        ;} 
			     C	 
			     C	        ;{ VERTICAL LINS OF 'E'
			     C	            ADD CX,35
			     C	            INT 10H
			     C	         ;}
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD CX,30
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,345
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,355 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
			     C	        CN:
			     C	        SUB CX,280 
			     C	        INC DX
			     C	        CMP DX,380
			     C	        JNZ COL
			     C	    MOV DX,320      
			     C	    INC CX
			     C	    CMP CX,390
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV DX,320
			     C	    MOV CX,380
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'B'
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(B) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,415
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-12


			     C	                JA T
			     C	                INT 10H
			     C	                JMP CON4
			     C	                T: CMP DX,345 
			     C	                JA CON3
			     C	                INT 10H
			     C	                CON3: CMP DX,355
			     C	                JB CON4
			     C	                INT 10H
			     C	                CON4: ADD DX,10
			     C	                CMP CX,415
			     C	                JA L
			     C	                INT 10H
			     C	                JMP CON6
			     C	                L: CMP DX,345 
			     C	                JA CON5
			     C	                INT 10H
			     C	                CON5: CMP DX,355
			     C	                JB CON6
			     C	                INT 10H
			     C	                CON6:
			     C	                ADD DX,20
			     C	                INT 10H 
			     C	            ;}
			     C	        SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'U'
			     C	            ADD CX,50
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB DX,50
			     C	            SUB CX,100
			     C	        ;}
			     C	    INC CX
			     C	    CMP CX,420
			     C	    JNZ RW
			     C	    MOV CX,380
			     C	    INC DX
			     C	    CMP DX,330
			     C	    JNZ CLM
			     C	;}
			     C	    MOV DX,320
			     C	    MOV CX,530
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-13


			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMM: 
			     C	        ROOW:
			     C	        INT 10H
			     C	        ;{ HORIZONTAL LINS OF 'E'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,665
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,345 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,355
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,665
			     C	                JA F
			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,345 
			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,355
			     C	                JB CON9
			     C	                INT 10H
			     C	                CON9: 
			     C	            ;}
			     C	        SUB DX,30
			     C	        SUB CX,100
			     C	        ;}
			     C	
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,570
			     C	        JNZ ROOW
			     C	    MOV CX,530
			     C	    INC DX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-14


			     C	    CMP DX,330
			     C	    JNZ CLMM
			     C	;}    
			     C	ENDM BUSTERWORD
				INCLUDE YWON.INC
			     C	YWN MACRO WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN
			     C	
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	       ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                CMP DX,STARTY + HEGITH / 2
			     C	                JA C
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	                SUB CX,WDTH - 10
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,WDTH / 2
			     C	                SUB CX,5
			     C	                INT 10H 
			     C	                ADD CX,5
			     C	                SUB CX,WDTH / 2
			     C	            ;}
			     C	
			     C	
			     C	         CON2:
			     C	         ;{     
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD CX,WDTH -10
			     C	                INT 10H
			     C	         
			     C	         ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-15


			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	         ;{
			     C	            ADD CX,30
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	
			     C	          ;{
			     C	                 ADD CX,20
			     C	                 INT 10H
			     C	                 ADD CX,WDTH - 7
			     C	                 INT 10H         
			     C	           ;}
			     C	         SUB CX,6*WDTH + 53
			     C	           
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
			     C	    JNZ ROW    
			     C	    ;}
			     C	
			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY + HEGITH / 2
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	        ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-16


			     C	
			     C	        ;{
			     C	            ADD DX,HEGITH / 2 - 10
			     C	            ADD CX, WDTH + 10
			     C	            INT 10H
			     C	            SUB DX, HEGITH - 10
			     C	            INT 10H
			     C	            ADD DX,HEGITH -10
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 20
			     C	            INT 10H
			     C	        ;}
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	            SUB DX,HEGITH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            SUB CX,4*WDTH+50
			     C	            ADD DX,HEGITH/2
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY + HEGITH / 2 + 10
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + 5* WDTH + 70 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + 6* WDTH + 57
			     C	        JNZ RWN
			     C	            ADD SI,1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-17


			     C	            MOV CX,STARTX + 5* WDTH + 70
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM YWN
				INCLUDE DRAW.INC
			     C	DRAW MACRO  WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN,CLMD,RWD
				,CLMDD,ROWDD,R,ROWRAW,ROWRAWW,CLMRAWW,K,CON8,CO
				N9,CON10,CON7,F
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	   
			     C	          ;INITAL POINT
			     C	      ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	            ;}
			     C	         CON2:
			     C	         SUB CX,WDTH - 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-18


			     C	    JNZ ROW    
			     C	    ;}
			     C	
			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY 
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,HEGITH - 10
			     C	            INT 10H
			     C	        ;}
			     C	            SUB DX, HEGITH - 10
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY +  10 
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMD: 
			     C	        RWD:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWD
			     C	            ADD SI,1
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
			     C	    JNZ CLMD
			     C	;}
			     C	
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + HEGITH
			     C	    MOV SI,STARTY + HEGITH
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-19


			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            DEC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWN
			     C	            DEC SI
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + HEGITH -  14
			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + 10
			     C	
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROWDD: 
			     C	        COLDD:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	            ;}
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH - 10
			     C	        JNZ COLDD
			     C	    MOV DX,STARTY +10      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 5
			     C	    JNZ ROWDD  
			     C	    ;}
			     C	    
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	
			     C	    ROWRAW: 
			     C	        COLRAW:
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            INT 10H
			     C	            ADD CX,WDTH - 10
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,STARTY +25
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,STARTY + 30 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-20


			     C	        CN:
			     C	        ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	         SUB CX, 3*WDTH + 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COLRAW
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 25 
			     C	    JNZ ROWRAW    
			     C	    ;}
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMRAWW: 
			     C	        ROWRAWW:
			     C	        INT 10H
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,STARTX + 2 * WDTH + 10
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,STARTY + 25 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,STARTY + 35
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,STARTX + 2*WDTH + 10
			     C	                JA F
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-21


			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,STARTY + 25  
			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,STARTY + 35
			     C	                JB CON9
			     C	                INT 10H
			     C	                
			     C	            ;}
			     C	            CON9:
			     C	            SUB DX,30
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 -10
			     C	            ;} 
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                SUB CX,2*WDTH + 20
			     C	                SUB DX,HEGITH -10
			     C	            ;}
			     C	
			     C	        INC CX
			     C	        CMP CX,STARTX + 2* WDTH + 15
			     C	        JNZ ROWRAWW
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    INC DX
			     C	    CMP DX,STARTY + 10
			     C	    JNZ CLMRAWW
			     C	;}  
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM DRAW
				INCLUDE DCOL.INC
			     C	;----------------------------------------------
				-----------------------------------------------
				--------------
			     C	;  MACRO CHECK IF THE COLLISION OF TWO SQUARE G
				RIDS GIVEN THEIR SIZE AND UPPER LEFT VERTIX (ST
				ART POSITION)
			     C	;  COLLISION_STATUS = 0 IF THERE IS A COLLISION
				 ELSE IT IS EQUAL TO ONE 
			     C	;----------------------------------------------
				-----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-22


				--------------
			     C	DETECT_COLLISION MACRO STARTPOS_1X, STARTPOS_1Y
				, SIZE_1, STARTPOS_2X, STARTPOS_2Y, SIZE_2, COL
				LISION_STATUS
			     C	    LOCAL COMMUTATEX, SKIP_COMMUTATEX, NO_COLLI
				SION, COMMUTEY, SKIP_COMMUTATEY, END_DETECT_COL
				L
			     C	    PUSH AX
			     C	    PUSH BX
			     C	    PUSH CX
			     C	    PUSH DX
			     C	    PUSH BP
			     C	        ;DIVIDE THE FIRST SIZE BY 2
			     C	        MOV CX, SIZE_1
			     C	        SHR CX, 1
			     C	        ;DIVIDE THE SECOND SIZE BY 2
			     C	        MOV DX, SIZE_2
			     C	        SHR DX, 1
			     C	        ;GET THE SUPPOSED DISTANCE BETWEEN THEI
				R CENTERS
			     C	        MOV BP , 0
			     C	        ADD BP, DX
			     C	        ADD BP, CX
			     C	        ;INORDER TO MAKE SURE THE TWO SQUARES A
				RE COLLIDING NOT ONLY PASSING BY
			     C	        SUB BP ,3 
			     C	        ;GET THE ACTUAL DISTANCE BETWEEN THEIR 
				CENTERS
			     C	        ;GET THE CENTER X COORDINATE OF BOTH
			     C	        MOV AX, STARTPOS_1X
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2X
			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO X COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
				ERS IN X
			     C	        CMP AX,BX
			     C	        JL COMMUTATEX
			     C	        SUB AX ,BX
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEX
			     C	        COMMUTATEX: 
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEX:
			     C	        ;MAKE SIMILAR CHECKS TO THE ABOVE BUT I
				N Y COORDINATES
			     C	        MOV AX, STARTPOS_1Y
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2Y
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-23


			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO Y COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
				ERS IN Y
			     C	        CMP AX, BX
			     C	        JL COMMUTEY
			     C	        SUB AX,BX
			     C	        ;COMPARE WITH THE REQUIRED DISTANCE FOR
				 COLLISION
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEY
			     C	        COMMUTEY:
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEY:
			     C	        ;THEN THE TWO SQUARES COLLIDE
			     C	        MOV COLLISION_STATUS, 0
			     C	        JMP END_DETECT_COLL
			     C	
			     C	    NO_COLLISION:
			     C	    MOV COLLISION_STATUS, 1    
			     C	    END_DETECT_COLL:   
			     C	    POP BP
			     C	    POP DX
			     C	    POP CX
			     C	    POP BX
			     C	    POP AX
			     C	ENDM DETECT_COLLISION
				 .MODEL   LARGE;TINY   :DATA+CODE = 64KB    
				            ;SMALL  :DATA = 64KB AND CODE = 64K
				B
				            ;MEDIUM :DATA = 64KB BUT NO CODE RE
				STRICTION
				            ;COMPACT:CODE = 64KB BUT NO DATA RE
				STRICTION
				            ;LARGE  :SINGLE SET OF DATA CAN NOT
				 EXCEED 64KB
				            ;HUGE   :NO RESTRICTION
				;----------------------------------------------
				--------
				.STACK 64   ;64 BYTES FOR STACK      
				;----------------------------------------------
				--------                    
				.DATA                           
 0000  0037			UPPERBOUND_Y DW 55   ;THOSE BOUNDARY VALUES ARE
				 BASED ON 640*400 VIDEO MODE
 0002  0168			LOWERBOUND_Y DW 360
 0004  0000			LEFTBOUND_X DW 0
 0006  0280			RIGHTBOUND_X DW 640
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-24


 0008  00			BUFFER DB 0                    
 0009  0032			STARTPOS_X_PLAYER1 DW 50
 000B  0096			STARTPOS_Y_PLAYER1 DW 150
 000D  000A			TANK_HP_1 DW 10
 000F  0003			TANK_SPEED_1 DW 3
 0011  0001			TANK_DMG_1 DW 1                   ;DMG == DAMAG
				E OR STRENGTH                   
 0013  0002			ORIENTATION_PLAYER1 DW 2          ; (0 UP, 1 UP
				RIGHT, 2 RIGHT, 3 DOWNRIGHT, 4 DOWN)
				
 0015  0064			BULLET_1_START_POSITION_X DW 100  ;THE END POIN
				T OF TANK 1 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0017  00AF			BULLET_1_START_POSITION_Y DW 175
				
 0019  0226			STARTPOS_X_PLAYER2 DW 550
 001B  0096			STARTPOS_Y_PLAYER2 DW 150
 001D  000A			TANK_HP_2 DW 10
 001F  0003			TANK_SPEED_2 DW 3
 0021  0001			TANK_DMG_2 DW 1           ;DMG == DAMAGE OR STR
				ENGTH                     
 0023  0002			ORIENTATION_PLAYER2 DW 2  ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
				
 0025  0005			HEARTS_1_START_POSITION_X DW 5
 0027  000A			HEARTS_1_START_POSITION_Y DW 10
				
 0029  01AE			HEARTS_2_START_POSITION_X DW 430
 002B  000A			HEARTS_2_START_POSITION_Y DW 10
				
 002D  0005			PWRUP_BAR_1_START_POSITION_X DW 5
 002F  0020			PWRUP_BAR_1_START_POSITION_Y DW 32
				
 0031  01AE			PWRUP_BAR_2_START_POSITION_X DW 430
 0033  0020			PWRUP_BAR_2_START_POSITION_Y DW 32
				
 0035  0226			BULLET_2_START_POSITION_X DW 550  ;THE END POIN
				T OF TANK 2 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0037  00AF			BULLET_2_START_POSITION_Y DW 175
				
 0039  0064			BULLET_1_POSITION_X DW 100 ;THE POSITION OF THE
				 BULLET 1 AT ANY TIME AFTER IT IS FIRED
 003B  00AF			BULLET_1_POSITION_Y DW 175
 003D  0000			BULLET_1_STATUS DW 0  ;BULLET 1 EXISTS OR NOT 0
				 -> NOT EXISTING
 003F  0002			BULLET_1_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 0041  000A			BULLET_1_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 0043  0000			BULLET_1_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER1 INCREASE HIS BULLET SPEED 
				
 0045  0226			BULLET_2_POSITION_X DW 550 ;THE POSITION OF THE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-25


				 BULLET 2 AT ANY TIME AFTER IT IS FIRED
 0047  00AF			BULLET_2_POSITION_Y DW 175
 0049  0000			BULLET_2_STATUS DW 0  ;BULLET 2 EXISTS OR NOT 0
				 -> NOT EXISTING
 004B  0002			BULLET_2_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 004D  000A			BULLET_2_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 004F  0000			BULLET_2_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER2 INCREASE HIS BULLET SPEED 
				
 0051  0002			BULLET_SPEED_POWERUPS DW 2 ;EVERY SPEED POWERUP
				 THE SPEED WILL INCREASE BY 2 (BUT HAVE LIMIT 3
				 TIMES AT MOST)
				
				
 0053  0000			STARTPOS_X_GHOST1 DW ?
 0055  0000			STARTPOS_Y_GHOST1 DW ?
 0057  0000			EXISTS_GHOST1 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0059  0000			MOTION_GHOST1 DW 0   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 005B  0000			POWERUP_GHOST1 DW 0  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE 
 005D  0000			STARTPOS_X_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 005F  0000			STARTPOS_Y_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0061  0000			TYPE_GHOST1 DW 0     ; TO CHOOSE ONE OF THREE S
				HAPES OF GHOSTS  (0, 1, 2)
				
				
 0063  0000			STARTPOS_X_GHOST2 DW ?
 0065  0000			STARTPOS_Y_GHOST2 DW ?
 0067  0000			EXISTS_GHOST2 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0069  0001			MOTION_GHOST2 DW 1   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 006B  0001			POWERUP_GHOST2 DW 1  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
 006D  0000			STARTPOS_X_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 006F  0000			STARTPOS_Y_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0071  0000			TYPE_GHOST2 DW 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
 0073  0000			STARTPOS_X_GHOST3 DW ?
 0075  0000			STARTPOS_Y_GHOST3 DW ?
 0077  0000			EXISTS_GHOST3 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0079  0002			MOTION_GHOST3 DW 2   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 007B  0002			POWERUP_GHOST3 DW 2  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
 007D  0000			STARTPOS_X_PORTAL3 DW ? ;LOCATION OF THE GHOST 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-26


				PORTAL
 007F  0000			STARTPOS_Y_PORTAL3 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0081  0000			TYPE_GHOST3 DW 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
				
 0083  0078			TIME DW 120           ; TIMER TERMINATES THE GA
				ME WHEN ZERO
 0085  0004[			TIME_DECIMAL DB 4 DUP('$')    ;FOR DECIMAL REPR
				ESENTAION OF TIME ON SCREEN
	   24			
			 ]	
				
 0089  6255			RANDSEED DW 25173                ;RANDSEED USED
				 FOR RANDOMIZATION
 008B  00			PREV_SYS_SECOND  DB ?
 008C  0000			LOWER4MACRO DW ?
 008E  0000			UPPER4MACRO DW ?
				
				
 0090  0032			TANKSIZE DW 50       ; SIZE OF ANY DRAWN TANK
 0092  0032			PORTAL_SIZE DW 50    ;SIZE OF THE GHOST PORTAL 
 0094  0028			GHOSTSIZE DW 40      ; SIZE OF ANY GHOST
 0096  000A			BULLETSIZE DW 10     ; SIZE OF A BULLET
 0098  0014			HEARTSIZE DW 20      ;SIZE OF A HEART
 009A  0014			PRUP_ICON_SIZE DW 20 ;SIZE OF THE POWER-UP ICON
				S 
 009C  0068			LOGOSIZE DW 104      ;SIZE OF LOGO IN THE INTER
				FACE
				
 009E  0000			WINNER DW ?          ;THE WINNNER PLAYER NUMBER
				
 00A0  01DB			LOGO_X DW 475        ;POSITION OF LOGO IN INTER
				FACE
 00A2  007D			LOGO_Y DW 125        ;POSITION OF LOGO IN INTER
				FACE
				
 00A4  50 52 45 53 53 20	MENUITEM1 DB 'PRESS F1 TO START CHATTING$'
       46 31 20 54 4F 20	
       53 54 41 52 54 20	
       43 48 41 54 54 49	
       4E 47 24			
 00BF  50 52 45 53 53 20	MENUITEM2 DB 'PRESS F2 TO START THE GAME$'
       46 32 20 54 4F 20	
       53 54 41 52 54 20	
       54 48 45 20 47 41	
       4D 45 24			
 00DA  50 52 45 53 53 20	MENUITEM3 DB 'PRESS ESC TO EXIT THE PROGRAM',10
				,13,'$'
       45 53 43 20 54 4F	
       20 45 58 49 54 20	
       54 48 45 20 50 52	
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-27


       4F 47 52 41 4D 0A	
       0D 24			
				
				
				;----------------------------------------------
				-----------------------------------------------
				------------
				.CODE                                          
				       
 0000				MAIN                PROC         
 0000  B8 ---- R		   MOV     AX,@DATA   
 0003  8E D8			   MOV     DS,AX
 0005  8E C0			   MOV     ES,AX      
				 
				
 0007  E8 1F66 R		 CALL MAIN_MENU
				 
				;{PUT INITIAL VAULE FOR THE SEED
				   
 000A  B4 00			   MOV   AH, 0
 000C  CD 1A			   INT   1AH
 000E  89 16 0089 R		   MOV   RANDSEED, DX    ; SEED WITH THE SYSTEM
				 TIME
				
				;}
 0012				   MAINLOOP:
				   ;{
 0012  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 0015  BB 0100			         MOV    BX, 100H
 0018  CD 10			         INT    10H
				
				         PRINTNUM     TIME, TIME_DECIMAL    ;ma
				cro to display time
 001A  C6 06 0085 R 30       1	   mov TIME_DECIMAL, '0' 
 001F  C6 06 0086 R 30       1	   mov TIME_DECIMAL + 1, '0' 
 0024  BB 000A               1	   MOV BX, 10 
 0027  BE 0085 R             1	   MOV SI, OFFSET TIME_DECIMAL 
 002A  83 C6 03              1	   ADD SI, 3 
 002D  4E                    1	   DEC SI 
 002E  A1 0083 R             1	   MOV AX, TIME 
 0031                        1	   ??0000: 
 0031  2B D2                 1	      SUB DX, DX 
 0033  F7 F3                 1	      DIV BX 
 0035  80 CA 30              1	      OR DL, 30H 
 0038  88 14                 1	      MOV [SI], DL 
 003A  4E                    1	      DEC SI 
 003B  3D 0000               1	      CMP AX, 0 
 003E  77 F1                 1	      JA ??0000 
 0040  B4 02                 1	   MOV AH, 2 
 0042  B6 01                 1	   MOV DH, 1    ;Y POSITION FOR PRINTING 
 0044  B2 23                 1	   MOV DL, 35    ;X POSITION FOR PRINTING 
 0046  CD 10                 1	   INT 10H 
 0048  B4 09                 1	   MOV AH, 9H      ;PRINT THE NUMBER 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-28


 004A  BA 0085 R             1	   MOV DX, OFFSET TIME_DECIMAL 
 004D  CD 21                 1	   INT 21H 
 004F  83 3E 0083 R 00		         CMP    TIME, 0                    ;END
				 GAME AT TIME 0
 0054  74 71			         JE     ENDPROGRAM1
 0056  B4 2C			         MOV    AH, 2CH
 0058  CD 21			         INT    21H
 005A  3A 36 008B R		         CMP    DH, PREV_SYS_SECOND
 005E  74 1B			         JE     NOTIMECHANGE
 0060  83 2E 0083 R 01		         SUB    TIME, 1                    ;DEC
				REASE THE 
 0065  A1 0083 R		         MOV    AX, TIME  ;TO CHECK IF 10 DIVID
				ES TIME THEN A NEW WAVE OF GHOST APPEAR
 0068  40			         INC    AX
 0069  B3 0A			         MOV    BL, 10
 006B  F6 F3			         DIV    BL
 006D  80 FC 00			         CMP    AH, 0
 0070  75 09			         JNE    NOGHOSTWAVE
				         ;{ IF IT'S TIME FOR NEW WAVE INITIALIZ
				E THEIR POSITIONS
 0072  E8 0615 R		               CALL    RANDOMIZE_GHOST1
 0075  E8 078E R		               CALL    RANDOMIZE_GHOST2
 0078  E8 0912 R		               CALL    RANDOMIZE_GHOST3
				         ;}
				         
				
 007B				         NOTIMECHANGE:
 007B				               NOGHOSTWAVE:
 007B  88 36 008B R		                     MOV    PREV_SYS_SECOND, DH
				       ;CURRENT SECOND IS PREVIOUS FOR NEXT TIM
				E
				                     
 007F  E8 0B57 R		                     CALL   MOVE_GHOST1
 0082  E8 0C76 R		                     CALL   MOVE_GHOST2
 0085  E8 0D97 R		                     CALL   MOVE_GHOST3
				
				               ;{CHECK FOR COLLISIONS BETWEEN T
				HE GHOSTS AND TANK 1 IF THE GHOST EXISTS
 0088  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 008D  75 03			                     JNE SKIP_GHOST1_CHECK1
 008F  E8 1789 R		                        CALL CHECK_HIT_GHOST1_T
				ANK1
 0092				                     SKIP_GHOST1_CHECK1:
				
 0092  83 3E 0067 R 01		                     CMP EXISTS_GHOST2, 1
 0097  75 03			                     JNE SKIP_GHOST2_CHECK1
 0099  E8 181F R		                        CALL CHECK_HIT_GHOST2_T
				ANK1
 009C				                     SKIP_GHOST2_CHECK1:
				
 009C  83 3E 0077 R 01		                     CMP EXISTS_GHOST3, 1
 00A1  75 03			                     JNE SKIP_GHOST3_CHECK1
 00A3  E8 18B5 R		                        CALL CHECK_HIT_GHOST3_T
				ANK1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-29


 00A6				                     SKIP_GHOST3_CHECK1:
				               ;}
				
				               ;{SIMILAR CHECKS FOR COLLISIONS 
				BETWEEN THE GHOSTS AND TANK 2 IF THE GHOST EXIS
				TS
 00A6  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 00AB  75 03			                     JNE SKIP_GHOST1_CHECK2
 00AD  E8 194B R		                        CALL CHECK_HIT_GHOST1_T
				ANK2
 00B0				                     SKIP_GHOST1_CHECK2:
				
 00B0  83 3E 0067 R 01		                     CMP EXISTS_GHOST2, 1
 00B5  75 03			                     JNE SKIP_GHOST2_CHECK2
 00B7  E8 19E1 R		                        CALL CHECK_HIT_GHOST2_T
				ANK2
 00BA				                     SKIP_GHOST2_CHECK2:
				
 00BA  83 3E 0077 R 01		                     CMP EXISTS_GHOST3, 1
 00BF  75 03			                     JNE SKIP_GHOST3_CHECK3
 00C1  E8 1A77 R		                        CALL CHECK_HIT_GHOST3_T
				ANK2
 00C4				                     SKIP_GHOST3_CHECK3:
				               ;}
				
				               ;{USELESS BLOCK TO HANDLE JUMP O
				UT OF RANGE
 00C4  EB 04 90			                  JMP SKIP1
 00C7  E9 016E R		                  ENDPROGRAM1: JMP ENDPROGRAM
 00CA				                  SKIP1:
				               ;}
 00CA  E8 0DF7 R		                     CALL   DRAW_PORTALS
 00CD  E8 0411 R		                     CALL   DRAW_TANK1
 00D0  E8 050E R		                     CALL   DRAW_TANK2
 00D3  E8 1B0D R							      C
				ALL   DRAW_HEALTH_BAR_1
 00D6  E8 1B8F R						      	CALL   
				DRAW_HEALTH_BAR_2
 00D9  E8 0A96 R		                     CALL   DRAW_GHOST1
 00DC  E8 0BB5 R		                     CALL   DRAW_GHOST2
 00DF  E8 0CD6 R		                     CALL   DRAW_GHOST3
 00E2  E8 0F76 R		                     CALL MOVE_BULLET_1
 00E5  E8 10D1 R		                     CALL MOVE_BULLET_2
				
				               ;{BEFORE CHECKING COLLISION WE M
				UST MAKE SURE THE BULLET EXISTS IN THE FIRST PL
				ACE
				                     ;CHECK HITTING ANY GHOST
 00E8  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00ED  75 03			                     JNE SKIP_BUL1_CHECKS1
 00EF  E8 11E2 R		                           CALL CHECK_HIT_BUL1_
				GHOST1
 00F2				                     SKIP_BUL1_CHECKS1:
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-30


 00F2  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00F7  75 03			                     JNE SKIP_BUL1_CHECKS2
 00F9  E8 12A5 R		                           CALL CHECK_HIT_BUL1_
				GHOST2
 00FC				                     SKIP_BUL1_CHECKS2:
				
 00FC  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0101  75 03			                     JNE SKIP_BUL1_CHECKS3
 0103  E8 1368 R		                           CALL CHECK_HIT_BUL1_
				GHOST3
 0106				                     SKIP_BUL1_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 0106  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 010B  75 03			                     JNE SKIP_BUL1_CHECKS4
 010D  E8 114E R		                           CALL CHECK_HIT_BUL1_
				TANK2
 0110				                     SKIP_BUL1_CHECKS4:
				               ;}
				
				               ;{SIMILAR CHECKS FOR BULLET 2
				                     ;CHECK HITTING ANY GHOST
 0110  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0115  75 03			                     JNE SKIP_BUL2_CHECKS1
 0117  E8 14BF R		                           CALL CHECK_HIT_BUL2_
				GHOST1
 011A				                     SKIP_BUL2_CHECKS1:
				
 011A  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 011F  75 03			                     JNE SKIP_BUL2_CHECKS2
 0121  E8 1582 R		                           CALL CHECK_HIT_BUL2_
				GHOST2
 0124				                     SKIP_BUL2_CHECKS2:
				
 0124  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0129  75 03			                     JNE SKIP_BUL2_CHECKS3
 012B  E8 1645 R		                           CALL CHECK_HIT_BUL2_
				GHOST3
 012E				                     SKIP_BUL2_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 012E  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0133  75 03			                     JNE SKIP_BUL2_CHECKS4
 0135  E8 142B R		                           CALL CHECK_HIT_BUL2_
				TANK1
 0138				                     SKIP_BUL2_CHECKS4:
				               ;}
				
				               ;{DRAW POWER-UP BARS
 0138  E8 1C14 R		                  CALL DRW_PRUP_BAR_1
 013B  E8 1C95 R		                  CALL DRW_PRUP_BAR_2
				               ;}
				               
				               ;{CHECK IF THE TWO BULLETS COLLI
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-31


				DE
 013E  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0143  75 0A			                     JNE SKIP_HITTING_CHECK
 0145  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1 
 014A  75 03			                     JNE SKIP_HITTING_CHECK
 014C  E8 1708 R		                        CALL BULLETS_HIT
 014F				                     SKIP_HITTING_CHECK:
				               ;}
				
 014F  E8 0EC5 R		                     CALL DRAW_BULLET_1
 0152  E8 1024 R		                     CALL DRAW_BULLET_2
				                    
				
				               ;{ DELAY 0.125 SECOND  WHERE DEL
				AY IN MELLISECOND IS CXDX  CX AND MSB AND DX AS
				 LSB
 0155  B9 0000			                     MOV     CX, 00H
 0158  BA C350			                     MOV     DX, 0C350H
 015B  B4 86			                     MOV     AH, 86H
 015D  CD 15			                     INT     15H
				               ;}
				               
				               ;{ IF(USER PRESS ANY KEY)
 015F  B4 01			                     MOV    AH, 1
 0161  CD 16			                     INT    16H
 0163  75 03			                     JNZ    CHECKKEY
				               ;}
 0165  E9 0012 R		                     JMP    MAINLOOP
 0168				            CHECKKEY:
				               ;{
 0168  E8 0318 R		                     CALL   USERINPUT
 016B  E9 0012 R		                     JMP    MAINLOOP
				               ;}
				
				
 016E				            ENDPROGRAM: 
				               ;{       
 016E  A1 001D R		                    MOV AX, TANK_HP_2
 0171  39 06 000D R		                    CMP TANK_HP_1,AX
 0175  74 14			                    JE DRAW_CASE
 0177  77 09			                    JA PLAYER1_WON
 0179  C7 06 009E R 0002	                    MOV WINNER,2
 017F  EB 07 90			                    JMP RESULT
				
 0182				                    PLAYER1_WON:
 0182  C7 06 009E R 0001	                    MOV WINNER,1
				
 0188				                    RESULT:
 0188  E8 1D16 R		                    CALL PLAYER_LOST
				
 018B				                  DRAW_CASE :
				                  ;(
				                    DRAW 60,60,190,190,03
 018B  50                    1	PUSH AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-32


 018C  51                    1	PUSH CX 
 018D  52                    1	PUSH DX 
 018E  53                    1	PUSH BX 
 018F  56                    1	PUSH SI 
 0190  57                    1	PUSH DI 
 0191  BA 00BE               1	    MOV DX,190 ; Y = 250 
 0194  B9 00BE               1	    MOV CX,190 ; X = 400 
 0197  B0 03                 1	    MOV AL,03 
 0199  B4 0C                 1	    MOV AH,0CH 
 019B                        1	    ??0001: 
 019B                        1	        ??0002: 
 019B  CD 10                 1	                INT 10H 
 019D  83 C1 32              1	                ADD CX, 60 - 10 
 01A0  CD 10                 1	                INT 10H 
 01A2                        1	         ??0004: 
 01A2  83 E9 32              1	         SUB CX,60 - 10 
 01A5  42                    1	        INC DX 
 01A6  81 FA 00FA            1	        CMP DX,190 + 60 
 01AA  75 EF                 1	        JNZ ??0002 
 01AC  BA 00BE               1	    MOV DX,190 
 01AF  41                    1	    INC CX 
 01B0  81 F9 00C8            1	    CMP CX,190 + 10 
 01B4  75 E5                 1	    JNZ ??0001 
 01B6  B9 00BE               1	    MOV CX,190 
 01B9  BA 00BE               1	    MOV DX,190 
 01BC                        1	    ??0005: 
 01BC                        1	        ??0007: 
 01BC  CD 10                 1	            INT 10H 
 01BE  83 C2 32              1	            ADD DX,60 - 10 
 01C1  CD 10                 1	            INT 10H 
 01C3  83 EA 32              1	            SUB DX, 60 - 10 
 01C6  41                    1	        INC CX 
 01C7  81 F9 00FA            1	        CMP CX,190 + 60 
 01CB  75 EF                 1	        JNZ ??0007 
 01CD  B9 00BE               1	    MOV CX,190 
 01D0  42                    1	    INC DX 
 01D1  81 FA 00C8            1	    CMP DX,190 +  10 
 01D5  75 E5                 1	    JNZ ??0005 
 01D7  B9 00FA               1	    MOV CX,190 + 60 
 01DA  BA 00BE               1	    MOV DX,190 
 01DD  BE 00BE               1	    MOV SI,190 
 01E0                        1	    ??0009: 
 01E0                        1	        ??000A: 
 01E0  CD 10                 1	            INT 10H 
 01E2  41                    1	            INC CX 
 01E3  42                    1	            INC DX 
 01E4  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 01E8  75 F6                 1	        JNZ ??000A 
 01EA  83 C6 01              1	            ADD SI,1 
 01ED  B9 00FA               1	            MOV CX,190 + 60 
 01F0  8B D6                 1	            MOV DX,SI 
 01F2  81 FA 00CC            1	            CMP DX,190 + 14 
 01F6  75 E8                 1	    JNZ ??0009 
 01F8  B9 00FA               1	    MOV CX,190 + 60 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-33


 01FB  BA 00FA               1	    MOV DX,190 + 60 
 01FE  BE 00FA               1	    MOV SI,190 + 60 
 0201                        1	    ??0006: 
 0201                        1	        ??0008: 
 0201  CD 10                 1	            INT 10H 
 0203  41                    1	            INC CX 
 0204  4A                    1	            DEC DX 
 0205  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 0209  75 F6                 1	        JNZ ??0008 
 020B  4E                    1	            DEC SI 
 020C  B9 00FA               1	            MOV CX,190 + 60 
 020F  8B D6                 1	            MOV DX,SI 
 0211  81 FA 00EC            1	            CMP DX,190 + 60 -  14 
 0215  75 EA                 1	    JNZ ??0006 
 0217  B9 00FA               1	    MOV CX,190 + 60 
 021A  BA 00C8               1	    MOV DX,190 + 10 
 021D                        1	    ??000C: 
 021D                        1	        COLDD: 
 021D  CD 10                 1	                INT 10H 
 021F  42                    1	        INC DX 
 0220  81 FA 00F0            1	        CMP DX,190 + 60 - 10 
 0224  75 F7                 1	        JNZ COLDD 
 0226  BA 00C8               1	    MOV DX,190 +10 
 0229  41                    1	    INC CX 
 022A  81 F9 00FF            1	    CMP CX,190 + 60 + 5 
 022E  75 ED                 1	    JNZ ??000C 
 0230  B9 0109               1	    MOV CX,190 + 60 + 15 
 0233  BA 00BE               1	    MOV DX, 190 
 0236                        1	    ??000E: 
 0236                        1	        COLRAW: 
 0236  CD 10                 1	            INT 10H 
 0238  83 C1 32              1	            ADD CX,60 - 10 
 023B  81 FA 00D7            1	                    CMP DX,190 +25 
 023F  77 05                 1	                    JA ??000D 
 0241  CD 10                 1	                    INT 10H 
 0243  EB 09 90              1	                    JMP CN 
 0246  81 FA 00DC            1	                    ??000D: CMP DX,190 + 30 
 024A  72 02                 1	                    JB CN 
 024C  CD 10                 1	                    INT 10H 
 024E                        1	        CN: 
 024E  83 C1 14              1	            ADD CX,20 
 0251  CD 10                 1	            INT 10H 
 0253  83 C1 32              1	            ADD CX,60 -10 
 0256  CD 10                 1	            INT 10H 
 0258  83 C1 14              1	            ADD CX,20 
 025B  CD 10                 1	            INT 10H 
 025D  83 C1 1E              1	            ADD CX,60/2 
 0260  83 E9 05              1	            SUB CX,5 
 0263  CD 10                 1	            INT 10H 
 0265  83 E9 1E              1	            SUB CX,60/2 
 0268  83 C1 05              1	            ADD CX,5 
 026B  83 C1 32              1	            ADD CX,60 -10 
 026E  CD 10                 1	            INT 10H 
 0270  81 E9 00BE            1	         SUB CX, 3*60 + 10 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-34


 0274  42                    1	        INC DX 
 0275  81 FA 00FA            1	        CMP DX,190 + 60 
 0279  75 BB                 1	        JNZ COLRAW 
 027B  BA 00BE               1	    MOV DX,190 
 027E  41                    1	    INC CX 
 027F  81 F9 0113            1	    CMP CX,190 + 60 + 25 
 0283  75 B1                 1	    JNZ ??000E 
 0285  B9 0109               1	    MOV CX,190 + 60 + 15 
 0288  BA 00BE               1	    MOV DX, 190 
 028B                        1	    ??0010: 
 028B                        1	        ??000F: 
 028B  CD 10                 1	        INT 10H 
 028D  83 C2 14              1	            ADD DX,20 
 0290  81 F9 0140            1	                CMP CX,190 + 2 * 60 + 10 
 0294  77 05                 1	                JA ??0011 
 0296  CD 10                 1	                INT 10H 
 0298  EB 11 90              1	                JMP ??0012 
 029B  81 FA 00D7            1	                ??0011: CMP DX,190 + 25 
 029F  77 0A                 1	                JA ??0012 
 02A1  CD 10                 1	                INT 10H 
 02A3  81 FA 00E1            1	                ??0015: CMP DX,190 + 35 
 02A7  72 02                 1	                JB ??0012 
 02A9  CD 10                 1	                INT 10H 
 02AB  83 C2 0A              1	                ??0012: ADD DX,10 
 02AE  81 F9 0140            1	                CMP CX,190 + 2*60 + 10 
 02B2  77 05                 1	                JA ??0016 
 02B4  CD 10                 1	                INT 10H 
 02B6  EB 11 90              1	                JMP ??0013 
 02B9  81 FA 00D7            1	                ??0016: CMP DX,190 + 25 
 02BD  77 02                 1	                JA ??0014 
 02BF  CD 10                 1	                INT 10H 
 02C1  81 FA 00E1            1	                ??0014: CMP DX,190 + 35 
 02C5  72 02                 1	                JB ??0013 
 02C7  CD 10                 1	                INT 10H 
 02C9                        1	            ??0013: 
 02C9  83 EA 1E              1	            SUB DX,30 
 02CC  83 C1 46              1	                ADD CX,60 + 10 
 02CF  CD 10                 1	                INT 10H 
 02D1  83 C2 1E              1	                ADD DX,60/2 
 02D4  CD 10                 1	                INT 10H 
 02D6  83 C2 14              1	                ADD DX,60/2 -10 
 02D9  83 C1 46              1	                ADD CX,60 + 10 
 02DC  CD 10                 1	                INT 10H 
 02DE  81 E9 008C            1	                SUB CX,2*60 + 20 
 02E2  83 EA 32              1	                SUB DX,60 -10 
 02E5  41                    1	        INC CX 
 02E6  81 F9 0145            1	        CMP CX,190 + 2* 60 + 15 
 02EA  75 9F                 1	        JNZ ??000F 
 02EC  B9 0109               1	    MOV CX,190 + 60 + 15 
 02EF  42                    1	    INC DX 
 02F0  81 FA 00C8            1	    CMP DX,190 + 10 
 02F4  75 95                 1	    JNZ ??0010 
 02F6  5F                    1	POP DI 
 02F7  5E                    1	POP SI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-35


 02F8  5B                    1	POP BX 
 02F9  5A                    1	POP DX 
 02FA  59                    1	POP CX 
 02FB  58                    1	POP AX 
 02FC  B4 4C			                    MOV    AH,4CH
 02FE  CD 21			                    INT    21H
				                  ;)  
				               ;}
 0300				MAIN                ENDP   
				
				;----------------------------------------------
				--------------------------------------
				;  _    _   _____  ______  _____    _____  _   
				_  _____   _    _  _______  
				; | |  | | / ____||  ____||  __ \  |_   _|| \ |
				 ||  __ \ | |  | ||__   __| 
				; | |  | || (___  | |__   | |__) |   | |  |  \|
				 || |__) || |  | |   | |    
				; | |  | | \___ \ |  __|  |  _  /    | |  | . `
				 ||  ___/ | |  | |   | |    
				; | |__| | ____) || |____ | | \ \   _| |_ | |\ 
				 || |     | |__| |   | |    
				;  \____/ |_____/ |______||_|  \_\ |_____||_| \
				_||_|      \____/    |_|    
				;----------------------------------------------
				--------------------------------------         
				                                               
				                 
				                                               
				                           
				
				;----------------------------------------------
				--------------------------
				; CLEARS KEYBOARD BUFFER
				;----------------------------------------------
				----------------------------
 0300				CLEARKEYBOARDBUFFER		PROC NEAR
 0300  50				PUSH		AX
 0301  06				PUSH		ES
 0302  B8 0000				MOV		AX, 0000H
 0305  8E C0				MOV		ES, AX
 0307  26: C7 06 041A 041E		MOV		ES:[041AH], 041EH
 030E  26: C7 06 041C 041E		MOV		ES:[041CH], 041EH
								; CLEARS KEYBOA
				RD BUFFER
 0315  07				POP		ES
 0316  58				POP		AX
 0317  C3				RETN
 0318				CLEARKEYBOARDBUFFER		ENDP 
				
				;----------------------------------------------
				--------------------------
				; TAKE ACTION BASED ON USER INPUT
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-36


				----------------------------
 0318				USERINPUT PROC NEAR 
				;{    
				      ;{SAVE DATA
 0318  50			         PUSH    AX
 0319  53			         PUSH    BX
 031A  51			         PUSH    CX
 031B  52			         PUSH    DX
				      ;}
				      ;{ TAKE THE USER INPUT FROM THE KEYBOARD 
				BUFFER
 031C  B4 00			         MOV    AH, 0
 031E  CD 16			         INT    16H      
 0320  E8 0300 R		         CALL   CLEARKEYBOARDBUFFER  
				      ;} 
				   
 0323				      MOVEUP1:
				      ;{
 0323  3C 77			         CMP    AL, 'w' 
 0325  75 17			         JNE    MOVEDOWN1
 0327  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 032B  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 032F  2B CB			         SUB    CX, BX
 0331  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0334  7C 4A			         JL     BACKTOMAINLOOP_1
 0336  83 2E 000B R 03		         SUB    STARTPOS_Y_PLAYER1, 3
 033B  EB 43 90			         JMP    BACKTOMAINLOOP_1     
				      ;}
				      
 033E				      MOVEDOWN1:
				      ;{
 033E  3C 73			         CMP    AL, 's' 
 0340  75 1B			         JNE    ORIENT_UP1
 0342  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 0346  03 0E 0090 R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 034A  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 034E  2B D9			         SUB    BX, CX
 0350  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0353  7C 2B			         JL     BACKTOMAINLOOP_1
 0355  83 06 000B R 03		         ADD    STARTPOS_Y_PLAYER1, 3
 035A  EB 24 90			         JMP    BACKTOMAINLOOP_1 
				      ;}
				      
 035D				      ORIENT_UP1:
				      ;{
 035D  3C 71			         CMP    AL, 'q' 
 035F  75 0F			         JNE    ORIENT_DOWN1
 0361  83 3E 0013 R 00		         CMP    ORIENTATION_PLAYER1, 0
 0366  74 18			         JE     BACKTOMAINLOOP_1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-37


 0368  83 2E 0013 R 01		         SUB    ORIENTATION_PLAYER1, 1 
 036D  EB 11 90			         JMP    BACKTOMAINLOOP_1
				      ;}
				   
 0370				      ORIENT_DOWN1:
				      ;{
 0370  3C 65			         CMP    AL, 'e' 
 0372  75 0F			         JNE    FIREBULLET1
 0374  83 3E 0013 R 04		         CMP    ORIENTATION_PLAYER1, 4
 0379  74 05			         JE     BACKTOMAINLOOP_1
 037B  83 06 0013 R 01		         ADD    ORIENTATION_PLAYER1, 1 
 0380				         BACKTOMAINLOOP_1:      ;JUST A MIDDLE 
				JUMP TO USE IT FOR THE PREVIOUS LABELS
 0380  E9 040C R		         JMP    BACKTOMAINLOOP         
				      ;}
				
 0383				      FIREBULLET1:
				      ;{
 0383  3C 20			         CMP AL, 32 
 0385  75 06			         JNE MOVEUP2
 0387  E8 0E94 R		         CALL FIRE_BULLET_1
 038A  E9 040C R		         JMP BACKTOMAINLOOP
				      ;}
				
 038D				      MOVEUP2:
				      ;{
 038D  3C 69			         CMP    AL, 'i' 
 038F  75 17			         JNE    MOVEDOWN2
 0391  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 0395  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 0399  2B CB			         SUB    CX, BX
 039B  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 039E  7C 6C			         JL     BACKTOMAINLOOP
 03A0  83 2E 001B R 03		         SUB    STARTPOS_Y_PLAYER2, 3
 03A5  EB 65 90			         JMP    BACKTOMAINLOOP   
				      ;}
				      
 03A8				      MOVEDOWN2:
				      ;{
 03A8  3C 6B			         CMP    AL, 'k' 
 03AA  75 1B			         JNE    ORIENT_UP2
 03AC  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 03B0  03 0E 0090 R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 03B4  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 03B8  2B D9			         SUB    BX, CX
 03BA  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 03BD  7C 4D			         JL     BACKTOMAINLOOP
 03BF  83 06 001B R 03		         ADD    STARTPOS_Y_PLAYER2, 3
 03C4  EB 46 90			         JMP    BACKTOMAINLOOP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-38


				      ;}
				      
 03C7				      ORIENT_UP2:
				      ;{
 03C7  3C 6F			         CMP    AL, 'o' 
 03C9  75 0F			         JNE    ORIENT_DOWN2
 03CB  83 3E 0023 R 00		         CMP    ORIENTATION_PLAYER2, 0
 03D0  74 3A			         JE     BACKTOMAINLOOP
 03D2  83 2E 0023 R 01		         SUB    ORIENTATION_PLAYER2, 1 
 03D7  EB 33 90			         JMP    BACKTOMAINLOOP
				      ;}
				
 03DA				      ORIENT_DOWN2:
				      ;{
 03DA  3C 75			         CMP    AL, 'u' 
 03DC  75 0F			         JNE    FIRE_BULLET_2
 03DE  83 3E 0023 R 04		         CMP    ORIENTATION_PLAYER2, 4
 03E3  74 27			         JE     BACKTOMAINLOOP
 03E5  83 06 0023 R 01		         ADD    ORIENTATION_PLAYER2, 1 
 03EA  EB 20 90			         JMP    BACKTOMAINLOOP          
				      ;}
				
 03ED				      FIRE_BULLET_2:
				      ;{
 03ED  3C 0D			         CMP AL , 13
 03EF  75 06			         JNE EXITPROG
 03F1  E8 0FF3 R		         CALL FIRE_BULLET2
 03F4  EB 16 90			         JMP BACKTOMAINLOOP
				      ;}
				
 03F7				      EXITPROG:
				      ;{
 03F7  3C 1B			         CMP    AL,1BH
 03F9  75 11			         JNE    BACKTOMAINLOOP
 03FB  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 03FE  BB 0100			         MOV    BX, 100H
 0401  CD 10			         INT    10H
 0403  9A 0000 ---- E		         CALL SOUND 
 0408  B4 4C			         MOV    AH, 4CH
 040A  CD 21			         INT    21H
				      ;}
				
				      ;{RETNURN STORED DATA
 040C				         BACKTOMAINLOOP:
 040C  5A			         POP DX
 040D  59			         POP CX
 040E  5B			         POP BX
 040F  58			         POP AX
				      ;}   
 0410  C3			RETN
 0411				USERINPUT		ENDP 
				;----------------------------------------------
				------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-39


				;  _______         _   _  _  __
				; |__   __| /\    | \ | || |/ /
				;    | |   /  \   |  \| || ' / 
				;    | |  / /\ \  | . ` ||  <  
				;    | | / ____ \ | |\  || . \ 
				;    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				------------------------------                 
				             
				;----------------------------------------------
				----------------------------
				; DRAWS THE FIRST PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 0411				DRAW_TANK1 PROC NEAR 
				;{
				    ;{SAVE DATA  
 0411  50			      PUSH   AX
 0412  53			      PUSH   BX
 0413  51			      PUSH    CX
 0414  52			      PUSH   DX
				   ;}
				   
				   ;{;TO STORE THE TANK SIZE TO BE SENT TO THE 
				DRAWING MACRO
 0415  8B 1E 0090 R		      MOV    BX, TANKSIZE    
 0419  83 3E 0013 R 00		      CMP    ORIENTATION_PLAYER1, 0
 041E  75 27			      JNE    UPRIGHT
				   ;}
				
				   ;{ IF(ORIENTATION IS UP)
 0420  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER1
				      
				      ;SET BULLET 1 STARTING POSITION X,Y
 0423  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 0425  D1 E8			      SHR AX , 1    
 0427  8B 16 0009 R		      MOV DX, STARTPOS_X_PLAYER1
 042B  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 042D  A1 0096 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 0430  D1 E8			      SHR AX, 1      
 0432  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 0434  89 16 0015 R		      MOV BULLET_1_START_POSITION_X,DX
 0438  8B 0E 000B R		      MOV CX, STARTPOS_Y_PLAYER1
 043C  2B 0E 0096 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 0440  89 0E 0017 R		      MOV BULLET_1_START_POSITION_Y, CX
				
 0444  E9 04E0 R		      JMP    DRAWTANK 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-40


				   ;}
 0447				   UPRIGHT:
				      ;{   
 0447  83 3E 0013 R 01		         CMP    ORIENTATION_PLAYER1, 1
 044C  75 1C			         JNE    RIGHT
				            ;{ IF(ORIENTATION IS UPRIGHT)
 044E  BE 0000 E		               MOV    SI, OFFSET BITMAP_UPRIGHT
				_PLAYER1
				
				               ;SET BULLET 1 STARTING POSITION 
				X,Y
 0451  8B 16 0009 R		               MOV DX, STARTPOS_X_PLAYER1
 0455  03 D3			               ADD DX, BX  ;MOVE TO THE TOP RIG
				HT VERTIX BY ADDING TANK SIZE
 0457  89 16 0015 R		               MOV BULLET_1_START_POSITION_X, D
				X
 045B  8B 16 000B R		               MOV DX, STARTPOS_Y_PLAYER1
 045F  2B 16 0096 R		               SUB DX, BULLETSIZE
 0463  89 16 0017 R		               MOV BULLET_1_START_POSITION_Y, D
				X ;BULLET DRAWING STARTING POINT IS ABOVE THE C
				ANON BY BULLET SIZE
				
 0467  EB 77 90			               JMP    DRAWTANK  
				            ;}
				      ;}
 046A				   RIGHT:
				   ;{
 046A  83 3E 0013 R 02		         CMP    ORIENTATION_PLAYER1, 2
 046F  75 2A			         JNE    DOWNRIGHT
				         ;{ IF(ORIENTATION IS RIGHT)
 0471  BE 0000 E		            MOV    SI, OFFSET BITMAP_RIGHT_PLAY
				ER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 0474  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 0478  03 D3			            ADD DX , BX   ;ADD THE TANK SIZE TO
				 REACH THE TOP RIGHT VERTIX
 047A  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 047E  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 0480  D1 E8			            SHR AX, 1 
 0482  8B D0			            MOV DX, AX
 0484  A1 0096 R		            MOV AX, BULLETSIZE
 0487  D1 E8			            SHR AX, 1
 0489  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 048B  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 048E  8B 0E 000B R		            MOV CX, STARTPOS_Y_PLAYER1
 0492  03 CA			            ADD CX, DX
 0494  89 0E 0017 R		            MOV BULLET_1_START_POSITION_Y, CX  
				           
				            
 0498  EB 46 90			              JMP DRAWTANK
				         ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-41


				   ;}
 049B				   DOWNRIGHT:
				   ;{
 049B  83 3E 0013 R 03		         CMP    ORIENTATION_PLAYER1, 3
 04A0  75 1A			         JNE    DOWN1
				         ;{ IF(ORIENTATION IS DOWNRIGHT)
 04A2  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNRIGHT_
				PLAYER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 04A5  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 04A9  03 D3			            ADD DX, BX ;ADD TANK SIZE TO REACH 
				THE TOP RIGHT VERTIX OF THE TANK
 04AB  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 04AF  8B 16 000B R		            MOV DX, STARTPOS_Y_PLAYER1
 04B3  03 D3			            ADD DX, BX ;ADD THE TANK SIZE IN Y 
				TO GO TO THE BOTTOM LEFT VERTIX
 04B5  89 16 0017 R		            MOV BULLET_1_START_POSITION_Y, DX
				            
 04B9  EB 25 90			            JMP DRAWTANK  
				         ;}
				   ;}
				
				    
 04BC				   DOWN1:
				   ;{
 04BC  BE 0000 E		         MOV    SI, OFFSET BITMAP_DOWN_PLAYER1
				
				         ;SET BULLET 1 STARTING POSITION X,Y
 04BF  8B C3			         MOV AX , BX ;GET HALF THE TANK SIZE
 04C1  D1 E8			         SHR AX,1
 04C3  8B D0			         MOV DX, AX
 04C5  A1 0096 R		         MOV AX, BULLETSIZE
 04C8  D1 E8			         SHR AX,1
 04CA  2B D0			         SUB DX, AX  ;SUBTRACT HALF THE BULLETS
				IZE TO REACH TOP LEFT VERTIX OF THE BULLET
 04CC  8B 0E 0009 R		         MOV CX, STARTPOS_X_PLAYER1
 04D0  03 CA			         ADD CX, DX
 04D2  89 0E 0015 R		         MOV BULLET_1_START_POSITION_X, CX
 04D6  8B 16 000B R		         MOV DX,STARTPOS_Y_PLAYER1
 04DA  03 D3			         ADD DX, BX  ;ADD TANK SIZE TO REACH TH
				E BOTTOM END
 04DC  89 16 0017 R		         MOV BULLET_1_START_POSITION_Y, DX     
				         
				   ;}
 04E0				   DRAWTANK:
				   ;{
				         DRAW_OBJECT    TANKSIZE, SI, STARTPOS_
				X_PLAYER1, STARTPOS_Y_PLAYER1
 04E0  51                    1	   PUSH CX 
 04E1  53                    1	   PUSH BX 
 04E2  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 04E4  8B 16 000B R          1	   MOV     DX, STARTPOS_Y_PLAYER1     ; Y TO ST
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-42


				ART DRAWING AT 
 04E8  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 04EC  8A 3C                 1	   MOV BH, [SI] 
 04EE                        1	   ??0018:;{ FOR(BP = 50; BD > 0; BP--) 
 04EE  8B 0E 0009 R          1	      MOV     CX, STARTPOS_X_PLAYER1    ; X TO 
				START 
 04F2  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 04F6                        1	      ??0017:;{ FOR(DX = 50; DX > 0; DX--) 
 04F6  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 04F7  3A F8                 1	         CMP BH ,AL 
 04F9  74 04                 1	         JE ??0019 
 04FB  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 04FD  CD 10                 1	         INT     10H 
 04FF                        1	         ??0019: 
 04FF  41                    1	         INC     CX         ; NEXT X POSITION 
 0500  4F                    1	         DEC     DI 
 0501  75 F3                 1	         JNZ     ??0017 
 0503  42                    1	      INC     DX         ; NEXT Y POSITION 
 0504  4D                    1	      DEC     BP 
 0505  75 E7                 1	      JNZ     ??0018 
 0507  5B                    1	      POP BX 
 0508  59                    1	      POP CX 
				   ;}
				   ;{GET DATA STORED
 0509  5A			      POP DX
 050A  59			      POP CX
 050B  5B			      POP BX
 050C  58			      POP AX
				   ;}
 050D  C3			RETN
				;}
 050E				DRAW_TANK1	ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE SECOND PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 050E				DRAW_TANK2 PROC NEAR 
				;{
				   ;{STORE DATA
 050E  50			      PUSH    AX
 050F  53			      PUSH    BX
 0510  51			      PUSH    CX
 0511  52			      PUSH    DX
				   ;}   
 0512  8B 1E 0090 R		   MOV    BX, TANKSIZE    ;TO STORE THE TANK SI
				ZE TO BE SENT TO THE DRAWING MACRO
 0516  83 3E 0023 R 00		   CMP    ORIENTATION_PLAYER2, 0
 051B  75 27			   JNE    UPLEFT
				   ;{ IF(ORIENTATION IS UP)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-43


 051D  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER2 
				
				      ;SET BULLET 2 STARTING POSITION X,Y
 0520  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 0522  D1 E8			      SHR AX , 1    
 0524  8B 16 0019 R		      MOV DX, STARTPOS_X_PLAYER2
 0528  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 052A  A1 0096 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 052D  D1 E8			      SHR AX, 1      
 052F  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 0531  89 16 0035 R		      MOV BULLET_2_START_POSITION_X,DX
 0535  8B 0E 001B R		      MOV CX, STARTPOS_Y_PLAYER2
 0539  2B 0E 0096 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 053D  89 0E 0037 R		      MOV BULLET_2_START_POSITION_Y, CX
				      
 0541  E9 05E7 R		      JMP    DRAWTANK2
				   ;}
 0544				   UPLEFT: 
				   ;{  
 0544  83 3E 0023 R 01		      CMP    ORIENTATION_PLAYER2, 1
 0549  75 1E			      JNE    LEFT
				         ;{ IF(ORIENTATION IS UPLEFT)
 054B  BE 0000 E		            MOV    SI, OFFSET BITMAP_UPLEFT_PLA
				YER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 054E  8B 16 0096 R		            MOV DX, BULLETSIZE
 0552  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 0556  2B CA			            SUB CX, DX 
 0558  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 055C  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 0560  2B CA			            SUB CX , DX 
 0562  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				            
 0566  EB 7F 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 0569				   LEFT:
				   ;{
 0569  83 3E 0023 R 02		      CMP    ORIENTATION_PLAYER2, 2
 056E  75 2E			      JNE    DOWNLEFT
				         ;{ IF(ORIENTATION IS LEFT)
 0570  BE 0000 E		            MOV    SI, OFFSET BITMAP_LEFT_PLAYE
				R2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 0573  8B 16 0096 R		            MOV DX, BULLETSIZE
 0577  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-44


 057B  2B CA			            SUB CX, DX                    ;SUBT
				RACT BULLET SIZE TO REACH THE TOP LEFT CORNER O
				F THE BULLET GRID
 057D  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
				
 0581  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 0583  D1 E8			            SHR AX, 1 
 0585  8B D0			            MOV DX, AX
 0587  A1 0096 R		            MOV AX, BULLETSIZE
 058A  D1 E8			            SHR AX, 1
 058C  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 058E  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 0591  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 0595  03 CA			            ADD CX, DX
 0597  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX  
				
 059B  EB 4A 90			            JMP    DRAWTANK2  
				         ;}
				   ;}   
 059E				   DOWNLEFT:
				   ;{
 059E  83 3E 0023 R 03		      CMP    ORIENTATION_PLAYER2, 3
 05A3  75 1E			      JNE    DOWN2
				         ;{ IF(ORIENTATION IS DOWNLEFT)
 05A5  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNLEFT_P
				LAYER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 05A8  8B 16 0096 R		            MOV DX, BULLETSIZE
 05AC  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 05B0  2B CA			            SUB CX, DX        ;SUBTRACT BULLET 
				SIZE FROM STATRING POSITION TO REACH TOP LEFT V
				ERTIX OF THE BULLET GRID
 05B2  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 05B6  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 05BA  03 CB			            ADD CX, BX
 05BC  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				
 05C0  EB 25 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 05C3				   DOWN2:
				   ;{
 05C3  BE 0000 E		      MOV    SI, OFFSET BITMAP_DOWN_PLAYER2
				
				      ;SET BULLET 2 STARTING POSITION X,Y
 05C6  8B C3			      MOV AX , BX ;GET HALF THE TANK SIZE
 05C8  D1 E8			      SHR AX,1
 05CA  8B D0			      MOV DX, AX
 05CC  A1 0096 R		      MOV AX, BULLETSIZE
 05CF  D1 E8			      SHR AX,1
 05D1  2B D0			      SUB DX, AX  ;SUBTRACT HALF THE BULLETSIZE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-45


				 TO REACH TOP LEFT VERTIX OF THE BULLET
 05D3  8B 0E 0019 R		      MOV CX, STARTPOS_X_PLAYER2
 05D7  03 CA			      ADD CX, DX
 05D9  89 0E 0035 R		      MOV BULLET_2_START_POSITION_X, CX
 05DD  8B 16 001B R		      MOV DX,STARTPOS_Y_PLAYER2
 05E1  03 D3			      ADD DX, BX  ;ADD TANK SIZE TO REACH THE B
				OTTOM END
 05E3  89 16 0037 R		      MOV BULLET_2_START_POSITION_Y, DX
				
				   ;}
 05E7				   DRAWTANK2:
				   ;{
				      DRAW_OBJECT     TANKSIZE, SI, STARTPOS_X_
				PLAYER2, STARTPOS_Y_PLAYER2
 05E7  51                    1	   PUSH CX 
 05E8  53                    1	   PUSH BX 
 05E9  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 05EB  8B 16 001B R          1	   MOV     DX, STARTPOS_Y_PLAYER2     ; Y TO ST
				ART DRAWING AT 
 05EF  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 05F3  8A 3C                 1	   MOV BH, [SI] 
 05F5                        1	   ??001B:;{ FOR(BP = 50; BD > 0; BP--) 
 05F5  8B 0E 0019 R          1	      MOV     CX, STARTPOS_X_PLAYER2    ; X TO 
				START 
 05F9  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 05FD                        1	      ??001A:;{ FOR(DX = 50; DX > 0; DX--) 
 05FD  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 05FE  3A F8                 1	         CMP BH ,AL 
 0600  74 04                 1	         JE ??001C 
 0602  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0604  CD 10                 1	         INT     10H 
 0606                        1	         ??001C: 
 0606  41                    1	         INC     CX         ; NEXT X POSITION 
 0607  4F                    1	         DEC     DI 
 0608  75 F3                 1	         JNZ     ??001A 
 060A  42                    1	      INC     DX         ; NEXT Y POSITION 
 060B  4D                    1	      DEC     BP 
 060C  75 E7                 1	      JNZ     ??001B 
 060E  5B                    1	      POP BX 
 060F  59                    1	      POP CX 
				   ;}
				   ;{GET DATA SOTRED
 0610  5A			      POP    DX
 0611  59			      POP    CX
 0612  5B			      POP    BX
 0613  58			      POP    AX
				   ;}
 0614  C3			RETN
				;}
 0615				DRAW_TANK2	ENDP
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-46


				---------------------------------
				;   _____  _    _   ____    _____  _______ 
				;  / ____|| |  | | / __ \  / ____||__   __|
				; | |  __ | |__| || |  | || (___     | |   
				; | | |_ ||  __  || |  | | \___ \    | |   
				; | |__| || |  | || |__| | ____) |   | |   
				;  \_____||_|  |_| \____/ |_____/    |_|   
				;----------------------------------------------
				---------------------------------
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE FIRST GHOST
				;----------------------------------------------
				---------------------------
 0615				RANDOMIZE_GHOST1 PROC NEAR
				;{
				   ;{
 0615  50			      PUSH   AX
 0616  53			      PUSH   BX
 0617  51			      PUSH   CX
 0618  52			      PUSH   DX
				   ;}
 0619  C7 06 0057 R 0001	   MOV    EXISTS_GHOST1, 1
				   RANDOMIZE 0, 3, MOTION_GHOST1, RANDSEED
 061F  50                    1	   PUSH     AX 
 0620  53                    1	   PUSH     BX 
 0621  51                    1	   PUSH     CX 
 0622  52                    1	   PUSH     DX 
 0623  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0626  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 062A  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 062D  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0631  75 08                 1	   JNE     ??001D 
 0633  B4 00                 1	   MOV     AH, 0 
 0635  CD 1A                 1	   INT     1AH 
 0637  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 063B                        1	   ??001D: 
 063B  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 063E  2B D2                 1	   SUB      DX, DX 
 0640  B9 0003               1	   MOV      CX, 3 
 0643  41                    1	   INC      CX 
 0644  83 E9 00              1	   SUB      CX, 0 
 0647  83 F9 00              1	   CMP CX, 0 
 064A  74 02                 1	   JE ??001E 
 064C  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 064E                        1	   ??001E: 
 064E  83 C2 00              1	   ADD      DX, 0 
 0651  89 16 0059 R          1	   MOV      MOTION_GHOST1, DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-47


 0655  5A                    1	   POP      DX 
 0656  59                    1	   POP      CX 
 0657  5B                    1	   POP      BX 
 0658  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST1, RANDSEED
 0659  50                    1	   PUSH     AX 
 065A  53                    1	   PUSH     BX 
 065B  51                    1	   PUSH     CX 
 065C  52                    1	   PUSH     DX 
 065D  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0660  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0664  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0667  39 06 0089 R          1	   CMP     RANDSEED, AX 
 066B  75 08                 1	   JNE     ??001F 
 066D  B4 00                 1	   MOV     AH, 0 
 066F  CD 1A                 1	   INT     1AH 
 0671  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0675                        1	   ??001F: 
 0675  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0678  2B D2                 1	   SUB      DX, DX 
 067A  B9 0002               1	   MOV      CX, 2 
 067D  41                    1	   INC      CX 
 067E  83 E9 00              1	   SUB      CX, 0 
 0681  83 F9 00              1	   CMP CX, 0 
 0684  74 02                 1	   JE ??0020 
 0686  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0688                        1	   ??0020: 
 0688  83 C2 00              1	   ADD      DX, 0 
 068B  89 16 005B R          1	   MOV      POWERUP_GHOST1, DX 
 068F  5A                    1	   POP      DX 
 0690  59                    1	   POP      CX 
 0691  5B                    1	   POP      BX 
 0692  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST1, RANDSEED 
 0693  50                    1	   PUSH     AX 
 0694  53                    1	   PUSH     BX 
 0695  51                    1	   PUSH     CX 
 0696  52                    1	   PUSH     DX 
 0697  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 069A  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 069E  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 06A1  39 06 0089 R          1	   CMP     RANDSEED, AX 
 06A5  75 08                 1	   JNE     ??0021 
 06A7  B4 00                 1	   MOV     AH, 0 
 06A9  CD 1A                 1	   INT     1AH 
 06AB  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-48


				EM TIME 
 06AF                        1	   ??0021: 
 06AF  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 06B2  2B D2                 1	   SUB      DX, DX 
 06B4  B9 0002               1	   MOV      CX, 2 
 06B7  41                    1	   INC      CX 
 06B8  83 E9 00              1	   SUB      CX, 0 
 06BB  83 F9 00              1	   CMP CX, 0 
 06BE  74 02                 1	   JE ??0022 
 06C0  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 06C2                        1	   ??0022: 
 06C2  83 C2 00              1	   ADD      DX, 0 
 06C5  89 16 0061 R          1	   MOV      TYPE_GHOST1, DX 
 06C9  5A                    1	   POP      DX 
 06CA  59                    1	   POP      CX 
 06CB  5B                    1	   POP      BX 
 06CC  58                    1	   POP      AX 
				
				   ;{  TO START APPROX IN THE MIDDLE
 06CD  A1 0002 R		   MOV AX, LOWERBOUND_Y
 06D0  03 06 0000 R		   ADD AX, UPPERBOUND_Y
 06D4  D1 E8			   SHR AX, 1
 06D6  8B D8			   MOV BX, AX
 06D8  2D 0014			   SUB AX, 20
 06DB  83 C3 14			   ADD BX, 20
 06DE  A3 008C R		   MOV LOWER4MACRO, AX      
 06E1  89 1E 008E R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST1, RANDSEED
 06E5  50                    1	   PUSH     AX 
 06E6  53                    1	   PUSH     BX 
 06E7  51                    1	   PUSH     CX 
 06E8  52                    1	   PUSH     DX 
 06E9  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 06EC  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 06F0  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 06F3  39 06 0089 R          1	   CMP     RANDSEED, AX 
 06F7  75 08                 1	   JNE     ??0023 
 06F9  B4 00                 1	   MOV     AH, 0 
 06FB  CD 1A                 1	   INT     1AH 
 06FD  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0701                        1	   ??0023: 
 0701  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0704  2B D2                 1	   SUB      DX, DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-49


 0706  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 070A  41                    1	   INC      CX 
 070B  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 070F  83 F9 00              1	   CMP CX, 0 
 0712  74 02                 1	   JE ??0024 
 0714  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0716                        1	   ??0024: 
 0716  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 071A  89 16 0055 R          1	   MOV      STARTPOS_Y_GHOST1, DX 
 071E  5A                    1	   POP      DX 
 071F  59                    1	   POP      CX 
 0720  5B                    1	   POP      BX 
 0721  58                    1	   POP      AX 
				
				
				    ;{  TO START APPROX IN THE MIDDLE
 0722  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0725  03 06 0004 R		   ADD AX, LEFTBOUND_X
 0729  D1 E8			   SHR AX, 1
 072B  8B D8			   MOV BX, AX
 072D  2D 0014			   SUB AX, 20
 0730  83 C3 14			   ADD BX, 20
 0733  A3 008C R		   MOV LOWER4MACRO, AX      
 0736  89 1E 008E R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST1, RANDSEED
 073A  50                    1	   PUSH     AX 
 073B  53                    1	   PUSH     BX 
 073C  51                    1	   PUSH     CX 
 073D  52                    1	   PUSH     DX 
 073E  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0741  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0745  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0748  39 06 0089 R          1	   CMP     RANDSEED, AX 
 074C  75 08                 1	   JNE     ??0025 
 074E  B4 00                 1	   MOV     AH, 0 
 0750  CD 1A                 1	   INT     1AH 
 0752  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0756                        1	   ??0025: 
 0756  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0759  2B D2                 1	   SUB      DX, DX 
 075B  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 075F  41                    1	   INC      CX 
 0760  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0764  83 F9 00              1	   CMP CX, 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-50


 0767  74 02                 1	   JE ??0026 
 0769  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 076B                        1	   ??0026: 
 076B  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 076F  89 16 0053 R          1	   MOV      STARTPOS_X_GHOST1, DX 
 0773  5A                    1	   POP      DX 
 0774  59                    1	   POP      CX 
 0775  5B                    1	   POP      BX 
 0776  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 0777  A1 0053 R		   MOV AX, STARTPOS_X_GHOST1
 077A  2D 000A			   SUB AX, 10
 077D  A3 005D R		   MOV STARTPOS_X_PORTAL1, AX
 0780  A1 0055 R		   MOV AX, STARTPOS_Y_GHOST1
 0783  2D 000A			   SUB AX, 10
 0786  A3 005F R		   MOV STARTPOS_Y_PORTAL1, AX 
				   ;}
				
 0789  5A			   POP DX
 078A  59			   POP CX
 078B  5B			   POP BX
 078C  58			   POP AX 
 078D  C3			   RETN
				;} 
 078E				RANDOMIZE_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
 078E				RANDOMIZE_GHOST2 PROC NEAR
				;{
 078E  50			   PUSH AX
 078F  53			   PUSH BX
 0790  51			   PUSH CX
 0791  52			   PUSH DX
				
 0792  C7 06 0067 R 0001	   MOV EXISTS_GHOST2, 1
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 1 (DOWN
				LEFT) OR 3 (UPLEFT)
				   RANDOMIZE 0, 3 , MOTION_GHOST2, RANDSEED
 0798  50                    1	   PUSH     AX 
 0799  53                    1	   PUSH     BX 
 079A  51                    1	   PUSH     CX 
 079B  52                    1	   PUSH     DX 
 079C  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 079F  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-51


 07A3  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 07A6  39 06 0089 R          1	   CMP     RANDSEED, AX 
 07AA  75 08                 1	   JNE     ??0027 
 07AC  B4 00                 1	   MOV     AH, 0 
 07AE  CD 1A                 1	   INT     1AH 
 07B0  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 07B4                        1	   ??0027: 
 07B4  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 07B7  2B D2                 1	   SUB      DX, DX 
 07B9  B9 0003               1	   MOV      CX, 3 
 07BC  41                    1	   INC      CX 
 07BD  83 E9 00              1	   SUB      CX, 0 
 07C0  83 F9 00              1	   CMP CX, 0 
 07C3  74 02                 1	   JE ??0028 
 07C5  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 07C7                        1	   ??0028: 
 07C7  83 C2 00              1	   ADD      DX, 0 
 07CA  89 16 0069 R          1	   MOV      MOTION_GHOST2, DX 
 07CE  5A                    1	   POP      DX 
 07CF  59                    1	   POP      CX 
 07D0  5B                    1	   POP      BX 
 07D1  58                    1	   POP      AX 
 07D2  83 3E 0069 R 02		   CMP MOTION_GHOST2, 2
 07D7  72 09			   JB MOV_DOWNLEFT2
 07D9  C7 06 0069 R 0003	   MOV MOTION_GHOST2, 3    ;MOV UPLEFT
 07DF  EB 07 90			   JMP MOV_UPLEFT2
 07E2				   MOV_DOWNLEFT2:
 07E2  C7 06 0069 R 0001	   MOV MOTION_GHOST2, 1    ;MOVE BY INC Y AND D
				EC X
 07E8				   MOV_UPLEFT2:
				   ;}
				   
				   RANDOMIZE 0, 2, POWERUP_GHOST2, RANDSEED
 07E8  50                    1	   PUSH     AX 
 07E9  53                    1	   PUSH     BX 
 07EA  51                    1	   PUSH     CX 
 07EB  52                    1	   PUSH     DX 
 07EC  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 07EF  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 07F3  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 07F6  39 06 0089 R          1	   CMP     RANDSEED, AX 
 07FA  75 08                 1	   JNE     ??0029 
 07FC  B4 00                 1	   MOV     AH, 0 
 07FE  CD 1A                 1	   INT     1AH 
 0800  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0804                        1	   ??0029: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-52


 0804  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0807  2B D2                 1	   SUB      DX, DX 
 0809  B9 0002               1	   MOV      CX, 2 
 080C  41                    1	   INC      CX 
 080D  83 E9 00              1	   SUB      CX, 0 
 0810  83 F9 00              1	   CMP CX, 0 
 0813  74 02                 1	   JE ??002A 
 0815  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0817                        1	   ??002A: 
 0817  83 C2 00              1	   ADD      DX, 0 
 081A  89 16 006B R          1	   MOV      POWERUP_GHOST2, DX 
 081E  5A                    1	   POP      DX 
 081F  59                    1	   POP      CX 
 0820  5B                    1	   POP      BX 
 0821  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST2, RANDSEED
 0822  50                    1	   PUSH     AX 
 0823  53                    1	   PUSH     BX 
 0824  51                    1	   PUSH     CX 
 0825  52                    1	   PUSH     DX 
 0826  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0829  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 082D  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0830  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0834  75 08                 1	   JNE     ??002B 
 0836  B4 00                 1	   MOV     AH, 0 
 0838  CD 1A                 1	   INT     1AH 
 083A  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 083E                        1	   ??002B: 
 083E  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0841  2B D2                 1	   SUB      DX, DX 
 0843  B9 0002               1	   MOV      CX, 2 
 0846  41                    1	   INC      CX 
 0847  83 E9 00              1	   SUB      CX, 0 
 084A  83 F9 00              1	   CMP CX, 0 
 084D  74 02                 1	   JE ??002C 
 084F  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0851                        1	   ??002C: 
 0851  83 C2 00              1	   ADD      DX, 0 
 0854  89 16 0071 R          1	   MOV      TYPE_GHOST2, DX 
 0858  5A                    1	   POP      DX 
 0859  59                    1	   POP      CX 
 085A  5B                    1	   POP      BX 
 085B  58                    1	   POP      AX 
				   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-53


				
 085C  A1 0002 R		   MOV AX, LOWERBOUND_Y
 085F  2D 0032			   SUB AX, 50
 0862  A3 008E R		   MOV UPPER4MACRO, AX
 0865  A1 0000 R		   MOV AX, UPPERBOUND_Y
 0868  A3 008C R		   MOV LOWER4MACRO, AX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST2, RANDSEED
 086B  50                    1	   PUSH     AX 
 086C  53                    1	   PUSH     BX 
 086D  51                    1	   PUSH     CX 
 086E  52                    1	   PUSH     DX 
 086F  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0872  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0876  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0879  39 06 0089 R          1	   CMP     RANDSEED, AX 
 087D  75 08                 1	   JNE     ??002D 
 087F  B4 00                 1	   MOV     AH, 0 
 0881  CD 1A                 1	   INT     1AH 
 0883  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0887                        1	   ??002D: 
 0887  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 088A  2B D2                 1	   SUB      DX, DX 
 088C  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0890  41                    1	   INC      CX 
 0891  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0895  83 F9 00              1	   CMP CX, 0 
 0898  74 02                 1	   JE ??002E 
 089A  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 089C                        1	   ??002E: 
 089C  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 08A0  89 16 0065 R          1	   MOV      STARTPOS_Y_GHOST2, DX 
 08A4  5A                    1	   POP      DX 
 08A5  59                    1	   POP      CX 
 08A6  5B                    1	   POP      BX 
 08A7  58                    1	   POP      AX 
				
				
				
 08A8  A1 0006 R		   MOV AX, RIGHTBOUND_X
 08AB  D1 E8			   SHR AX, 1
 08AD  2D 0064			   SUB AX, 100
 08B0  A3 008E R		   MOV UPPER4MACRO, AX
 08B3  8B 1E 0004 R		   MOV BX, LEFTBOUND_X 
 08B7  83 C3 6E			   ADD BX, 110
 08BA  89 1E 008C R		   MOV LOWER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST2, RANDSEED
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-54


 08BE  50                    1	   PUSH     AX 
 08BF  53                    1	   PUSH     BX 
 08C0  51                    1	   PUSH     CX 
 08C1  52                    1	   PUSH     DX 
 08C2  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 08C5  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 08C9  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 08CC  39 06 0089 R          1	   CMP     RANDSEED, AX 
 08D0  75 08                 1	   JNE     ??002F 
 08D2  B4 00                 1	   MOV     AH, 0 
 08D4  CD 1A                 1	   INT     1AH 
 08D6  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 08DA                        1	   ??002F: 
 08DA  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 08DD  2B D2                 1	   SUB      DX, DX 
 08DF  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 08E3  41                    1	   INC      CX 
 08E4  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 08E8  83 F9 00              1	   CMP CX, 0 
 08EB  74 02                 1	   JE ??0030 
 08ED  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 08EF                        1	   ??0030: 
 08EF  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 08F3  89 16 0063 R          1	   MOV      STARTPOS_X_GHOST2, DX 
 08F7  5A                    1	   POP      DX 
 08F8  59                    1	   POP      CX 
 08F9  5B                    1	   POP      BX 
 08FA  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 08FB  A1 0063 R		   MOV AX, STARTPOS_X_GHOST2
 08FE  2D 000A			   SUB AX, 10
 0901  A3 006D R		   MOV STARTPOS_X_PORTAL2, AX
 0904  A1 0065 R		   MOV AX, STARTPOS_Y_GHOST2
 0907  2D 000A			   SUB AX, 10
 090A  A3 006F R		   MOV STARTPOS_Y_PORTAL2, AX 
				   ;}
				   
 090D  5A			   POP DX
 090E  59			   POP CX
 090F  5B			   POP BX
 0910  58			   POP AX 
 0911  C3			   RETN
				;} 
 0912				RANDOMIZE_GHOST2 ENDP
				
				;----------------------------------------------
				----------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-55


				; MAKES RANDOM PLACE FOR THE THIRD GHOST
				;----------------------------------------------
				---------------------------
				
 0912				RANDOMIZE_GHOST3 PROC NEAR
				;{
 0912  50			   PUSH AX
 0913  53			   PUSH BX
 0914  51			   PUSH CX
 0915  52			   PUSH DX
				
 0916  C7 06 0077 R 0001	   MOV EXISTS_GHOST3, 1    ;MOVE BY INC X AND D
				EC Y
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 0 (DOWN
				RIGHT) OR 2 (UPRIGHT)
				   RANDOMIZE 0, 3 , MOTION_GHOST3, RANDSEED
 091C  50                    1	   PUSH     AX 
 091D  53                    1	   PUSH     BX 
 091E  51                    1	   PUSH     CX 
 091F  52                    1	   PUSH     DX 
 0920  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0923  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0927  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 092A  39 06 0089 R          1	   CMP     RANDSEED, AX 
 092E  75 08                 1	   JNE     ??0031 
 0930  B4 00                 1	   MOV     AH, 0 
 0932  CD 1A                 1	   INT     1AH 
 0934  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0938                        1	   ??0031: 
 0938  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 093B  2B D2                 1	   SUB      DX, DX 
 093D  B9 0003               1	   MOV      CX, 3 
 0940  41                    1	   INC      CX 
 0941  83 E9 00              1	   SUB      CX, 0 
 0944  83 F9 00              1	   CMP CX, 0 
 0947  74 02                 1	   JE ??0032 
 0949  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 094B                        1	   ??0032: 
 094B  83 C2 00              1	   ADD      DX, 0 
 094E  89 16 0079 R          1	   MOV      MOTION_GHOST3, DX 
 0952  5A                    1	   POP      DX 
 0953  59                    1	   POP      CX 
 0954  5B                    1	   POP      BX 
 0955  58                    1	   POP      AX 
 0956  83 3E 0079 R 02		   CMP MOTION_GHOST3, 2
 095B  72 09			   JB MOV_DOWNRIGHT3
 095D  C7 06 0079 R 0002	   MOV MOTION_GHOST3, 2    ;MOV UPRIGHT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-56


 0963  EB 07 90			   JMP MOV_UPRIGHT3
 0966				   MOV_DOWNRIGHT3:
 0966  C7 06 0079 R 0000	   MOV MOTION_GHOST3, 0    ;MOVE DOWNRIGHT
 096C				   MOV_UPRIGHT3:
				   ;}
				
				
				   RANDOMIZE 0, 2, TYPE_GHOST3, RANDSEED
 096C  50                    1	   PUSH     AX 
 096D  53                    1	   PUSH     BX 
 096E  51                    1	   PUSH     CX 
 096F  52                    1	   PUSH     DX 
 0970  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0973  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0977  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 097A  39 06 0089 R          1	   CMP     RANDSEED, AX 
 097E  75 08                 1	   JNE     ??0033 
 0980  B4 00                 1	   MOV     AH, 0 
 0982  CD 1A                 1	   INT     1AH 
 0984  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0988                        1	   ??0033: 
 0988  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 098B  2B D2                 1	   SUB      DX, DX 
 098D  B9 0002               1	   MOV      CX, 2 
 0990  41                    1	   INC      CX 
 0991  83 E9 00              1	   SUB      CX, 0 
 0994  83 F9 00              1	   CMP CX, 0 
 0997  74 02                 1	   JE ??0034 
 0999  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 099B                        1	   ??0034: 
 099B  83 C2 00              1	   ADD      DX, 0 
 099E  89 16 0081 R          1	   MOV      TYPE_GHOST3, DX 
 09A2  5A                    1	   POP      DX 
 09A3  59                    1	   POP      CX 
 09A4  5B                    1	   POP      BX 
 09A5  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST3, RANDSEED
 09A6  50                    1	   PUSH     AX 
 09A7  53                    1	   PUSH     BX 
 09A8  51                    1	   PUSH     CX 
 09A9  52                    1	   PUSH     DX 
 09AA  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09AD  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09B1  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09B4  39 06 0089 R          1	   CMP     RANDSEED, AX 
 09B8  75 08                 1	   JNE     ??0035 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-57


 09BA  B4 00                 1	   MOV     AH, 0 
 09BC  CD 1A                 1	   INT     1AH 
 09BE  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 09C2                        1	   ??0035: 
 09C2  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 09C5  2B D2                 1	   SUB      DX, DX 
 09C7  B9 0002               1	   MOV      CX, 2 
 09CA  41                    1	   INC      CX 
 09CB  83 E9 00              1	   SUB      CX, 0 
 09CE  83 F9 00              1	   CMP CX, 0 
 09D1  74 02                 1	   JE ??0036 
 09D3  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 09D5                        1	   ??0036: 
 09D5  83 C2 00              1	   ADD      DX, 0 
 09D8  89 16 007B R          1	   MOV      POWERUP_GHOST3, DX 
 09DC  5A                    1	   POP      DX 
 09DD  59                    1	   POP      CX 
 09DE  5B                    1	   POP      BX 
 09DF  58                    1	   POP      AX 
				
				   
 09E0  A1 0002 R		   MOV AX, LOWERBOUND_Y
 09E3  2D 0032			   SUB AX, 50
 09E6  A3 008E R		   MOV UPPER4MACRO, AX
 09E9  A1 0000 R		   MOV AX, UPPERBOUND_Y
 09EC  A3 008C R		   MOV LOWER4MACRO, AX
				   RANDOMIZE  LOWER4MACRO, UPPER4MACRO, STARTPO
				S_Y_GHOST3, RANDSEED
 09EF  50                    1	   PUSH     AX 
 09F0  53                    1	   PUSH     BX 
 09F1  51                    1	   PUSH     CX 
 09F2  52                    1	   PUSH     DX 
 09F3  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09F6  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09FA  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09FD  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0A01  75 08                 1	   JNE     ??0037 
 0A03  B4 00                 1	   MOV     AH, 0 
 0A05  CD 1A                 1	   INT     1AH 
 0A07  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A0B                        1	   ??0037: 
 0A0B  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A0E  2B D2                 1	   SUB      DX, DX 
 0A10  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0A14  41                    1	   INC      CX 
 0A15  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-58


 0A19  83 F9 00              1	   CMP CX, 0 
 0A1C  74 02                 1	   JE ??0038 
 0A1E  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0A20                        1	   ??0038: 
 0A20  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 0A24  89 16 0075 R          1	   MOV      STARTPOS_Y_GHOST3, DX 
 0A28  5A                    1	   POP      DX 
 0A29  59                    1	   POP      CX 
 0A2A  5B                    1	   POP      BX 
 0A2B  58                    1	   POP      AX 
				
				
				
 0A2C  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0A2F  D1 E8			   SHR AX, 1
 0A31  2D 0032			   SUB AX, 50
 0A34  A3 008C R		   MOV LOWER4MACRO, AX
 0A37  8B 1E 0006 R		   MOV BX, RIGHTBOUND_X 
 0A3B  83 EB 50			   SUB BX, 80
 0A3E  89 1E 008E R		   MOV UPPER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST3, RANDSEED
 0A42  50                    1	   PUSH     AX 
 0A43  53                    1	   PUSH     BX 
 0A44  51                    1	   PUSH     CX 
 0A45  52                    1	   PUSH     DX 
 0A46  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0A49  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0A4D  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0A50  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0A54  75 08                 1	   JNE     ??0039 
 0A56  B4 00                 1	   MOV     AH, 0 
 0A58  CD 1A                 1	   INT     1AH 
 0A5A  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A5E                        1	   ??0039: 
 0A5E  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A61  2B D2                 1	   SUB      DX, DX 
 0A63  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0A67  41                    1	   INC      CX 
 0A68  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0A6C  83 F9 00              1	   CMP CX, 0 
 0A6F  74 02                 1	   JE ??003A 
 0A71  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0A73                        1	   ??003A: 
 0A73  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 0A77  89 16 0073 R          1	   MOV      STARTPOS_X_GHOST3, DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-59


 0A7B  5A                    1	   POP      DX 
 0A7C  59                    1	   POP      CX 
 0A7D  5B                    1	   POP      BX 
 0A7E  58                    1	   POP      AX 
				   
				   ;{GHOST PORTAL LOCATION
 0A7F  A1 0073 R		   MOV AX, STARTPOS_X_GHOST3
 0A82  2D 000A			   SUB AX, 10
 0A85  A3 007D R		   MOV STARTPOS_X_PORTAL3, AX
 0A88  A1 0075 R		   MOV AX, STARTPOS_Y_GHOST3
 0A8B  2D 000A			   SUB AX, 10
 0A8E  A3 007F R		   MOV STARTPOS_Y_PORTAL3, AX 
				   ;}
				
 0A91  5A			   POP DX
 0A92  59			   POP CX
 0A93  5B			   POP BX
 0A94  58			   POP AX 
 0A95  C3			   RETN
				;} 
 0A96				RANDOMIZE_GHOST3 ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAW THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0A96				DRAW_GHOST1 PROC NEAR
				;{
 0A96  50			   PUSH AX
 0A97  53			   PUSH BX
 0A98  51			   PUSH CX
 0A99  52			   PUSH DX
				
 0A9A  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0A9F  75 6F			   JNE ENDDRAW_GHOST11
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST1, STARTPO
				S_Y_GHOST1, GHOSTSIZE , EXISTS_GHOST1 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0AA1  50                    1	   PUSH AX 
 0AA2  53                    1	   PUSH BX 
 0AA3  51                    1	   PUSH CX 
 0AA4  52                    1	   PUSH DX 
 0AA5  C7 06 0057 R 0001     1	   MOV EXISTS_GHOST1, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0AAB                        1	   ??003B: 
 0AAB  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
 0AAF  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0AB3  2B CB                 1	      SUB CX, BX 
 0AB5  83 F9 00              1	      CMP CX, 0 
 0AB8  7D 06                 1	      JGE ??003C 
 0ABA  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AC0                        1	   ??003C: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-60


 0AC0  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
 0AC4  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0AC8  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0ACC  2B D9                 1	      SUB BX, CX 
 0ACE  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0AD1  7D 06                 1	      JGE ??003E 
 0AD3  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AD9                        1	   ??003E: 
 0AD9  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0ADD  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0AE1  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0AE5  2B D9                 1	      SUB BX, CX 
 0AE7  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0AEA  7D 06                 1	      JGE ??003D 
 0AEC  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AF2                        1	   ??003D: 
 0AF2  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0AF6  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0AFA  2B CB                 1	      SUB CX, BX 
 0AFC  83 F9 00              1	      CMP CX, 0 
 0AFF  7D 06                 1	      JGE ??003F 
 0B01  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0B07                        1	   ??003F: 
 0B07  5A                    1	   POP DX 
 0B08  59                    1	   POP CX 
 0B09  5B                    1	   POP BX 
 0B0A  58                    1	   POP AX 
 0B0B  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B10				   ENDDRAW_GHOST11:     ; JUST A MIDDLE LABEL F
				OR JUMP
 0B10  75 40			   JNE ENDDRAW_GHOST1
				
				  
				
				   ;{FIRST TYPE 
 0B12  83 3E 0061 R 00		   CMP TYPE_GHOST1, 0
 0B17  BE 0000 E		   MOV SI, OFFSET GHOST1_0
 0B1A  74 0D			   JE DRAW1
				   ;}
				
				   ;{SECOND TYPE 
 0B1C  83 3E 0061 R 01		   CMP TYPE_GHOST1, 1
 0B21  BE 0000 E		   MOV SI, OFFSET GHOST1_1
 0B24  74 03			   JE DRAW1
				   ;}
				
				   ;{THIRD TYPE
 0B26  BE 0000 E		   MOV SI, OFFSET GHOST1_2
				   ;}
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-61


 0B29				   DRAW1:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1
 0B29  51                    1	   PUSH CX 
 0B2A  53                    1	   PUSH BX 
 0B2B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0B2D  8B 16 0055 R          1	   MOV     DX, STARTPOS_Y_GHOST1     ; Y TO STA
				RT DRAWING AT 
 0B31  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0B35  8A 3C                 1	   MOV BH, [SI] 
 0B37                        1	   ??0041:;{ FOR(BP = 50; BD > 0; BP--) 
 0B37  8B 0E 0053 R          1	      MOV     CX, STARTPOS_X_GHOST1    ; X TO S
				TART 
 0B3B  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0B3F                        1	      ??0040:;{ FOR(DX = 50; DX > 0; DX--) 
 0B3F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0B40  3A F8                 1	         CMP BH ,AL 
 0B42  74 04                 1	         JE ??0042 
 0B44  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0B46  CD 10                 1	         INT     10H 
 0B48                        1	         ??0042: 
 0B48  41                    1	         INC     CX         ; NEXT X POSITION 
 0B49  4F                    1	         DEC     DI 
 0B4A  75 F3                 1	         JNZ     ??0040 
 0B4C  42                    1	      INC     DX         ; NEXT Y POSITION 
 0B4D  4D                    1	      DEC     BP 
 0B4E  75 E7                 1	      JNZ     ??0041 
 0B50  5B                    1	      POP BX 
 0B51  59                    1	      POP CX 
				   
				  
				
 0B52				   ENDDRAW_GHOST1:
 0B52  5A			   POP DX
 0B53  59			   POP CX
 0B54  5B			   POP BX
 0B55  58			   POP AX 
 0B56  C3			   RETN
				;} 
 0B57				DRAW_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MOVES THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0B57				MOVE_GHOST1 PROC NEAR
				;{
 0B57  50			   PUSH AX
 0B58  53			   PUSH BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-62


 0B59  51			   PUSH CX
 0B5A  52			   PUSH DX
				
 0B5B  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B60  75 4E			   JNE ENDMOVE_GHOST1
 0B62				   DOWNRIGHT_GHOST1:
				   ;{ DOWNRIGHT MOVEMENT
 0B62  83 3E 0059 R 00		      CMP MOTION_GHOST1, 0
 0B67  75 0D			      JNE DOWNLEFT_GHOST1
 0B69  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B6E  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B73  EB 3B 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B76				   DOWNLEFT_GHOST1:
				   ;{ DOWNLEFT MOVEMENT
 0B76  83 3E 0059 R 01		      CMP MOTION_GHOST1, 1
 0B7B  75 0D			      JNE UPRIGHT_GHOST1
 0B7D  83 2E 0053 R 03		      SUB STARTPOS_X_GHOST1, 3
 0B82  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B87  EB 27 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B8A				   UPRIGHT_GHOST1:
				   ;{ UPRIGHT MOVEMENT
 0B8A  83 3E 0059 R 02		      CMP MOTION_GHOST1, 2
 0B8F  75 0D			      JNE UPLEFT_GHOST1
 0B91  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B96  83 2E 0055 R 03		      SUB STARTPOS_Y_GHOST1, 3
 0B9B  EB 13 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B9E				   UPLEFT_GHOST1:
				   ;{ UPLEFT MOVEMENT 
 0B9E  83 3E 0059 R 03		      CMP MOTION_GHOST1, 3
				      ;JNE ENDMOVE_GHOST1
 0BA3  83 2E 0053 R 03		      SUB STARTPOS_X_GHOST1, 3
 0BA8  83 2E 0055 R 03		      SUB STARTPOS_Y_GHOST1, 3
 0BAD  EB 01 90			      JMP ENDMOVE_GHOST1
				   ;}
				   
 0BB0				   ENDMOVE_GHOST1:
 0BB0  5A			   POP DX
 0BB1  59			   POP CX
 0BB2  5B			   POP BX
 0BB3  58			   POP AX 
 0BB4  C3			   RETN
				;} 
 0BB5				MOVE_GHOST1 ENDP
				
				
				;----------------------------------------------
				----------------------------
				;  DRAWS THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-63


 0BB5				DRAW_GHOST2 PROC NEAR
				;{
 0BB5  50			   PUSH AX
 0BB6  53			   PUSH BX
 0BB7  51			   PUSH CX
 0BB8  52			   PUSH DX
				
 0BB9  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0BBE  75 6F			   JNE ENDDRAW_GHOST21
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST2, STARTPO
				S_Y_GHOST2, GHOSTSIZE , EXISTS_GHOST2 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0BC0  50                    1	   PUSH AX 
 0BC1  53                    1	   PUSH BX 
 0BC2  51                    1	   PUSH CX 
 0BC3  52                    1	   PUSH DX 
 0BC4  C7 06 0067 R 0001     1	   MOV EXISTS_GHOST2, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0BCA                        1	   ??0043: 
 0BCA  8B 0E 0065 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BCE  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0BD2  2B CB                 1	      SUB CX, BX 
 0BD4  83 F9 00              1	      CMP CX, 0 
 0BD7  7D 06                 1	      JGE ??0044 
 0BD9  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BDF                        1	   ??0044: 
 0BDF  8B 0E 0065 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BE3  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0BE7  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0BEB  2B D9                 1	      SUB BX, CX 
 0BED  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0BF0  7D 06                 1	      JGE ??0046 
 0BF2  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BF8                        1	   ??0046: 
 0BF8  8B 0E 0063 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0BFC  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0C00  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0C04  2B D9                 1	      SUB BX, CX 
 0C06  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0C09  7D 06                 1	      JGE ??0045 
 0C0B  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C11                        1	   ??0045: 
 0C11  8B 0E 0063 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0C15  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0C19  2B CB                 1	      SUB CX, BX 
 0C1B  83 F9 00              1	      CMP CX, 0 
 0C1E  7D 06                 1	      JGE ??0047 
 0C20  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C26                        1	   ??0047: 
 0C26  5A                    1	   POP DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-64


 0C27  59                    1	   POP CX 
 0C28  5B                    1	   POP BX 
 0C29  58                    1	   POP AX 
 0C2A  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0C2F				   ENDDRAW_GHOST21:    ;JUST A MIDDLE LABEL FOR
				 JUMP
 0C2F  75 40			   JNE ENDDRAW_GHOST2
				
				
				   
				
				
				   ;{FIRST TYPE 
 0C31  83 3E 0071 R 00		   CMP TYPE_GHOST2, 0
 0C36  BE 0000 E		   MOV SI, OFFSET GHOST2_0
 0C39  74 0D			   JE DRAW2
				   ;}
				
				   ;{SECOND TYPE 
 0C3B  83 3E 0071 R 01		   CMP TYPE_GHOST2, 1
 0C40  BE 0000 E		   MOV SI, OFFSET GHOST2_1
 0C43  74 03			   JE DRAW2
				   ;}
				
				   ;{THIRD TYPE
 0C45  BE 0000 E		   MOV SI, OFFSET GHOST2_2
				   ;}
				
 0C48				   DRAW2:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2
 0C48  51                    1	   PUSH CX 
 0C49  53                    1	   PUSH BX 
 0C4A  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0C4C  8B 16 0065 R          1	   MOV     DX, STARTPOS_Y_GHOST2     ; Y TO STA
				RT DRAWING AT 
 0C50  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0C54  8A 3C                 1	   MOV BH, [SI] 
 0C56                        1	   ??0049:;{ FOR(BP = 50; BD > 0; BP--) 
 0C56  8B 0E 0063 R          1	      MOV     CX, STARTPOS_X_GHOST2    ; X TO S
				TART 
 0C5A  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0C5E                        1	      ??0048:;{ FOR(DX = 50; DX > 0; DX--) 
 0C5E  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0C5F  3A F8                 1	         CMP BH ,AL 
 0C61  74 04                 1	         JE ??004A 
 0C63  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0C65  CD 10                 1	         INT     10H 
 0C67                        1	         ??004A: 
 0C67  41                    1	         INC     CX         ; NEXT X POSITION 
 0C68  4F                    1	         DEC     DI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-65


 0C69  75 F3                 1	         JNZ     ??0048 
 0C6B  42                    1	      INC     DX         ; NEXT Y POSITION 
 0C6C  4D                    1	      DEC     BP 
 0C6D  75 E7                 1	      JNZ     ??0049 
 0C6F  5B                    1	      POP BX 
 0C70  59                    1	      POP CX 
				   
				  
				
 0C71				   ENDDRAW_GHOST2:
 0C71  5A			   POP DX
 0C72  59			   POP CX
 0C73  5B			   POP BX
 0C74  58			   POP AX 
 0C75  C3			   RETN
				;} 
 0C76				DRAW_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE SECOND GHOST
				;----------------------------------------------
				----------------------------
 0C76				MOVE_GHOST2 PROC NEAR
				;{
 0C76  50			   PUSH AX
 0C77  53			   PUSH BX
 0C78  51			   PUSH CX
 0C79  52			   PUSH DX
				
 0C7A  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0C7F  75 50			   JNE ENDMOVE_GHOST2
 0C81				   DOWNRIGHT_GHOST2:
				   ;{ DOWNRIGHT MOVEMENT
 0C81  83 3E 0069 R 00		      CMP MOTION_GHOST2, 0
 0C86  75 0D			      JNE DOWNLEFT_GHOST2
 0C88  83 06 0063 R 03		      ADD STARTPOS_X_GHOST2, 3
 0C8D  83 06 0065 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0C92  EB 3D 90			      JMP ENDMOVE_GHOST2
				   ;}
 0C95				   DOWNLEFT_GHOST2:
				   ;{ DOWNLEFT MOVEMENT
 0C95  83 3E 0069 R 01		      CMP MOTION_GHOST2, 1
 0C9A  75 0D			      JNE UPRIGHT_GHOST2
 0C9C  83 2E 0063 R 03		      SUB STARTPOS_X_GHOST2, 3
 0CA1  83 06 0065 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0CA6  EB 29 90			      JMP ENDMOVE_GHOST2
				   ;}
 0CA9				   UPRIGHT_GHOST2:
				   ;{ UPRIGHT MOVEMENT
 0CA9  83 3E 0069 R 02		      CMP MOTION_GHOST2, 2
 0CAE  75 0D			      JNE UPLEFT_GHOST2
 0CB0  83 06 0063 R 03		      ADD STARTPOS_X_GHOST2, 3
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-66


 0CB5  83 2E 0065 R 03		      SUB STARTPOS_Y_GHOST2, 3
 0CBA  EB 15 90			      JMP ENDMOVE_GHOST2
				   ;}
 0CBD				   UPLEFT_GHOST2:
				   ;{ UPLEFT MOVEMENT
 0CBD  83 3E 0069 R 03		      CMP MOTION_GHOST2, 3
 0CC2  75 0D			      JNE ENDMOVE_GHOST2
 0CC4  83 2E 0063 R 03		      SUB STARTPOS_X_GHOST2, 3
 0CC9  83 2E 0065 R 03		      SUB STARTPOS_Y_GHOST2, 3
 0CCE  EB 01 90			      JMP ENDMOVE_GHOST2
				   ;}
				   
 0CD1				   ENDMOVE_GHOST2:
 0CD1  5A			   POP DX
 0CD2  59			   POP CX
 0CD3  5B			   POP BX
 0CD4  58			   POP AX 
 0CD5  C3			   RETN
				;} 
 0CD6				MOVE_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE THIRD GHOST
				;----------------------------------------------
				---------------------------
				
 0CD6				DRAW_GHOST3 PROC NEAR
				;{
 0CD6  50			   PUSH AX
 0CD7  53			   PUSH BX
 0CD8  51			   PUSH CX
 0CD9  52			   PUSH DX
				
 0CDA  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0CDF  75 6F			   JNE ENDDRAW_GHOST31
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST3, STARTPO
				S_Y_GHOST3, GHOSTSIZE , EXISTS_GHOST3 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0CE1  50                    1	   PUSH AX 
 0CE2  53                    1	   PUSH BX 
 0CE3  51                    1	   PUSH CX 
 0CE4  52                    1	   PUSH DX 
 0CE5  C7 06 0077 R 0001     1	   MOV EXISTS_GHOST3, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0CEB                        1	   ??004B: 
 0CEB  8B 0E 0075 R          1	      MOV CX, STARTPOS_Y_GHOST3 
 0CEF  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0CF3  2B CB                 1	      SUB CX, BX 
 0CF5  83 F9 00              1	      CMP CX, 0 
 0CF8  7D 06                 1	      JGE ??004C 
 0CFA  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D00                        1	   ??004C: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-67


 0D00  8B 0E 0075 R          1	      MOV CX, STARTPOS_Y_GHOST3 
 0D04  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0D08  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0D0C  2B D9                 1	      SUB BX, CX 
 0D0E  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D11  7D 06                 1	      JGE ??004E 
 0D13  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D19                        1	   ??004E: 
 0D19  8B 0E 0073 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D1D  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0D21  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0D25  2B D9                 1	      SUB BX, CX 
 0D27  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D2A  7D 06                 1	      JGE ??004D 
 0D2C  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D32                        1	   ??004D: 
 0D32  8B 0E 0073 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D36  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0D3A  2B CB                 1	      SUB CX, BX 
 0D3C  83 F9 00              1	      CMP CX, 0 
 0D3F  7D 06                 1	      JGE ??004F 
 0D41  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D47                        1	   ??004F: 
 0D47  5A                    1	   POP DX 
 0D48  59                    1	   POP CX 
 0D49  5B                    1	   POP BX 
 0D4A  58                    1	   POP AX 
 0D4B  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0D50				   ENDDRAW_GHOST31:       ;JUST A MIDDLE LABEL 
				FOR JUMP
 0D50  75 40			   JNE ENDDRAW_GHOST3
				   
				   
				
				   ;{FIRST TYPE 
 0D52  83 3E 0081 R 00		   CMP TYPE_GHOST3, 0
 0D57  BE 0000 E		   MOV SI, OFFSET GHOST3_0
 0D5A  74 0D			   JE DRAW3
				   ;}
				
				   ;{SECOND TYPE 
 0D5C  83 3E 0081 R 01		   CMP TYPE_GHOST3, 1
 0D61  BE 0000 E		   MOV SI, OFFSET GHOST3_1
 0D64  74 03			   JE DRAW3
				   ;}
				
				   ;{THIRD TYPE
 0D66  BE 0000 E		   MOV SI, OFFSET GHOST3_2
				   ;}
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-68


 0D69				   DRAW3:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3
 0D69  51                    1	   PUSH CX 
 0D6A  53                    1	   PUSH BX 
 0D6B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0D6D  8B 16 0075 R          1	   MOV     DX, STARTPOS_Y_GHOST3     ; Y TO STA
				RT DRAWING AT 
 0D71  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0D75  8A 3C                 1	   MOV BH, [SI] 
 0D77                        1	   ??0051:;{ FOR(BP = 50; BD > 0; BP--) 
 0D77  8B 0E 0073 R          1	      MOV     CX, STARTPOS_X_GHOST3    ; X TO S
				TART 
 0D7B  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0D7F                        1	      ??0050:;{ FOR(DX = 50; DX > 0; DX--) 
 0D7F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0D80  3A F8                 1	         CMP BH ,AL 
 0D82  74 04                 1	         JE ??0052 
 0D84  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0D86  CD 10                 1	         INT     10H 
 0D88                        1	         ??0052: 
 0D88  41                    1	         INC     CX         ; NEXT X POSITION 
 0D89  4F                    1	         DEC     DI 
 0D8A  75 F3                 1	         JNZ     ??0050 
 0D8C  42                    1	      INC     DX         ; NEXT Y POSITION 
 0D8D  4D                    1	      DEC     BP 
 0D8E  75 E7                 1	      JNZ     ??0051 
 0D90  5B                    1	      POP BX 
 0D91  59                    1	      POP CX 
				   
				  
				
 0D92				   ENDDRAW_GHOST3:
 0D92  5A			   POP DX
 0D93  59			   POP CX
 0D94  5B			   POP BX
 0D95  58			   POP AX 
 0D96  C3			   RETN
				;} 
 0D97				DRAW_GHOST3 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE THIRD GHOST
				;----------------------------------------------
				---------------------------
 0D97				MOVE_GHOST3 PROC NEAR
				;{
 0D97  50			   PUSH AX
 0D98  53			   PUSH BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-69


 0D99  51			   PUSH CX
 0D9A  52			   PUSH DX
				
 0D9B  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0DA0  75 50			   JNE ENDMOVE_GHOST3
 0DA2				   DOWNRIGHT_GHOST3:
				   ;{ DOWNRIGHT MOVEMENT
 0DA2  83 3E 0079 R 00		      CMP MOTION_GHOST3, 0
 0DA7  75 0D			      JNE DOWNLEFT_GHOST3
 0DA9  83 06 0073 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DAE  83 06 0075 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DB3  EB 3D 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DB6				   DOWNLEFT_GHOST3:
				   ;{ DOWNLEFT MOVEMENT
 0DB6  83 3E 0079 R 01		      CMP MOTION_GHOST3, 1
 0DBB  75 0D			      JNE UPRIGHT_GHOST3
 0DBD  83 2E 0073 R 03		      SUB STARTPOS_X_GHOST3, 3
 0DC2  83 06 0075 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DC7  EB 29 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DCA				   UPRIGHT_GHOST3:
				   ;{ UPRIGHT MOVEMENT
 0DCA  83 3E 0079 R 02		      CMP MOTION_GHOST3, 2
 0DCF  75 0D			      JNE UPLEFT_GHOST3
 0DD1  83 06 0073 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DD6  83 2E 0075 R 03		      SUB STARTPOS_Y_GHOST3, 3
 0DDB  EB 15 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DDE				   UPLEFT_GHOST3:
				   ;{ UPLEFT MOVEMENT
 0DDE  83 3E 0079 R 03		      CMP MOTION_GHOST3, 3
 0DE3  75 0D			      JNE ENDMOVE_GHOST3
 0DE5  83 2E 0073 R 03		      SUB STARTPOS_X_GHOST3, 3
 0DEA  83 2E 0075 R 03		      SUB STARTPOS_Y_GHOST3, 3
 0DEF  EB 01 90			      JMP ENDMOVE_GHOST3
				   ;}
				   
 0DF2				   ENDMOVE_GHOST3:
 0DF2  5A			   POP DX
 0DF3  59			   POP CX
 0DF4  5B			   POP BX
 0DF5  58			   POP AX 
 0DF6  C3			   RETN
				;} 
 0DF7				MOVE_GHOST3 ENDP
				
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; DRAWS THE PORTALS FROM WHICH GHOSTS COME FROM
				;----------------------------------------------
				-----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-70


				------
 0DF7				DRAW_PORTALS PROC NEAR 
				;{
				
				   ;{DRAW GHOST PORTAL
 0DF7  83 3E 0057 R 00		   CMP EXISTS_GHOST1, 0
 0DFC  74 2D			   JE NOGHOST1
 0DFE  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL1, STARTPOS_Y_PORTAL1 
 0E02  51                    1	   PUSH CX 
 0E03  53                    1	   PUSH BX 
 0E04  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E06  8B 16 005F R          1	   MOV     DX, STARTPOS_Y_PORTAL1     ; Y TO ST
				ART DRAWING AT 
 0E0A  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E0E  8A 3C                 1	   MOV BH, [SI] 
 0E10                        1	   ??0054:;{ FOR(BP = 50; BD > 0; BP--) 
 0E10  8B 0E 005D R          1	      MOV     CX, STARTPOS_X_PORTAL1    ; X TO 
				START 
 0E14  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E18                        1	      ??0053:;{ FOR(DX = 50; DX > 0; DX--) 
 0E18  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E19  3A F8                 1	         CMP BH ,AL 
 0E1B  74 04                 1	         JE ??0055 
 0E1D  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E1F  CD 10                 1	         INT     10H 
 0E21                        1	         ??0055: 
 0E21  41                    1	         INC     CX         ; NEXT X POSITION 
 0E22  4F                    1	         DEC     DI 
 0E23  75 F3                 1	         JNZ     ??0053 
 0E25  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E26  4D                    1	      DEC     BP 
 0E27  75 E7                 1	      JNZ     ??0054 
 0E29  5B                    1	      POP BX 
 0E2A  59                    1	      POP CX 
				   ;}
				
 0E2B				   NOGHOST1:
				   ;{DRAW GHOST PORTAL
 0E2B  83 3E 0067 R 00		   CMP EXISTS_GHOST2, 0
 0E30  74 2D			   JE NOGHOST2
 0E32  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL2, STARTPOS_Y_PORTAL2 
 0E36  51                    1	   PUSH CX 
 0E37  53                    1	   PUSH BX 
 0E38  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E3A  8B 16 006F R          1	   MOV     DX, STARTPOS_Y_PORTAL2     ; Y TO ST
				ART DRAWING AT 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-71


 0E3E  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E42  8A 3C                 1	   MOV BH, [SI] 
 0E44                        1	   ??0057:;{ FOR(BP = 50; BD > 0; BP--) 
 0E44  8B 0E 006D R          1	      MOV     CX, STARTPOS_X_PORTAL2    ; X TO 
				START 
 0E48  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E4C                        1	      ??0056:;{ FOR(DX = 50; DX > 0; DX--) 
 0E4C  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E4D  3A F8                 1	         CMP BH ,AL 
 0E4F  74 04                 1	         JE ??0058 
 0E51  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E53  CD 10                 1	         INT     10H 
 0E55                        1	         ??0058: 
 0E55  41                    1	         INC     CX         ; NEXT X POSITION 
 0E56  4F                    1	         DEC     DI 
 0E57  75 F3                 1	         JNZ     ??0056 
 0E59  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E5A  4D                    1	      DEC     BP 
 0E5B  75 E7                 1	      JNZ     ??0057 
 0E5D  5B                    1	      POP BX 
 0E5E  59                    1	      POP CX 
				   ;}
 0E5F				   NOGHOST2:
				   ;{DRAW GHOST PORTAL
 0E5F  83 3E 0077 R 00		   CMP EXISTS_GHOST3, 0
 0E64  74 2D			   JE NOGHOST3
 0E66  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL3, STARTPOS_Y_PORTAL3 
 0E6A  51                    1	   PUSH CX 
 0E6B  53                    1	   PUSH BX 
 0E6C  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E6E  8B 16 007F R          1	   MOV     DX, STARTPOS_Y_PORTAL3     ; Y TO ST
				ART DRAWING AT 
 0E72  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E76  8A 3C                 1	   MOV BH, [SI] 
 0E78                        1	   ??005A:;{ FOR(BP = 50; BD > 0; BP--) 
 0E78  8B 0E 007D R          1	      MOV     CX, STARTPOS_X_PORTAL3    ; X TO 
				START 
 0E7C  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E80                        1	      ??0059:;{ FOR(DX = 50; DX > 0; DX--) 
 0E80  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E81  3A F8                 1	         CMP BH ,AL 
 0E83  74 04                 1	         JE ??005B 
 0E85  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E87  CD 10                 1	         INT     10H 
 0E89                        1	         ??005B: 
 0E89  41                    1	         INC     CX         ; NEXT X POSITION 
 0E8A  4F                    1	         DEC     DI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-72


 0E8B  75 F3                 1	         JNZ     ??0059 
 0E8D  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E8E  4D                    1	      DEC     BP 
 0E8F  75 E7                 1	      JNZ     ??005A 
 0E91  5B                    1	      POP BX 
 0E92  59                    1	      POP CX 
				   ;}
 0E93				   NOGHOST3:
 0E93  C3			   RETN
				;}
 0E94				DRAW_PORTALS ENDP
				
				
				;----------------------------------------------
				--------------------------------------------
				 ; _             _  _        _        
				 ;| |           | || |      | |       
				 ;| |__   _   _ | || |  ___ | |_  ___ 
				 ;| '_ \ | | | || || | / _ \| __|/ __|
				 ;| |_) || |_| || || ||  __/| |_ \__ \
				 ;|_.__/  \__,_||_||_| \___| \__||___/
				 ;---------------------------------------------
				----------------------------------------------
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 1 CANON SET ITS MOTI
				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
				;----------------------------------------------
				-----------------------------------------------
				------
 0E94				FIRE_BULLET_1 PROC NEAR
				;{
 0E94  50			   PUSH AX
 0E95  53			   PUSH BX
 0E96  51			   PUSH CX
 0E97  52			   PUSH DX
				   
				   ;IF(BULLET_1_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0E98  83 3E 003D R 01		   CMP BULLET_1_STATUS,1
 0E9D  74 21			      JE RETN_FIRE_BUL_1   
				   ;ELSE DRAW A BULLET AT START POSITION
 0E9F  C7 06 003D R 0001	      MOV BULLET_1_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 0EA5  8B 1E 0015 R		      MOV BX , BULLET_1_START_POSITION_X
 0EA9  89 1E 0039 R		      MOV BULLET_1_POSITION_X, BX
 0EAD  8B 1E 0017 R		      MOV BX, BULLET_1_START_POSITION_Y
 0EB1  89 1E 003B R		      MOV BULLET_1_POSITION_Y, BX
 0EB5  8B 1E 0013 R		      MOV BX, ORIENTATION_PLAYER1 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 0EB9  89 1E 003F R		      MOV BULLET_1_MOTION_TYPE, BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-73


 0EBD  E8 0EC5 R		      CALL DRAW_BULLET_1    
				   
 0EC0				   RETN_FIRE_BUL_1:
 0EC0  5A			   POP DX
 0EC1  59			   POP CX
 0EC2  5B			   POP BX
 0EC3  58			   POP AX 
 0EC4  C3			   RETN
				;}
 0EC5				FIRE_BULLET_1 ENDP
				
				;----------------------------------------------
				--------------------------------
				; DRAWS A BULLET 1 AT BULLET_POSTION_1 X , Y IF
				 THE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 0EC5				DRAW_BULLET_1 PROC NEAR
				;{   
 0EC5  50			   PUSH AX
 0EC6  53			   PUSH BX
 0EC7  51			   PUSH CX
 0EC8  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 0EC9  83 3E 003D R 01		   CMP BULLET_1_STATUS, 1
 0ECE  75 6F			   JNE RETN_DRW_BUL_11   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_1_POSITION_X, BULLE
				T_1_POSITION_Y, BULLETSIZE , BULLET_1_STATUS ;R
				ETNURNS IN BULLETSTATUS 0 IF NOT WITHIN
 0ED0  50                    1	   PUSH AX 
 0ED1  53                    1	   PUSH BX 
 0ED2  51                    1	   PUSH CX 
 0ED3  52                    1	   PUSH DX 
 0ED4  C7 06 003D R 0001     1	   MOV BULLET_1_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 0EDA                        1	   ??005C: 
 0EDA  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0EDE  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0EE2  2B CB                 1	      SUB CX, BX 
 0EE4  83 F9 00              1	      CMP CX, 0 
 0EE7  7D 06                 1	      JGE ??005D 
 0EE9  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0EEF                        1	   ??005D: 
 0EEF  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0EF3  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0EF7  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0EFB  2B D9                 1	      SUB BX, CX 
 0EFD  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0F00  7D 06                 1	      JGE ??005F 
 0F02  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-74


 0F08                        1	   ??005F: 
 0F08  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0F0C  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0F10  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0F14  2B D9                 1	      SUB BX, CX 
 0F16  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0F19  7D 06                 1	      JGE ??005E 
 0F1B  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F21                        1	   ??005E: 
 0F21  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0F25  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0F29  2B CB                 1	      SUB CX, BX 
 0F2B  83 F9 00              1	      CMP CX, 0 
 0F2E  7D 06                 1	      JGE ??0060 
 0F30  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F36                        1	   ??0060: 
 0F36  5A                    1	   POP DX 
 0F37  59                    1	   POP CX 
 0F38  5B                    1	   POP BX 
 0F39  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 0F3A  83 3E 003D R 01		      CMP BULLET_1_STATUS, 1
 0F3F				      RETN_DRW_BUL_11:      ;USELESS LABEL FOR 
				INTERMEDIATE JUMP
 0F3F  75 30			      JNE RETN_DRW_BUL_1
 0F41  8B 1E 0096 R		      MOV BX , BULLETSIZE
 0F45  BE 0000 E		      MOV SI, OFFSET Bullet_1_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_1_PO
				SITION_X, BULLET_1_POSITION_Y
 0F48  51                    1	   PUSH CX 
 0F49  53                    1	   PUSH BX 
 0F4A  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0F4C  8B 16 003B R          1	   MOV     DX, BULLET_1_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 0F50  8B 2E 0096 R          1	   MOV BP, BULLETSIZE 
 0F54  8A 3C                 1	   MOV BH, [SI] 
 0F56                        1	   ??0062:;{ FOR(BP = 50; BD > 0; BP--) 
 0F56  8B 0E 0039 R          1	      MOV     CX, BULLET_1_POSITION_X    ; X TO
				 START 
 0F5A  8B 3E 0096 R          1	      MOV DI, BULLETSIZE 
 0F5E                        1	      ??0061:;{ FOR(DX = 50; DX > 0; DX--) 
 0F5E  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0F5F  3A F8                 1	         CMP BH ,AL 
 0F61  74 04                 1	         JE ??0063 
 0F63  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0F65  CD 10                 1	         INT     10H 
 0F67                        1	         ??0063: 
 0F67  41                    1	         INC     CX         ; NEXT X POSITION 
 0F68  4F                    1	         DEC     DI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-75


 0F69  75 F3                 1	         JNZ     ??0061 
 0F6B  42                    1	      INC     DX         ; NEXT Y POSITION 
 0F6C  4D                    1	      DEC     BP 
 0F6D  75 E7                 1	      JNZ     ??0062 
 0F6F  5B                    1	      POP BX 
 0F70  59                    1	      POP CX 
 0F71				   RETN_DRW_BUL_1:
 0F71  5A			   POP DX
 0F72  59			   POP CX
 0F73  5B			   POP BX
 0F74  58			   POP AX 
 0F75  C3			   RETN
				;}
 0F76				DRAW_BULLET_1 ENDP
				;----------------------------------------------
				--------------------------------
				; MOVES BULLET 1 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROC NEAREDUR
				E 
				;----------------------------------------------
				--------------------------------
 0F76				MOVE_BULLET_1 PROC NEAR 
				;{
 0F76  50			   PUSH AX
 0F77  53			   PUSH BX
 0F78  51			   PUSH CX
 0F79  52			   PUSH DX
				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 0F7A  83 3E 003D R 00		   CMP BULLET_1_STATUS, 0
 0F7F  74 6D			   JE RETN_MOV_BUL_1
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPRIGH
				T, 2:RIGHT, 3:DOWNRIGHT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 0F81  A1 0041 R		   MOV AX ,BULLET_1_SPEED                
				   ;{
 0F84  83 3E 003F R 00		      CMP BULLET_1_MOTION_TYPE,0
 0F89  75 07			      JNE UPRIGHTB
 0F8B  29 06 003B R		      SUB BULLET_1_POSITION_Y, AX         ;MOVE
				 WITH SPEED 
 0F8F  EB 5D 90			      JMP RETN_MOV_BUL_1
				   ;}
 0F92				   UPRIGHTB:
				   ;{
 0F92  83 3E 003F R 01		      CMP BULLET_1_MOTION_TYPE,1
 0F97  75 1E			      JNE RIGHTB
 0F99  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0F9E  77 06			      JA UP_RIGHT_SPEED
 0FA0  2D 0004			      SUB AX,4
 0FA3  EB 04 90			      JMP UP_RIGHT_MOVEMENT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-76


 0FA6				   UP_RIGHT_SPEED: 
 0FA6  2D 0008			      SUB AX,8                            ;UP R
				IGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHAN
				GE IT)
 0FA9				   UP_RIGHT_MOVEMENT:   
 0FA9  01 06 0039 R		      ADD BULLET_1_POSITION_X,AX
 0FAD  29 06 003B R		      SUB BULLET_1_POSITION_Y,AX
 0FB1  A1 0041 R		      MOV AX,BULLET_1_SPEED               ;RESE
				T AX=SPEED OF BULLET 
 0FB4  EB 38 90			      JMP RETN_MOV_BUL_1
				   ;}
 0FB7				   RIGHTB:
				   ;{
 0FB7  83 3E 003F R 02		      CMP BULLET_1_MOTION_TYPE,2
 0FBC  75 07			      JNE DOWNRIGHTB
 0FBE  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FC2  EB 2A 90			      JMP RETN_MOV_BUL_1 
				   ;}
 0FC5				   DOWNRIGHTB:
				   ;{
 0FC5  83 3E 003F R 03		      CMP BULLET_1_MOTION_TYPE,3
 0FCA  75 1E			      JNE DOWNB
 0FCC  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0FD1  77 06			      JA DOWN_RIGHT_SPEED
 0FD3  2D 0004			      SUB AX,4
 0FD6  EB 04 90			      JMP DOWN_RIGHT_MOVEMENT
 0FD9				   DOWN_RIGHT_SPEED:
 0FD9  2D 0008			      SUB AX,8                           ;DOWN 
				RIGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHA
				NGE IT)
 0FDC				   DOWN_RIGHT_MOVEMENT:  
 0FDC  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
 0FE0  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FE4  A1 0041 R		      MOV AX,BULLET_1_SPEED
 0FE7  EB 05 90			      JMP RETN_MOV_BUL_1
				   ;}
 0FEA				   DOWNB:
				   ;{
 0FEA  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
				   ;}
				
 0FEE				   RETN_MOV_BUL_1:
 0FEE  5A			   POP DX
 0FEF  59			   POP CX
 0FF0  5B			   POP BX
 0FF1  58			   POP AX 
 0FF2  C3			   RETN
				;}  
 0FF3				MOVE_BULLET_1 ENDP
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 2 CANON SET ITS MOTI
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-77


				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
				;----------------------------------------------
				-----------------------------------------------
				------
 0FF3				FIRE_BULLET2 PROC NEAR
				;{
 0FF3  50			   PUSH AX
 0FF4  53			   PUSH BX
 0FF5  51			   PUSH CX
 0FF6  52			   PUSH DX
				   
				   ;IF(BULLET_2_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0FF7  83 3E 0049 R 01		   CMP BULLET_2_STATUS,1
 0FFC  74 21			      JE RETN_FIRE_BUL_2   
				   ;ELSE DRAW A BULLET AT START POSITION
 0FFE  C7 06 0049 R 0001	      MOV BULLET_2_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 1004  8B 1E 0035 R		      MOV BX , BULLET_2_START_POSITION_X
 1008  89 1E 0045 R		      MOV BULLET_2_POSITION_X, BX
 100C  8B 1E 0037 R		      MOV BX, BULLET_2_START_POSITION_Y
 1010  89 1E 0047 R		      MOV BULLET_2_POSITION_Y, BX
 1014  8B 1E 0023 R		      MOV BX, ORIENTATION_PLAYER2 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 1018  89 1E 004B R		      MOV BULLET_2_MOTION_TYPE, BX
 101C  E8 1024 R		      CALL DRAW_BULLET_2    
				   
 101F				   RETN_FIRE_BUL_2:
 101F  5A			   POP DX
 1020  59			   POP CX
 1021  5B			   POP BX
 1022  58			   POP AX 
 1023  C3			   RETN
				;}
 1024				FIRE_BULLET2 ENDP
				;----------------------------------------------
				--------------------------------
				; DRAWS BULLET 2 AT BULLET_POSTION_1 X , Y IF T
				HE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 1024				DRAW_BULLET_2 PROC NEAR
				;{   
 1024  50			   PUSH AX
 1025  53			   PUSH BX
 1026  51			   PUSH CX
 1027  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 1028  83 3E 0049 R 01		   CMP BULLET_2_STATUS, 1
 102D  75 6F			   JNE RETN_DRW_BUL_22   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_2_POSITION_X, BULLE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-78


				T_2_POSITION_Y, BULLETSIZE , BULLET_2_STATUS ;R
				ETNURNS IN BULLETSTATUS 0 IF NOT WITHIN
 102F  50                    1	   PUSH AX 
 1030  53                    1	   PUSH BX 
 1031  51                    1	   PUSH CX 
 1032  52                    1	   PUSH DX 
 1033  C7 06 0049 R 0001     1	   MOV BULLET_2_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 1039                        1	   ??0064: 
 1039  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 103D  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 1041  2B CB                 1	      SUB CX, BX 
 1043  83 F9 00              1	      CMP CX, 0 
 1046  7D 06                 1	      JGE ??0065 
 1048  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 104E                        1	   ??0065: 
 104E  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 1052  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 1056  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 105A  2B D9                 1	      SUB BX, CX 
 105C  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 105F  7D 06                 1	      JGE ??0067 
 1061  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1067                        1	   ??0067: 
 1067  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 106B  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 106F  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 1073  2B D9                 1	      SUB BX, CX 
 1075  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 1078  7D 06                 1	      JGE ??0066 
 107A  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1080                        1	   ??0066: 
 1080  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 1084  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 1088  2B CB                 1	      SUB CX, BX 
 108A  83 F9 00              1	      CMP CX, 0 
 108D  7D 06                 1	      JGE ??0068 
 108F  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1095                        1	   ??0068: 
 1095  5A                    1	   POP DX 
 1096  59                    1	   POP CX 
 1097  5B                    1	   POP BX 
 1098  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 1099  83 3E 0049 R 01		      CMP BULLET_2_STATUS, 1
 109E				      RETN_DRW_BUL_22:      ;USELESS LABEL FOR 
				INTERMEDIATE JUMP
 109E  75 2C			      JNE RETN_DRW_BUL_2
 10A0  BE 0000 E		      MOV SI, OFFSET Bullet_2_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_2_PO
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-79


				SITION_X, BULLET_2_POSITION_Y
 10A3  51                    1	   PUSH CX 
 10A4  53                    1	   PUSH BX 
 10A5  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 10A7  8B 16 0047 R          1	   MOV     DX, BULLET_2_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 10AB  8B 2E 0096 R          1	   MOV BP, BULLETSIZE 
 10AF  8A 3C                 1	   MOV BH, [SI] 
 10B1                        1	   ??006A:;{ FOR(BP = 50; BD > 0; BP--) 
 10B1  8B 0E 0045 R          1	      MOV     CX, BULLET_2_POSITION_X    ; X TO
				 START 
 10B5  8B 3E 0096 R          1	      MOV DI, BULLETSIZE 
 10B9                        1	      ??0069:;{ FOR(DX = 50; DX > 0; DX--) 
 10B9  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 10BA  3A F8                 1	         CMP BH ,AL 
 10BC  74 04                 1	         JE ??006B 
 10BE  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 10C0  CD 10                 1	         INT     10H 
 10C2                        1	         ??006B: 
 10C2  41                    1	         INC     CX         ; NEXT X POSITION 
 10C3  4F                    1	         DEC     DI 
 10C4  75 F3                 1	         JNZ     ??0069 
 10C6  42                    1	      INC     DX         ; NEXT Y POSITION 
 10C7  4D                    1	      DEC     BP 
 10C8  75 E7                 1	      JNZ     ??006A 
 10CA  5B                    1	      POP BX 
 10CB  59                    1	      POP CX 
 10CC				   RETN_DRW_BUL_2:
 10CC  5A			   POP DX
 10CD  59			   POP CX
 10CE  5B			   POP BX
 10CF  58			   POP AX 
 10D0  C3			   RETN
				;}
 10D1				DRAW_BULLET_2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				; MOVES BULLET 2 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROC NEAREDUR
				E 
				;----------------------------------------------
				-------------------------------------------
 10D1				MOVE_BULLET_2 PROC NEAR 
				;{
 10D1  50			   PUSH AX
 10D2  53			   PUSH BX
 10D3  51			   PUSH CX
 10D4  52			   PUSH DX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-80


				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 10D5  83 3E 0049 R 00		   CMP BULLET_2_STATUS, 0
 10DA  74 6D			   JE RETN_MOV_BUL_2
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPLEFT
				, 2:LEFT, 3:DOWNLEFT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 10DC  A1 004D R		   MOV AX,BULLET_2_SPEED
				   ;{
 10DF  83 3E 004B R 00		      CMP BULLET_2_MOTION_TYPE,0
 10E4  75 07			      JNE UPLEFTB
 10E6  29 06 0047 R		      SUB BULLET_2_POSITION_Y, AX
 10EA  EB 5D 90			      JMP RETN_MOV_BUL_2
				   ;}
 10ED				   UPLEFTB:
				   ;{
 10ED  83 3E 004B R 01		      CMP BULLET_2_MOTION_TYPE,1
 10F2  75 1E			      JNE LEFTB
 10F4  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 10F9  77 06			      JA UP_LEFT
 10FB  2D 0005			      SUB AX,5
 10FE  EB 04 90			      JMP UP_LEFT_MOVEMENT
 1101				   UP_LEFT:   
 1101  2D 0008			      SUB AX,8
 1104				   UP_LEFT_MOVEMENT:   
 1104  29 06 0045 R		      SUB BULLET_2_POSITION_X,AX
 1108  29 06 0047 R		      SUB BULLET_2_POSITION_Y,AX
 110C  A1 004D R		      MOV AX,BULLET_2_SPEED
 110F  EB 38 90			      JMP RETN_MOV_BUL_2
				   ;}
 1112				   LEFTB:
				   ;{
 1112  83 3E 004B R 02		      CMP BULLET_2_MOTION_TYPE,2
 1117  75 07			      JNE DOWNLEFTB
 1119  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
				      
 111D  EB 2A 90			      JMP RETN_MOV_BUL_2 
				  ;}
 1120				   DOWNLEFTB:
				   ;{
 1120  83 3E 004B R 03		      CMP BULLET_2_MOTION_TYPE,3
 1125  75 1E			      JNE DOWNB2
 1127  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 112C  77 06			      JA DOWN_LEFT
 112E  2D 0005			   SUB AX,5
 1131  EB 04 90			      JMP DOWN_LEFT_MOVEMENT
 1134				   DOWN_LEFT:   
 1134  2D 0008			      SUB AX,8
 1137				   DOWN_LEFT_MOVEMENT:
 1137  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
 113B  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
 113F  A1 004D R		      MOV AX,BULLET_2_SPEED
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-81


 1142  EB 05 90			      JMP RETN_MOV_BUL_2
				   ;}
 1145				   DOWNB2:
				   ;{
 1145  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
				   ;}
				
 1149				   RETN_MOV_BUL_2:
 1149  5A			   POP DX
 114A  59			   POP CX
 114B  5B			   POP BX
 114C  58			   POP AX 
 114D  C3			   RETN
				;}  
 114E				MOVE_BULLET_2 ENDP
				 
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits tank 2 
				;----------------------------------------------
				-------------------------------------------
 114E				CHECK_HIT_BUL1_TANK2 PROC NEAR
				;{
 114E  50			   PUSH AX
 114F  53			   PUSH BX
 1150  51			   PUSH CX
 1151  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, BULLET_1_POSITION_X, 
				BULLET_1_POSITION_Y, BULLETSIZE, BULLET_1_STATU
				S
 1152  50                    1	    PUSH AX 
 1153  53                    1	    PUSH BX 
 1154  51                    1	    PUSH CX 
 1155  52                    1	    PUSH DX 
 1156  55                    1	    PUSH BP 
 1157  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 115B  D1 E9                 1	        SHR CX, 1 
 115D  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 1161  D1 EA                 1	        SHR DX, 1 
 1163  BD 0000               1	        MOV BP , 0 
 1166  03 EA                 1	        ADD BP, DX 
 1168  03 E9                 1	        ADD BP, CX 
 116A  83 ED 03              1	        SUB BP ,3 
 116D  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1170  03 C1                 1	        ADD AX, CX 
 1172  8B 1E 0039 R          1	        MOV BX, BULLET_1_POSITION_X 
 1176  03 DA                 1	        ADD BX, DX 
 1178  3B C3                 1	        CMP AX,BX 
 117A  7C 09                 1	        JL ??006C 
 117C  2B C3                 1	        SUB AX ,BX 
 117E  3B C5                 1	        CMP AX, BP 
 1180  77 30                 1	        JA ??006E 
 1182  EB 07 90              1	        JMP ??006D 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-82


 1185                        1	        ??006C: 
 1185  2B D8                 1	            SUB BX, AX 
 1187  3B DD                 1	            CMP BX, BP 
 1189  77 27                 1	            JA ??006E 
 118B                        1	        ??006D: 
 118B  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 118E  03 C1                 1	        ADD AX, CX 
 1190  8B 1E 003B R          1	        MOV BX, BULLET_1_POSITION_Y 
 1194  03 DA                 1	        ADD BX, DX 
 1196  3B C3                 1	        CMP AX, BX 
 1198  7C 09                 1	        JL ??006F 
 119A  2B C3                 1	        SUB AX,BX 
 119C  3B C5                 1	        CMP AX, BP 
 119E  77 12                 1	        JA ??006E 
 11A0  EB 07 90              1	        JMP ??0070 
 11A3                        1	        ??006F: 
 11A3  2B D8                 1	            SUB BX, AX 
 11A5  3B DD                 1	            CMP BX, BP 
 11A7  77 09                 1	            JA ??006E 
 11A9                        1	        ??0070: 
 11A9  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 11AF  EB 07 90              1	        JMP ??0071 
 11B2                        1	    ??006E: 
 11B2  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 11B8                        1	    ??0071: 
 11B8  5D                    1	    POP BP 
 11B9  5A                    1	    POP DX 
 11BA  59                    1	    POP CX 
 11BB  5B                    1	    POP BX 
 11BC  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 11BD  83 3E 003D R 00		         CMP BULLET_1_STATUS, 0
 11C2  75 19			         JNE NOHIT1
				         ;MAY BE SPLIT IN ANOTHER PROC NEAREDUR
				E JUSTFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 11C4  A1 0011 R		         MOV AX, TANK_DMG_1         
 11C7  39 06 001D R		         CMP TANK_HP_2,AX             ;IF HP<= 
				THE OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 11CB  7E 07			         JLE LOSER2
				         
 11CD  29 06 001D R		         SUB TANK_HP_2, AX            ;OTHERWIS
				E HIS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 11D1  EB 0A 90			         JMP NOHIT1
				
 11D4				      LOSER2: 
 11D4  C7 06 009E R 0001	      MOV WINNER ,1                   ;SET WHO 
				IS THE WINNER
 11DA  E8 1D16 R		      CALL PLAYER_LOST                ;TO PRINT
				 RESULTS    
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-83


				      ;}
 11DD				   NOHIT1:   
 11DD  5A			   POP DX
 11DE  59			   POP CX
 11DF  5B			   POP BX
 11E0  58			   POP AX
 11E1  C3			   RETN
				;}   
 11E2				CHECK_HIT_BUL1_TANK2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost1 
				;----------------------------------------------
				-------------------------------------------
 11E2				CHECK_HIT_BUL1_GHOST1 PROC NEAR
				;{
 11E2  50			   PUSH AX
 11E3  53			   PUSH BX
 11E4  51			   PUSH CX
 11E5  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_1_STATUS
				     
 11E6  50                    1	    PUSH AX 
 11E7  53                    1	    PUSH BX 
 11E8  51                    1	    PUSH CX 
 11E9  52                    1	    PUSH DX 
 11EA  55                    1	    PUSH BP 
 11EB  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 11EF  D1 E9                 1	        SHR CX, 1 
 11F1  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 11F5  D1 EA                 1	        SHR DX, 1 
 11F7  BD 0000               1	        MOV BP , 0 
 11FA  03 EA                 1	        ADD BP, DX 
 11FC  03 E9                 1	        ADD BP, CX 
 11FE  83 ED 03              1	        SUB BP ,3 
 1201  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 1204  03 C1                 1	        ADD AX, CX 
 1206  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 120A  03 DA                 1	        ADD BX, DX 
 120C  3B C3                 1	        CMP AX,BX 
 120E  7C 09                 1	        JL ??0072 
 1210  2B C3                 1	        SUB AX ,BX 
 1212  3B C5                 1	        CMP AX, BP 
 1214  77 30                 1	        JA ??0074 
 1216  EB 07 90              1	        JMP ??0073 
 1219                        1	        ??0072: 
 1219  2B D8                 1	            SUB BX, AX 
 121B  3B DD                 1	            CMP BX, BP 
 121D  77 27                 1	            JA ??0074 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-84


 121F                        1	        ??0073: 
 121F  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1222  03 C1                 1	        ADD AX, CX 
 1224  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1228  03 DA                 1	        ADD BX, DX 
 122A  3B C3                 1	        CMP AX, BX 
 122C  7C 09                 1	        JL ??0075 
 122E  2B C3                 1	        SUB AX,BX 
 1230  3B C5                 1	        CMP AX, BP 
 1232  77 12                 1	        JA ??0074 
 1234  EB 07 90              1	        JMP ??0076 
 1237                        1	        ??0075: 
 1237  2B D8                 1	            SUB BX, AX 
 1239  3B DD                 1	            CMP BX, BP 
 123B  77 09                 1	            JA ??0074 
 123D                        1	        ??0076: 
 123D  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1243  EB 07 90              1	        JMP ??0077 
 1246                        1	    ??0074: 
 1246  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 124C                        1	    ??0077: 
 124C  5D                    1	    POP BP 
 124D  5A                    1	    POP DX 
 124E  59                    1	    POP CX 
 124F  5B                    1	    POP BX 
 1250  58                    1	    POP AX 
 1251  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1256  75 48			      JNE GHOST1_LIVES
				
				      ;POWER-UPS
				      ;( 
 1258  83 3E 005B R 00		      CMP POWERUP_GHOST1,0         ;IF POWERUPS
				=0 IT WILL INCREASE THE HP BY 1 UNLESS HE HAS H
				P=10
 125D  74 02			      JZ HP_LIMIT1
 125F  75 0F			      JNZ SPEED_INCREASE1
				      ;)
 1261				      HP_LIMIT1:
				      ;(
 1261  83 3E 000D R 0A		      CMP TANK_HP_1,10                     
 1266  74 2C			      JZ T1_KILL_G1                ;IF HP=10 KI
				LL THE GHOST WITHOUT INCREASING HP
 1268  83 06 000D R 01		      ADD TANK_HP_1,1
 126D  EB 25 90			      JMP T1_KILL_G1
				      ;)
				
 1270				      SPEED_INCREASE1:
				      ;(
 1270  83 3E 005B R 01		      CMP POWERUP_GHOST1,1         ;IF POWERUPS
				=1 THE SPEED WILL INCREASE BUT IT HAS LIMIT (AT
				 MOST 3 TIMES)
 1275  74 0B			      JZ SPEED_LIMIT1
 1277  75 00			      JNZ INCREASE_DAMAGE1
				      ;)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-85


 1279				      INCREASE_DAMAGE1:
				      ;(
 1279  C7 06 0011 R 0002	          MOV TANK_DMG_1,2        ;IF POWERUPS=
				2  THE TANK DAMAGE WILL BE 2 
 127F  EB 13 90			          JMP T1_KILL_G1
				      ;)
 1282				      SPEED_LIMIT1:
				      ;(
 1282  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3  
				        ;IF NUMBER OF SPEED POWERUPS =3 KILL TH
				E GHOST ONLY
 1287  7D 0B			               JNL T1_KILL_G1
 1289  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 128C  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1290  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1294				    T1_KILL_G1:  
				     ;(      
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1294  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 129A  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
				      
 12A0				   GHOST1_LIVES:   
 12A0  5A			   POP DX
 12A1  59			   POP CX
 12A2  5B			   POP BX
 12A3  58			   POP AX
 12A4  C3			   RETN
				;}   
 12A5				CHECK_HIT_BUL1_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 12A5				CHECK_HIT_BUL1_GHOST2 PROC NEAR
				;{
 12A5  50			   PUSH AX
 12A6  53			   PUSH BX
 12A7  51			   PUSH CX
 12A8  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_1_STATUS
				     
 12A9  50                    1	    PUSH AX 
 12AA  53                    1	    PUSH BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-86


 12AB  51                    1	    PUSH CX 
 12AC  52                    1	    PUSH DX 
 12AD  55                    1	    PUSH BP 
 12AE  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 12B2  D1 E9                 1	        SHR CX, 1 
 12B4  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 12B8  D1 EA                 1	        SHR DX, 1 
 12BA  BD 0000               1	        MOV BP , 0 
 12BD  03 EA                 1	        ADD BP, DX 
 12BF  03 E9                 1	        ADD BP, CX 
 12C1  83 ED 03              1	        SUB BP ,3 
 12C4  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 12C7  03 C1                 1	        ADD AX, CX 
 12C9  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 12CD  03 DA                 1	        ADD BX, DX 
 12CF  3B C3                 1	        CMP AX,BX 
 12D1  7C 09                 1	        JL ??0078 
 12D3  2B C3                 1	        SUB AX ,BX 
 12D5  3B C5                 1	        CMP AX, BP 
 12D7  77 30                 1	        JA ??007A 
 12D9  EB 07 90              1	        JMP ??0079 
 12DC                        1	        ??0078: 
 12DC  2B D8                 1	            SUB BX, AX 
 12DE  3B DD                 1	            CMP BX, BP 
 12E0  77 27                 1	            JA ??007A 
 12E2                        1	        ??0079: 
 12E2  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 12E5  03 C1                 1	        ADD AX, CX 
 12E7  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 12EB  03 DA                 1	        ADD BX, DX 
 12ED  3B C3                 1	        CMP AX, BX 
 12EF  7C 09                 1	        JL ??007B 
 12F1  2B C3                 1	        SUB AX,BX 
 12F3  3B C5                 1	        CMP AX, BP 
 12F5  77 12                 1	        JA ??007A 
 12F7  EB 07 90              1	        JMP ??007C 
 12FA                        1	        ??007B: 
 12FA  2B D8                 1	            SUB BX, AX 
 12FC  3B DD                 1	            CMP BX, BP 
 12FE  77 09                 1	            JA ??007A 
 1300                        1	        ??007C: 
 1300  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1306  EB 07 90              1	        JMP ??007D 
 1309                        1	    ??007A: 
 1309  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 130F                        1	    ??007D: 
 130F  5D                    1	    POP BP 
 1310  5A                    1	    POP DX 
 1311  59                    1	    POP CX 
 1312  5B                    1	    POP BX 
 1313  58                    1	    POP AX 
 1314  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1319  75 48			      JNE GHOST2_LIVES
				      ;POWER-UPS
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-87


				      ;( 
 131B  83 3E 006B R 00		      CMP POWERUP_GHOST2,0
 1320  74 02			      JZ HP_LIMIT2
 1322  75 0F			      JNZ SPEED_INCREASE2
				      ;)
 1324				      HP_LIMIT2:
				      ;(
 1324  83 3E 000D R 0A		      CMP TANK_HP_1,10
 1329  74 2C			      JZ T1_KILL_G2
 132B  83 06 000D R 01		      ADD TANK_HP_1,1
 1330  EB 25 90			      JMP T1_KILL_G2
				      ;)
				
 1333				      SPEED_INCREASE2:
				      ;(
 1333  83 3E 006B R 01		      CMP POWERUP_GHOST2,1
 1338  74 0B			      JZ SPEED_LIMIT2
 133A  75 00			      JNZ INCREASE_DAMAGE2
				      ;)
 133C				      INCREASE_DAMAGE2:
				      ;(
				           
 133C  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 1342  EB 13 90			          JMP T1_KILL_G2
				      ;)
 1345				      SPEED_LIMIT2:
				      ;( 
 1345  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 134A  7D 0B			               JNL T1_KILL_G2
 134C  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 134F  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1353  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1357				    T1_KILL_G2:  
				      ;(
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1357  C7 06 0067 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 135D  81 2E 0065 R 0258	      SUB STARTPOS_Y_GHOST2, 600
				      ;)
 1363				   GHOST2_LIVES:   
 1363  5A			   POP DX
 1364  59			   POP CX
 1365  5B			   POP BX
 1366  58			   POP AX
 1367  C3			   RETN
				;}   
 1368				CHECK_HIT_BUL1_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost3 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-88


				;----------------------------------------------
				-------------------------------------------
 1368				CHECK_HIT_BUL1_GHOST3 PROC NEAR
				;{
 1368  50			   PUSH AX
 1369  53			   PUSH BX
 136A  51			   PUSH CX
 136B  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_1_STATUS
				     
 136C  50                    1	    PUSH AX 
 136D  53                    1	    PUSH BX 
 136E  51                    1	    PUSH CX 
 136F  52                    1	    PUSH DX 
 1370  55                    1	    PUSH BP 
 1371  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 1375  D1 E9                 1	        SHR CX, 1 
 1377  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 137B  D1 EA                 1	        SHR DX, 1 
 137D  BD 0000               1	        MOV BP , 0 
 1380  03 EA                 1	        ADD BP, DX 
 1382  03 E9                 1	        ADD BP, CX 
 1384  83 ED 03              1	        SUB BP ,3 
 1387  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 138A  03 C1                 1	        ADD AX, CX 
 138C  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 1390  03 DA                 1	        ADD BX, DX 
 1392  3B C3                 1	        CMP AX,BX 
 1394  7C 09                 1	        JL ??007E 
 1396  2B C3                 1	        SUB AX ,BX 
 1398  3B C5                 1	        CMP AX, BP 
 139A  77 30                 1	        JA ??0080 
 139C  EB 07 90              1	        JMP ??007F 
 139F                        1	        ??007E: 
 139F  2B D8                 1	            SUB BX, AX 
 13A1  3B DD                 1	            CMP BX, BP 
 13A3  77 27                 1	            JA ??0080 
 13A5                        1	        ??007F: 
 13A5  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 13A8  03 C1                 1	        ADD AX, CX 
 13AA  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 13AE  03 DA                 1	        ADD BX, DX 
 13B0  3B C3                 1	        CMP AX, BX 
 13B2  7C 09                 1	        JL ??0081 
 13B4  2B C3                 1	        SUB AX,BX 
 13B6  3B C5                 1	        CMP AX, BP 
 13B8  77 12                 1	        JA ??0080 
 13BA  EB 07 90              1	        JMP ??0082 
 13BD                        1	        ??0081: 
 13BD  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-89


 13BF  3B DD                 1	            CMP BX, BP 
 13C1  77 09                 1	            JA ??0080 
 13C3                        1	        ??0082: 
 13C3  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 13C9  EB 07 90              1	        JMP ??0083 
 13CC                        1	    ??0080: 
 13CC  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 13D2                        1	    ??0083: 
 13D2  5D                    1	    POP BP 
 13D3  5A                    1	    POP DX 
 13D4  59                    1	    POP CX 
 13D5  5B                    1	    POP BX 
 13D6  58                    1	    POP AX 
 13D7  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 13DC  75 48			      JNE GHOST3_LIVES
				      ;POWER-UPS
				      ;( 
 13DE  83 3E 007B R 00		      CMP POWERUP_GHOST3,0
 13E3  74 02			      JZ HP_LIMIT3
 13E5  75 0F			      JNZ SPEED_INCREASE3
				      ;)
 13E7				      HP_LIMIT3:
				      ;(
 13E7  83 3E 000D R 0A		      CMP TANK_HP_1,10
 13EC  74 2C			      JZ T1_KILL_G3
 13EE  83 06 000D R 01		      ADD TANK_HP_1,1
 13F3  EB 25 90			      JMP T1_KILL_G3
				      ;)
				
 13F6				      SPEED_INCREASE3:
				      ;(
 13F6  83 3E 007B R 01		      CMP POWERUP_GHOST3,1
 13FB  74 0B			      JZ SPEED_LIMIT3
 13FD  75 00			      JNZ INCREASE_DAMAGE3
				      ;)
 13FF				      INCREASE_DAMAGE3:
				      ;(
				          
 13FF  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 1405  EB 13 90			          JMP T1_KILL_G3
				      ;)
 1408				      SPEED_LIMIT3:
				      ;(
 1408  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 140D  7D 0B			               JNL T1_KILL_G3
 140F  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1412  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1416  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 141A				    T1_KILL_G3:  
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 141A  C7 06 0077 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST3 OUT OF BOUNDARIES TO AVOID 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-90


				BEING HIT WHILE TRANSPARENT
 1420  81 2E 0075 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 1426				   GHOST3_LIVES:   
 1426  5A			   POP DX
 1427  59			   POP CX
 1428  5B			   POP BX
 1429  58			   POP AX
 142A  C3			   RETN
				;}   
 142B				CHECK_HIT_BUL1_GHOST3 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits tank 1 
				;----------------------------------------------
				-------------------------------------------
 142B				CHECK_HIT_BUL2_TANK1 PROC NEAR
				;{
 142B  50			   PUSH AX
 142C  53			   PUSH BX
 142D  51			   PUSH CX
 142E  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, BULLET_2_POSITION_X, 
				BULLET_2_POSITION_Y, BULLETSIZE, BULLET_2_STATU
				S
 142F  50                    1	    PUSH AX 
 1430  53                    1	    PUSH BX 
 1431  51                    1	    PUSH CX 
 1432  52                    1	    PUSH DX 
 1433  55                    1	    PUSH BP 
 1434  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1438  D1 E9                 1	        SHR CX, 1 
 143A  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 143E  D1 EA                 1	        SHR DX, 1 
 1440  BD 0000               1	        MOV BP , 0 
 1443  03 EA                 1	        ADD BP, DX 
 1445  03 E9                 1	        ADD BP, CX 
 1447  83 ED 03              1	        SUB BP ,3 
 144A  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 144D  03 C1                 1	        ADD AX, CX 
 144F  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 1453  03 DA                 1	        ADD BX, DX 
 1455  3B C3                 1	        CMP AX,BX 
 1457  7C 09                 1	        JL ??0084 
 1459  2B C3                 1	        SUB AX ,BX 
 145B  3B C5                 1	        CMP AX, BP 
 145D  77 30                 1	        JA ??0086 
 145F  EB 07 90              1	        JMP ??0085 
 1462                        1	        ??0084: 
 1462  2B D8                 1	            SUB BX, AX 
 1464  3B DD                 1	            CMP BX, BP 
 1466  77 27                 1	            JA ??0086 
 1468                        1	        ??0085: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-91


 1468  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 146B  03 C1                 1	        ADD AX, CX 
 146D  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
 1471  03 DA                 1	        ADD BX, DX 
 1473  3B C3                 1	        CMP AX, BX 
 1475  7C 09                 1	        JL ??0087 
 1477  2B C3                 1	        SUB AX,BX 
 1479  3B C5                 1	        CMP AX, BP 
 147B  77 12                 1	        JA ??0086 
 147D  EB 07 90              1	        JMP ??0088 
 1480                        1	        ??0087: 
 1480  2B D8                 1	            SUB BX, AX 
 1482  3B DD                 1	            CMP BX, BP 
 1484  77 09                 1	            JA ??0086 
 1486                        1	        ??0088: 
 1486  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 148C  EB 07 90              1	        JMP ??0089 
 148F                        1	    ??0086: 
 148F  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1495                        1	    ??0089: 
 1495  5D                    1	    POP BP 
 1496  5A                    1	    POP DX 
 1497  59                    1	    POP CX 
 1498  5B                    1	    POP BX 
 1499  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 149A  83 3E 0049 R 00		         CMP BULLET_2_STATUS, 0
 149F  75 19			         JNE NOHIT2
				         ;MAY BE SPLIT IN ANOTHER PROC NEAREDUR
				E JUSTFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 14A1  A1 0021 R		         MOV AX, TANK_DMG_2        ;IF HP<= THE
				 OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 14A4  39 06 000D R		         CMP TANK_HP_1,AX
 14A8  7E 07			         JLE LOSER1
 14AA  29 06 000D R		         SUB TANK_HP_1, AX         ;OTHERWISE H
				IS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 14AE  EB 0A 90			         JMP NOHIT2
 14B1				         LOSER1:
 14B1  C7 06 009E R 0002	         MOV WINNER,2
 14B7  E8 1D16 R		         CALL PLAYER_LOST
				      ;}
 14BA				   NOHIT2:   
 14BA  5A			   POP DX
 14BB  59			   POP CX
 14BC  5B			   POP BX
 14BD  58			   POP AX
 14BE  C3			   RETN
				;}   
 14BF				CHECK_HIT_BUL2_TANK1 ENDP
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-92


				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost1 
				;----------------------------------------------
				-------------------------------------------
 14BF				CHECK_HIT_BUL2_GHOST1 PROC NEAR
				;{
 14BF  50			   PUSH AX
 14C0  53			   PUSH BX
 14C1  51			   PUSH CX
 14C2  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_2_STATUS
				     
 14C3  50                    1	    PUSH AX 
 14C4  53                    1	    PUSH BX 
 14C5  51                    1	    PUSH CX 
 14C6  52                    1	    PUSH DX 
 14C7  55                    1	    PUSH BP 
 14C8  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 14CC  D1 E9                 1	        SHR CX, 1 
 14CE  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 14D2  D1 EA                 1	        SHR DX, 1 
 14D4  BD 0000               1	        MOV BP , 0 
 14D7  03 EA                 1	        ADD BP, DX 
 14D9  03 E9                 1	        ADD BP, CX 
 14DB  83 ED 03              1	        SUB BP ,3 
 14DE  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 14E1  03 C1                 1	        ADD AX, CX 
 14E3  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 14E7  03 DA                 1	        ADD BX, DX 
 14E9  3B C3                 1	        CMP AX,BX 
 14EB  7C 09                 1	        JL ??008A 
 14ED  2B C3                 1	        SUB AX ,BX 
 14EF  3B C5                 1	        CMP AX, BP 
 14F1  77 30                 1	        JA ??008C 
 14F3  EB 07 90              1	        JMP ??008B 
 14F6                        1	        ??008A: 
 14F6  2B D8                 1	            SUB BX, AX 
 14F8  3B DD                 1	            CMP BX, BP 
 14FA  77 27                 1	            JA ??008C 
 14FC                        1	        ??008B: 
 14FC  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 14FF  03 C1                 1	        ADD AX, CX 
 1501  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1505  03 DA                 1	        ADD BX, DX 
 1507  3B C3                 1	        CMP AX, BX 
 1509  7C 09                 1	        JL ??008D 
 150B  2B C3                 1	        SUB AX,BX 
 150D  3B C5                 1	        CMP AX, BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-93


 150F  77 12                 1	        JA ??008C 
 1511  EB 07 90              1	        JMP ??008E 
 1514                        1	        ??008D: 
 1514  2B D8                 1	            SUB BX, AX 
 1516  3B DD                 1	            CMP BX, BP 
 1518  77 09                 1	            JA ??008C 
 151A                        1	        ??008E: 
 151A  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 1520  EB 07 90              1	        JMP ??008F 
 1523                        1	    ??008C: 
 1523  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1529                        1	    ??008F: 
 1529  5D                    1	    POP BP 
 152A  5A                    1	    POP DX 
 152B  59                    1	    POP CX 
 152C  5B                    1	    POP BX 
 152D  58                    1	    POP AX 
 152E  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 1533  75 48			      JNE GHOST1_LIVES2
				      ;POWER-UPS
				      ;( 
 1535  83 3E 005B R 00		      CMP POWERUP_GHOST1,0
 153A  74 02			      JZ HP2_LIMIT1
 153C  75 0F			      JNZ SPEED2_INCREASE1
				      ;)
 153E				      HP2_LIMIT1:
				      ;(
 153E  83 3E 001D R 0A		      CMP TANK_HP_2,10
 1543  74 2C			      JZ T2_KILL_G1
 1545  83 06 001D R 01		      ADD TANK_HP_2,1
 154A  EB 25 90			      JMP T2_KILL_G1
				      ;)
				
 154D				      SPEED2_INCREASE1:
				      ;(
 154D  83 3E 005B R 01		      CMP POWERUP_GHOST1,1
 1552  74 0B			      JZ SPEED2_LIMIT1
 1554  75 00			      JNZ INCREASE2_DAMAGE1
				      ;)
 1556				      INCREASE2_DAMAGE1:
				      ;(
				           
 1556  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 155C  EB 13 90			          JMP T2_KILL_G1
				      ;)
 155F				      SPEED2_LIMIT1:
				      ;(
 155F  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 1564  7D 0B			               JNL T2_KILL_G1
 1566  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1569  01 06 004D R		               ADD BULLET_2_SPEED,AX
 156D  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-94


				ER-UPS HERE
 1571				      T2_KILL_G1:
				      ;(
 1571  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1577  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
 157D				   GHOST1_LIVES2:   
 157D  5A			   POP DX
 157E  59			   POP CX
 157F  5B			   POP BX
 1580  58			   POP AX
 1581  C3			   RETN
				;}   
 1582				CHECK_HIT_BUL2_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 1582				CHECK_HIT_BUL2_GHOST2 PROC NEAR
				;{
 1582  50			   PUSH AX
 1583  53			   PUSH BX
 1584  51			   PUSH CX
 1585  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_2_STATUS
				     
 1586  50                    1	    PUSH AX 
 1587  53                    1	    PUSH BX 
 1588  51                    1	    PUSH CX 
 1589  52                    1	    PUSH DX 
 158A  55                    1	    PUSH BP 
 158B  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 158F  D1 E9                 1	        SHR CX, 1 
 1591  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1595  D1 EA                 1	        SHR DX, 1 
 1597  BD 0000               1	        MOV BP , 0 
 159A  03 EA                 1	        ADD BP, DX 
 159C  03 E9                 1	        ADD BP, CX 
 159E  83 ED 03              1	        SUB BP ,3 
 15A1  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 15A4  03 C1                 1	        ADD AX, CX 
 15A6  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 15AA  03 DA                 1	        ADD BX, DX 
 15AC  3B C3                 1	        CMP AX,BX 
 15AE  7C 09                 1	        JL ??0090 
 15B0  2B C3                 1	        SUB AX ,BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-95


 15B2  3B C5                 1	        CMP AX, BP 
 15B4  77 30                 1	        JA ??0092 
 15B6  EB 07 90              1	        JMP ??0091 
 15B9                        1	        ??0090: 
 15B9  2B D8                 1	            SUB BX, AX 
 15BB  3B DD                 1	            CMP BX, BP 
 15BD  77 27                 1	            JA ??0092 
 15BF                        1	        ??0091: 
 15BF  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 15C2  03 C1                 1	        ADD AX, CX 
 15C4  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 15C8  03 DA                 1	        ADD BX, DX 
 15CA  3B C3                 1	        CMP AX, BX 
 15CC  7C 09                 1	        JL ??0093 
 15CE  2B C3                 1	        SUB AX,BX 
 15D0  3B C5                 1	        CMP AX, BP 
 15D2  77 12                 1	        JA ??0092 
 15D4  EB 07 90              1	        JMP ??0094 
 15D7                        1	        ??0093: 
 15D7  2B D8                 1	            SUB BX, AX 
 15D9  3B DD                 1	            CMP BX, BP 
 15DB  77 09                 1	            JA ??0092 
 15DD                        1	        ??0094: 
 15DD  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 15E3  EB 07 90              1	        JMP ??0095 
 15E6                        1	    ??0092: 
 15E6  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 15EC                        1	    ??0095: 
 15EC  5D                    1	    POP BP 
 15ED  5A                    1	    POP DX 
 15EE  59                    1	    POP CX 
 15EF  5B                    1	    POP BX 
 15F0  58                    1	    POP AX 
 15F1  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 15F6  75 48			      JNE GHOST2_LIVES2
				       ;POWER-UPS
				      ;( 
 15F8  83 3E 006B R 00		      CMP POWERUP_GHOST2,0
 15FD  74 02			      JZ HP2_LIMIT2
 15FF  75 0F			      JNZ SPEED2_INCREASE2
				      ;)
 1601				      HP2_LIMIT2:
				      ;(
 1601  83 3E 001D R 0A		      CMP TANK_HP_2,10
 1606  74 2C			      JZ T2_KILL_G2
 1608  83 06 001D R 01		      ADD TANK_HP_2,1
 160D  EB 25 90			      JMP T2_KILL_G2
				      ;)
				
 1610				      SPEED2_INCREASE2:
				      ;(
 1610  83 3E 006B R 01		      CMP POWERUP_GHOST2,1
 1615  74 0B			      JZ SPEED2_LIMIT2
 1617  75 00			      JNZ INCREASE2_DAMAGE2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-96


				      ;)
 1619				      INCREASE2_DAMAGE2:
				      ;(
				         
 1619  C7 06 0021 R 0002	         MOV TANK_DMG_2,2
 161F  EB 13 90			         JMP T2_KILL_G2
				      ;)
 1622				      SPEED2_LIMIT2:
				      ;(
 1622  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 1627  7D 0B			               JNL T2_KILL_G2
 1629  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 162C  01 06 004D R		               ADD BULLET_2_SPEED,AX
 1630  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1634				      T2_KILL_G2:
				      
 1634  C7 06 0067 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 163A  81 2E 0065 R 0258	      SUB STARTPOS_Y_GHOST2, 600
 1640				   GHOST2_LIVES2:   
 1640  5A			   POP DX
 1641  59			   POP CX
 1642  5B			   POP BX
 1643  58			   POP AX
 1644  C3			   RETN
				;}   
 1645				CHECK_HIT_BUL2_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost3 
				;----------------------------------------------
				-------------------------------------------
 1645				CHECK_HIT_BUL2_GHOST3 PROC NEAR
				;{
 1645  50			   PUSH AX
 1646  53			   PUSH BX
 1647  51			   PUSH CX
 1648  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_2_STATUS
				     
 1649  50                    1	    PUSH AX 
 164A  53                    1	    PUSH BX 
 164B  51                    1	    PUSH CX 
 164C  52                    1	    PUSH DX 
 164D  55                    1	    PUSH BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-97


 164E  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 1652  D1 E9                 1	        SHR CX, 1 
 1654  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1658  D1 EA                 1	        SHR DX, 1 
 165A  BD 0000               1	        MOV BP , 0 
 165D  03 EA                 1	        ADD BP, DX 
 165F  03 E9                 1	        ADD BP, CX 
 1661  83 ED 03              1	        SUB BP ,3 
 1664  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 1667  03 C1                 1	        ADD AX, CX 
 1669  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 166D  03 DA                 1	        ADD BX, DX 
 166F  3B C3                 1	        CMP AX,BX 
 1671  7C 09                 1	        JL ??0096 
 1673  2B C3                 1	        SUB AX ,BX 
 1675  3B C5                 1	        CMP AX, BP 
 1677  77 30                 1	        JA ??0098 
 1679  EB 07 90              1	        JMP ??0097 
 167C                        1	        ??0096: 
 167C  2B D8                 1	            SUB BX, AX 
 167E  3B DD                 1	            CMP BX, BP 
 1680  77 27                 1	            JA ??0098 
 1682                        1	        ??0097: 
 1682  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 1685  03 C1                 1	        ADD AX, CX 
 1687  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 168B  03 DA                 1	        ADD BX, DX 
 168D  3B C3                 1	        CMP AX, BX 
 168F  7C 09                 1	        JL ??0099 
 1691  2B C3                 1	        SUB AX,BX 
 1693  3B C5                 1	        CMP AX, BP 
 1695  77 12                 1	        JA ??0098 
 1697  EB 07 90              1	        JMP ??009A 
 169A                        1	        ??0099: 
 169A  2B D8                 1	            SUB BX, AX 
 169C  3B DD                 1	            CMP BX, BP 
 169E  77 09                 1	            JA ??0098 
 16A0                        1	        ??009A: 
 16A0  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 16A6  EB 07 90              1	        JMP ??009B 
 16A9                        1	    ??0098: 
 16A9  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 16AF                        1	    ??009B: 
 16AF  5D                    1	    POP BP 
 16B0  5A                    1	    POP DX 
 16B1  59                    1	    POP CX 
 16B2  5B                    1	    POP BX 
 16B3  58                    1	    POP AX 
 16B4  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 16B9  75 48			      JNE GHOST3_LIVES2
				      ;POWER-UPS
				      ;( 
 16BB  83 3E 007B R 00		      CMP POWERUP_GHOST3,0
 16C0  74 02			      JZ HP2_LIMIT3
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-98


 16C2  75 0F			      JNZ SPEED2_INCREASE3
				      ;)
 16C4				      HP2_LIMIT3:
				      ;(
 16C4  83 3E 001D R 0A		      CMP TANK_HP_2,10
 16C9  74 2C			      JZ T2_KILL_G3
 16CB  83 06 001D R 01		      ADD TANK_HP_2,1
 16D0  EB 25 90			      JMP T2_KILL_G3
				      ;)
				
 16D3				      SPEED2_INCREASE3:
				      ;(
 16D3  83 3E 007B R 01		      CMP POWERUP_GHOST3,1
 16D8  74 0B			      JZ SPEED2_LIMIT3
 16DA  75 00			      JNZ INCREASE2_DAMAGE3
				      ;)
 16DC				      INCREASE2_DAMAGE3:
				      ;(
				         
 16DC  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 16E2  EB 13 90			          JMP T2_KILL_G3
				      ;)
 16E5				      SPEED2_LIMIT3:
				      ;(
 16E5  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 16EA  7D 0B			               JNL T2_KILL_G3
 16EC  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 16EF  01 06 004D R		               ADD BULLET_2_SPEED,AX
 16F3  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 16F7				      T2_KILL_G3:
 16F7  C7 06 0077 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 16FD  81 2E 0075 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 1703				   GHOST3_LIVES2:   
 1703  5A			   POP DX
 1704  59			   POP CX
 1705  5B			   POP BX
 1706  58			   POP AX
 1707  C3			   RETN
				;}   
 1708				CHECK_HIT_BUL2_GHOST3 ENDP
				;----------------------------------------------
				-------------------------------------------
				;Detects The collision of The two bullets 
				;----------------------------------------------
				-------------------------------------------
 1708				BULLETS_HIT PROC NEAR
				;{
 1708  50			   PUSH AX
 1709  53			   PUSH BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-99


 170A  51			   PUSH CX
 170B  52			   PUSH DX
				      ;DETECT THE COLLISION BETWEEN BOTH BULLET
				S
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, BULLET_2_POSITION
				_X,BULLET_2_POSITION_Y,BULLETSIZE, BULLET_1_STA
				TUS
 170C  50                    1	    PUSH AX 
 170D  53                    1	    PUSH BX 
 170E  51                    1	    PUSH CX 
 170F  52                    1	    PUSH DX 
 1710  55                    1	    PUSH BP 
 1711  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 1715  D1 E9                 1	        SHR CX, 1 
 1717  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 171B  D1 EA                 1	        SHR DX, 1 
 171D  BD 0000               1	        MOV BP , 0 
 1720  03 EA                 1	        ADD BP, DX 
 1722  03 E9                 1	        ADD BP, CX 
 1724  83 ED 03              1	        SUB BP ,3 
 1727  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 172A  03 C1                 1	        ADD AX, CX 
 172C  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 1730  03 DA                 1	        ADD BX, DX 
 1732  3B C3                 1	        CMP AX,BX 
 1734  7C 09                 1	        JL ??009C 
 1736  2B C3                 1	        SUB AX ,BX 
 1738  3B C5                 1	        CMP AX, BP 
 173A  77 30                 1	        JA ??009E 
 173C  EB 07 90              1	        JMP ??009D 
 173F                        1	        ??009C: 
 173F  2B D8                 1	            SUB BX, AX 
 1741  3B DD                 1	            CMP BX, BP 
 1743  77 27                 1	            JA ??009E 
 1745                        1	        ??009D: 
 1745  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1748  03 C1                 1	        ADD AX, CX 
 174A  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
 174E  03 DA                 1	        ADD BX, DX 
 1750  3B C3                 1	        CMP AX, BX 
 1752  7C 09                 1	        JL ??009F 
 1754  2B C3                 1	        SUB AX,BX 
 1756  3B C5                 1	        CMP AX, BP 
 1758  77 12                 1	        JA ??009E 
 175A  EB 07 90              1	        JMP ??00A0 
 175D                        1	        ??009F: 
 175D  2B D8                 1	            SUB BX, AX 
 175F  3B DD                 1	            CMP BX, BP 
 1761  77 09                 1	            JA ??009E 
 1763                        1	        ??00A0: 
 1763  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1769  EB 07 90              1	        JMP ??00A1 
 176C                        1	    ??009E: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-100


 176C  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 1772                        1	    ??00A1: 
 1772  5D                    1	    POP BP 
 1773  5A                    1	    POP DX 
 1774  59                    1	    POP CX 
 1775  5B                    1	    POP BX 
 1776  58                    1	    POP AX 
 1777  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 177C  75 06			      JNE NOT_HITTING
				      ;MAKE THE OTHER BULLET DISAPPEAR ALSO
 177E  C7 06 0049 R 0000	      MOV BULLET_2_STATUS, 0
 1784				   NOT_HITTING:
 1784  5A			   POP DX
 1785  59			   POP CX
 1786  5B			   POP BX
 1787  58			   POP AX
 1788  C3			   RETN
				;}
 1789				BULLETS_HIT ENDP
				;----------------------------------------------
				-----------------------------------------
				;   _____  _    _   ____    _____  _______     
				       _______         _   _  _  __
				;  / ____|| |  | | / __ \  / ____||__   __|   _
				__    |__   __| /\    | \ | || |/ /
				; | |  __ | |__| || |  | || (___     | |     ( 
				_ )      | |   /  \   |  \| || ' / 
				; | | |_ ||  __  || |  | | \___ \    | |     / 
				_ \/\    | |  / /\ \  | . ` ||  <  
				; | |__| || |  | || |__| | ____) |   | |    | (
				_>  <    | | / ____ \ | |\  || . \ 
				;  \_____||_|  |_| \____/ |_____/    |_|     \_
				__/\/    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				-----------------------------------------
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 1789				CHECK_HIT_GHOST1_TANK1 PROC NEAR
 1789  50			   PUSH AX
 178A  53			   PUSH BX
 178B  51			   PUSH CX
 178C  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 178D  50                    1	    PUSH AX 
 178E  53                    1	    PUSH BX 
 178F  51                    1	    PUSH CX 
 1790  52                    1	    PUSH DX 
 1791  55                    1	    PUSH BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-101


 1792  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1796  D1 E9                 1	        SHR CX, 1 
 1798  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 179C  D1 EA                 1	        SHR DX, 1 
 179E  BD 0000               1	        MOV BP , 0 
 17A1  03 EA                 1	        ADD BP, DX 
 17A3  03 E9                 1	        ADD BP, CX 
 17A5  83 ED 03              1	        SUB BP ,3 
 17A8  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 17AB  03 C1                 1	        ADD AX, CX 
 17AD  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 17B1  03 DA                 1	        ADD BX, DX 
 17B3  3B C3                 1	        CMP AX,BX 
 17B5  7C 09                 1	        JL ??00A2 
 17B7  2B C3                 1	        SUB AX ,BX 
 17B9  3B C5                 1	        CMP AX, BP 
 17BB  77 30                 1	        JA ??00A4 
 17BD  EB 07 90              1	        JMP ??00A3 
 17C0                        1	        ??00A2: 
 17C0  2B D8                 1	            SUB BX, AX 
 17C2  3B DD                 1	            CMP BX, BP 
 17C4  77 27                 1	            JA ??00A4 
 17C6                        1	        ??00A3: 
 17C6  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 17C9  03 C1                 1	        ADD AX, CX 
 17CB  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 17CF  03 DA                 1	        ADD BX, DX 
 17D1  3B C3                 1	        CMP AX, BX 
 17D3  7C 09                 1	        JL ??00A5 
 17D5  2B C3                 1	        SUB AX,BX 
 17D7  3B C5                 1	        CMP AX, BP 
 17D9  77 12                 1	        JA ??00A4 
 17DB  EB 07 90              1	        JMP ??00A6 
 17DE                        1	        ??00A5: 
 17DE  2B D8                 1	            SUB BX, AX 
 17E0  3B DD                 1	            CMP BX, BP 
 17E2  77 09                 1	            JA ??00A4 
 17E4                        1	        ??00A6: 
 17E4  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 17EA  EB 07 90              1	        JMP ??00A7 
 17ED                        1	    ??00A4: 
 17ED  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 17F3                        1	    ??00A7: 
 17F3  5D                    1	    POP BP 
 17F4  5A                    1	    POP DX 
 17F5  59                    1	    POP CX 
 17F6  5B                    1	    POP BX 
 17F7  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 17F8  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 17FD  75 1B			         JNE TANK1_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 17FF  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-102


				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1805  83 3E 000D R 01		         CMP TANK_HP_1,1                     ;C
				HECK IF THE TANK LIFE POINTS IS STILL ABOVE 1
 180A  75 09			         JNZ DECREASE_HP1_G1
 180C  C7 06 009E R 0001	         MOV WINNER ,1                       ;I
				F IT IS THE LAST LIFE THIS PLAYER WILL LOSE
 1812  E8 1D16 R		         CALL PLAYER_LOST 
 1815				      DECREASE_HP1_G1:
 1815  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 181A				   TANK1_SAFE1:   
 181A  5A			   POP DX
 181B  5B			   POP BX
 181C  59			   POP CX
 181D  5A			   POP DX
 181E  C3			   RETN
 181F				CHECK_HIT_GHOST1_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 181F				CHECK_HIT_GHOST2_TANK1 PROC NEAR
 181F  50			   PUSH AX
 1820  53			   PUSH BX
 1821  51			   PUSH CX
 1822  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 1823  50                    1	    PUSH AX 
 1824  53                    1	    PUSH BX 
 1825  51                    1	    PUSH CX 
 1826  52                    1	    PUSH DX 
 1827  55                    1	    PUSH BP 
 1828  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 182C  D1 E9                 1	        SHR CX, 1 
 182E  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1832  D1 EA                 1	        SHR DX, 1 
 1834  BD 0000               1	        MOV BP , 0 
 1837  03 EA                 1	        ADD BP, DX 
 1839  03 E9                 1	        ADD BP, CX 
 183B  83 ED 03              1	        SUB BP ,3 
 183E  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 1841  03 C1                 1	        ADD AX, CX 
 1843  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1847  03 DA                 1	        ADD BX, DX 
 1849  3B C3                 1	        CMP AX,BX 
 184B  7C 09                 1	        JL ??00A8 
 184D  2B C3                 1	        SUB AX ,BX 
 184F  3B C5                 1	        CMP AX, BP 
 1851  77 30                 1	        JA ??00AA 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-103


 1853  EB 07 90              1	        JMP ??00A9 
 1856                        1	        ??00A8: 
 1856  2B D8                 1	            SUB BX, AX 
 1858  3B DD                 1	            CMP BX, BP 
 185A  77 27                 1	            JA ??00AA 
 185C                        1	        ??00A9: 
 185C  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 185F  03 C1                 1	        ADD AX, CX 
 1861  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1865  03 DA                 1	        ADD BX, DX 
 1867  3B C3                 1	        CMP AX, BX 
 1869  7C 09                 1	        JL ??00AB 
 186B  2B C3                 1	        SUB AX,BX 
 186D  3B C5                 1	        CMP AX, BP 
 186F  77 12                 1	        JA ??00AA 
 1871  EB 07 90              1	        JMP ??00AC 
 1874                        1	        ??00AB: 
 1874  2B D8                 1	            SUB BX, AX 
 1876  3B DD                 1	            CMP BX, BP 
 1878  77 09                 1	            JA ??00AA 
 187A                        1	        ??00AC: 
 187A  C7 06 0067 R 0000     1	        MOV EXISTS_GHOST2, 0 
 1880  EB 07 90              1	        JMP ??00AD 
 1883                        1	    ??00AA: 
 1883  C7 06 0067 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1889                        1	    ??00AD: 
 1889  5D                    1	    POP BP 
 188A  5A                    1	    POP DX 
 188B  59                    1	    POP CX 
 188C  5B                    1	    POP BX 
 188D  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 188E  83 3E 0067 R 00		         CMP EXISTS_GHOST2,0
 1893  75 1B			         JNE TANK1_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1895  81 2E 0065 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 189B  83 3E 000D R 01		         CMP TANK_HP_1,1
 18A0  75 09			         JNZ DECREASE_HP1_G2
 18A2  C7 06 009E R 0002	         MOV WINNER,2
 18A8  E8 1D16 R		         CALL PLAYER_LOST
				
 18AB				      DECREASE_HP1_G2:
 18AB  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 18B0				   TANK1_SAFE2:   
 18B0  5A			   POP DX
 18B1  5B			   POP BX
 18B2  59			   POP CX
 18B3  5A			   POP DX
 18B4  C3			   RETN
 18B5				CHECK_HIT_GHOST2_TANK1 ENDP
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-104


				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST3 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 18B5				CHECK_HIT_GHOST3_TANK1 PROC NEAR
 18B5  50			   PUSH AX
 18B6  53			   PUSH BX
 18B7  51			   PUSH CX
 18B8  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 18B9  50                    1	    PUSH AX 
 18BA  53                    1	    PUSH BX 
 18BB  51                    1	    PUSH CX 
 18BC  52                    1	    PUSH DX 
 18BD  55                    1	    PUSH BP 
 18BE  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 18C2  D1 E9                 1	        SHR CX, 1 
 18C4  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 18C8  D1 EA                 1	        SHR DX, 1 
 18CA  BD 0000               1	        MOV BP , 0 
 18CD  03 EA                 1	        ADD BP, DX 
 18CF  03 E9                 1	        ADD BP, CX 
 18D1  83 ED 03              1	        SUB BP ,3 
 18D4  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 18D7  03 C1                 1	        ADD AX, CX 
 18D9  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 18DD  03 DA                 1	        ADD BX, DX 
 18DF  3B C3                 1	        CMP AX,BX 
 18E1  7C 09                 1	        JL ??00AE 
 18E3  2B C3                 1	        SUB AX ,BX 
 18E5  3B C5                 1	        CMP AX, BP 
 18E7  77 30                 1	        JA ??00B0 
 18E9  EB 07 90              1	        JMP ??00AF 
 18EC                        1	        ??00AE: 
 18EC  2B D8                 1	            SUB BX, AX 
 18EE  3B DD                 1	            CMP BX, BP 
 18F0  77 27                 1	            JA ??00B0 
 18F2                        1	        ??00AF: 
 18F2  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 18F5  03 C1                 1	        ADD AX, CX 
 18F7  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 18FB  03 DA                 1	        ADD BX, DX 
 18FD  3B C3                 1	        CMP AX, BX 
 18FF  7C 09                 1	        JL ??00B1 
 1901  2B C3                 1	        SUB AX,BX 
 1903  3B C5                 1	        CMP AX, BP 
 1905  77 12                 1	        JA ??00B0 
 1907  EB 07 90              1	        JMP ??00B2 
 190A                        1	        ??00B1: 
 190A  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-105


 190C  3B DD                 1	            CMP BX, BP 
 190E  77 09                 1	            JA ??00B0 
 1910                        1	        ??00B2: 
 1910  C7 06 0077 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1916  EB 07 90              1	        JMP ??00B3 
 1919                        1	    ??00B0: 
 1919  C7 06 0077 R 0001     1	    MOV EXISTS_GHOST3, 1 
 191F                        1	    ??00B3: 
 191F  5D                    1	    POP BP 
 1920  5A                    1	    POP DX 
 1921  59                    1	    POP CX 
 1922  5B                    1	    POP BX 
 1923  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1924  83 3E 0077 R 00		         CMP EXISTS_GHOST3,0
 1929  75 1B			         JNE TANK1_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 192B  81 2E 0075 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1931  83 3E 000D R 01		         CMP TANK_HP_1,1
 1936  75 09			         JNZ DECREASE_HP1_G3
 1938  C7 06 009E R 0002	         MOV WINNER,2
 193E  E8 1D16 R		         CALL PLAYER_LOST
				        
 1941				      DECREASE_HP1_G3:
 1941  83 2E 000D R 01		         SUB TANK_HP_1,1
				        
				      ;}   
 1946				   TANK1_SAFE3:   
 1946  5A			   POP DX
 1947  5B			   POP BX
 1948  59			   POP CX
 1949  5A			   POP DX
 194A  C3			   RETN
 194B				CHECK_HIT_GHOST3_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 194B				CHECK_HIT_GHOST1_TANK2 PROC NEAR
 194B  50			   PUSH AX
 194C  53			   PUSH BX
 194D  51			   PUSH CX
 194E  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 194F  50                    1	    PUSH AX 
 1950  53                    1	    PUSH BX 
 1951  51                    1	    PUSH CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-106


 1952  52                    1	    PUSH DX 
 1953  55                    1	    PUSH BP 
 1954  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1958  D1 E9                 1	        SHR CX, 1 
 195A  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 195E  D1 EA                 1	        SHR DX, 1 
 1960  BD 0000               1	        MOV BP , 0 
 1963  03 EA                 1	        ADD BP, DX 
 1965  03 E9                 1	        ADD BP, CX 
 1967  83 ED 03              1	        SUB BP ,3 
 196A  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 196D  03 C1                 1	        ADD AX, CX 
 196F  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 1973  03 DA                 1	        ADD BX, DX 
 1975  3B C3                 1	        CMP AX,BX 
 1977  7C 09                 1	        JL ??00B4 
 1979  2B C3                 1	        SUB AX ,BX 
 197B  3B C5                 1	        CMP AX, BP 
 197D  77 30                 1	        JA ??00B6 
 197F  EB 07 90              1	        JMP ??00B5 
 1982                        1	        ??00B4: 
 1982  2B D8                 1	            SUB BX, AX 
 1984  3B DD                 1	            CMP BX, BP 
 1986  77 27                 1	            JA ??00B6 
 1988                        1	        ??00B5: 
 1988  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 198B  03 C1                 1	        ADD AX, CX 
 198D  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1991  03 DA                 1	        ADD BX, DX 
 1993  3B C3                 1	        CMP AX, BX 
 1995  7C 09                 1	        JL ??00B7 
 1997  2B C3                 1	        SUB AX,BX 
 1999  3B C5                 1	        CMP AX, BP 
 199B  77 12                 1	        JA ??00B6 
 199D  EB 07 90              1	        JMP ??00B8 
 19A0                        1	        ??00B7: 
 19A0  2B D8                 1	            SUB BX, AX 
 19A2  3B DD                 1	            CMP BX, BP 
 19A4  77 09                 1	            JA ??00B6 
 19A6                        1	        ??00B8: 
 19A6  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 19AC  EB 07 90              1	        JMP ??00B9 
 19AF                        1	    ??00B6: 
 19AF  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 19B5                        1	    ??00B9: 
 19B5  5D                    1	    POP BP 
 19B6  5A                    1	    POP DX 
 19B7  59                    1	    POP CX 
 19B8  5B                    1	    POP BX 
 19B9  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 19BA  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 19BF  75 1B			         JNE TANK2_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-107


				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 19C1  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 19C7  83 3E 001D R 01		         CMP TANK_HP_2,1
 19CC  75 09			         JNZ DECREASE_HP2_G1
 19CE  C7 06 009E R 0001	         MOV WINNER,1
 19D4  E8 1D16 R		         CALL PLAYER_LOST
				        
 19D7				      DECREASE_HP2_G1:
 19D7  83 2E 001D R 01		        SUB TANK_HP_2,1
				
				      ;}   
 19DC				   TANK2_SAFE1:   
 19DC  5A			   POP DX
 19DD  5B			   POP BX
 19DE  59			   POP CX
 19DF  5A			   POP DX
 19E0  C3			   RETN
 19E1				CHECK_HIT_GHOST1_TANK2 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 19E1				CHECK_HIT_GHOST2_TANK2 PROC NEAR
 19E1  50			   PUSH AX
 19E2  53			   PUSH BX
 19E3  51			   PUSH CX
 19E4  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 19E5  50                    1	    PUSH AX 
 19E6  53                    1	    PUSH BX 
 19E7  51                    1	    PUSH CX 
 19E8  52                    1	    PUSH DX 
 19E9  55                    1	    PUSH BP 
 19EA  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 19EE  D1 E9                 1	        SHR CX, 1 
 19F0  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 19F4  D1 EA                 1	        SHR DX, 1 
 19F6  BD 0000               1	        MOV BP , 0 
 19F9  03 EA                 1	        ADD BP, DX 
 19FB  03 E9                 1	        ADD BP, CX 
 19FD  83 ED 03              1	        SUB BP ,3 
 1A00  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1A03  03 C1                 1	        ADD AX, CX 
 1A05  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1A09  03 DA                 1	        ADD BX, DX 
 1A0B  3B C3                 1	        CMP AX,BX 
 1A0D  7C 09                 1	        JL ??00BA 
 1A0F  2B C3                 1	        SUB AX ,BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-108


 1A11  3B C5                 1	        CMP AX, BP 
 1A13  77 30                 1	        JA ??00BC 
 1A15  EB 07 90              1	        JMP ??00BB 
 1A18                        1	        ??00BA: 
 1A18  2B D8                 1	            SUB BX, AX 
 1A1A  3B DD                 1	            CMP BX, BP 
 1A1C  77 27                 1	            JA ??00BC 
 1A1E                        1	        ??00BB: 
 1A1E  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1A21  03 C1                 1	        ADD AX, CX 
 1A23  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1A27  03 DA                 1	        ADD BX, DX 
 1A29  3B C3                 1	        CMP AX, BX 
 1A2B  7C 09                 1	        JL ??00BD 
 1A2D  2B C3                 1	        SUB AX,BX 
 1A2F  3B C5                 1	        CMP AX, BP 
 1A31  77 12                 1	        JA ??00BC 
 1A33  EB 07 90              1	        JMP ??00BE 
 1A36                        1	        ??00BD: 
 1A36  2B D8                 1	            SUB BX, AX 
 1A38  3B DD                 1	            CMP BX, BP 
 1A3A  77 09                 1	            JA ??00BC 
 1A3C                        1	        ??00BE: 
 1A3C  C7 06 0067 R 0000     1	        MOV EXISTS_GHOST2, 0 
 1A42  EB 07 90              1	        JMP ??00BF 
 1A45                        1	    ??00BC: 
 1A45  C7 06 0067 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1A4B                        1	    ??00BF: 
 1A4B  5D                    1	    POP BP 
 1A4C  5A                    1	    POP DX 
 1A4D  59                    1	    POP CX 
 1A4E  5B                    1	    POP BX 
 1A4F  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1A50  83 3E 0067 R 00		         CMP EXISTS_GHOST2,0
 1A55  75 1B			         JNE TANK2_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1A57  81 2E 0065 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1A5D  83 3E 001D R 01		           CMP TANK_HP_2,1
 1A62  75 09			           JNZ DECREASE_HP2_G2
 1A64  C7 06 009E R 0001	           MOV WINNER,1
 1A6A  E8 1D16 R		           CALL PLAYER_LOST
				         
 1A6D				      DECREASE_HP2_G2:
 1A6D  83 2E 001D R 01		        SUB TANK_HP_2,1
				        
				      ;}   
 1A72				   TANK2_SAFE2:   
 1A72  5A			   POP DX
 1A73  5B			   POP BX
 1A74  59			   POP CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-109


 1A75  5A			   POP DX
 1A76  C3			   RETN
 1A77				CHECK_HIT_GHOST2_TANK2 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST3 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 1A77				CHECK_HIT_GHOST3_TANK2 PROC NEAR
 1A77  50			   PUSH AX
 1A78  53			   PUSH BX
 1A79  51			   PUSH CX
 1A7A  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 1A7B  50                    1	    PUSH AX 
 1A7C  53                    1	    PUSH BX 
 1A7D  51                    1	    PUSH CX 
 1A7E  52                    1	    PUSH DX 
 1A7F  55                    1	    PUSH BP 
 1A80  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1A84  D1 E9                 1	        SHR CX, 1 
 1A86  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1A8A  D1 EA                 1	        SHR DX, 1 
 1A8C  BD 0000               1	        MOV BP , 0 
 1A8F  03 EA                 1	        ADD BP, DX 
 1A91  03 E9                 1	        ADD BP, CX 
 1A93  83 ED 03              1	        SUB BP ,3 
 1A96  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1A99  03 C1                 1	        ADD AX, CX 
 1A9B  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 1A9F  03 DA                 1	        ADD BX, DX 
 1AA1  3B C3                 1	        CMP AX,BX 
 1AA3  7C 09                 1	        JL ??00C0 
 1AA5  2B C3                 1	        SUB AX ,BX 
 1AA7  3B C5                 1	        CMP AX, BP 
 1AA9  77 30                 1	        JA ??00C2 
 1AAB  EB 07 90              1	        JMP ??00C1 
 1AAE                        1	        ??00C0: 
 1AAE  2B D8                 1	            SUB BX, AX 
 1AB0  3B DD                 1	            CMP BX, BP 
 1AB2  77 27                 1	            JA ??00C2 
 1AB4                        1	        ??00C1: 
 1AB4  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1AB7  03 C1                 1	        ADD AX, CX 
 1AB9  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 1ABD  03 DA                 1	        ADD BX, DX 
 1ABF  3B C3                 1	        CMP AX, BX 
 1AC1  7C 09                 1	        JL ??00C3 
 1AC3  2B C3                 1	        SUB AX,BX 
 1AC5  3B C5                 1	        CMP AX, BP 
 1AC7  77 12                 1	        JA ??00C2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-110


 1AC9  EB 07 90              1	        JMP ??00C4 
 1ACC                        1	        ??00C3: 
 1ACC  2B D8                 1	            SUB BX, AX 
 1ACE  3B DD                 1	            CMP BX, BP 
 1AD0  77 09                 1	            JA ??00C2 
 1AD2                        1	        ??00C4: 
 1AD2  C7 06 0077 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1AD8  EB 07 90              1	        JMP ??00C5 
 1ADB                        1	    ??00C2: 
 1ADB  C7 06 0077 R 0001     1	    MOV EXISTS_GHOST3, 1 
 1AE1                        1	    ??00C5: 
 1AE1  5D                    1	    POP BP 
 1AE2  5A                    1	    POP DX 
 1AE3  59                    1	    POP CX 
 1AE4  5B                    1	    POP BX 
 1AE5  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1AE6  83 3E 0077 R 00		         CMP EXISTS_GHOST3,0
 1AEB  75 1B			         JNE TANK2_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1AED  81 2E 0075 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
				      
 1AF3  83 3E 001D R 01		         CMP TANK_HP_2,1
 1AF8  75 09			         JNZ DECREASE_HP2_G3
 1AFA  C7 06 009E R 0001	         MOV WINNER,1
 1B00  E8 1D16 R		         CALL PLAYER_LOST
				        
 1B03				      DECREASE_HP2_G3:
 1B03  83 2E 001D R 01		         SUB TANK_HP_2,1
				         
				      ;}   
 1B08				   TANK2_SAFE3:   
 1B08  5A			   POP DX
 1B09  5B			   POP BX
 1B0A  59			   POP CX
 1B0B  5A			   POP DX
 1B0C  C3			   RETN
 1B0D				CHECK_HIT_GHOST3_TANK2 ENDP
				;----------------------------------------------
				-------
				;  _    _  ______            _      _______  _ 
				   _    
				; | |  | ||  ____|    /\    | |    |__   __|| |
				  | | 
				; | |__| || |__      /  \   | |       | |   | |
				__| |  
				; |  __  ||  __|    / /\ \  | |       | |   |  
				__  |  
				; | |  | || |____  / ____ \ | |____   | |   | |
				  | |  
				; |_|  |_||______|/_/    \_\|______|  |_|   |_|
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-111


				  |_|  
				;----------------------------------------------
				------
 1B0D				DRAW_HEALTH_BAR_1 PROC NEAR
				;{   
 1B0D  50			   PUSH AX
 1B0E  53			   PUSH BX
 1B0F  51			   PUSH CX
 1B10  52			   PUSH DX
				  
 1B11  8B 0E 000D R		   MOV CX,TANK_HP_1                   
 1B15  C7 06 0025 R 0005	   MOV HEARTS_1_START_POSITION_X,5
				
 1B1B				RED_PLAYER1:                                   
				   ;FOR PLAYER1 DRAW THE RED HEARTS FIRST
				   ;(
 1B1B  BE 0000 E			MOV SI, OFFSET RED_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B1E  51                    1	   PUSH CX 
 1B1F  53                    1	   PUSH BX 
 1B20  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B22  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B26  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1B2A  8A 3C                 1	   MOV BH, [SI] 
 1B2C                        1	   ??00C7:;{ FOR(BP = 50; BD > 0; BP--) 
 1B2C  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B30  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1B34                        1	      ??00C6:;{ FOR(DX = 50; DX > 0; DX--) 
 1B34  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B35  3A F8                 1	         CMP BH ,AL 
 1B37  74 04                 1	         JE ??00C8 
 1B39  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B3B  CD 10                 1	         INT     10H 
 1B3D                        1	         ??00C8: 
 1B3D  41                    1	         INC     CX         ; NEXT X POSITION 
 1B3E  4F                    1	         DEC     DI 
 1B3F  75 F3                 1	         JNZ     ??00C6 
 1B41  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B42  4D                    1	      DEC     BP 
 1B43  75 E7                 1	      JNZ     ??00C7 
 1B45  5B                    1	      POP BX 
 1B46  59                    1	      POP CX 
 1B47  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20            
				   ;ADD 20 -HEART WIDTH- TO THE X POSITION
 1B4C  E2 CD			   LOOP RED_PLAYER1
				   ;)
				
 1B4E  B9 000A			   MOV CX,10
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-112


 1B51  2B 0E 000D R		   SUB CX,TANK_HP_1
 1B55  74 33			   JZ RETNURN_HEALTH1                          
				   ;IF HP=10 NO WHITE HEARTS SO RETNURN 
					 
 1B57				WHITE_PLAYER1:                                 
				  ;DRAW WHITE HEARTS IF IT EXISTS
				   ;(
 1B57  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B5A  51                    1	   PUSH CX 
 1B5B  53                    1	   PUSH BX 
 1B5C  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B5E  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B62  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1B66  8A 3C                 1	   MOV BH, [SI] 
 1B68                        1	   ??00CA:;{ FOR(BP = 50; BD > 0; BP--) 
 1B68  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B6C  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1B70                        1	      ??00C9:;{ FOR(DX = 50; DX > 0; DX--) 
 1B70  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B71  3A F8                 1	         CMP BH ,AL 
 1B73  74 04                 1	         JE ??00CB 
 1B75  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B77  CD 10                 1	         INT     10H 
 1B79                        1	         ??00CB: 
 1B79  41                    1	         INC     CX         ; NEXT X POSITION 
 1B7A  4F                    1	         DEC     DI 
 1B7B  75 F3                 1	         JNZ     ??00C9 
 1B7D  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B7E  4D                    1	      DEC     BP 
 1B7F  75 E7                 1	      JNZ     ??00CA 
 1B81  5B                    1	      POP BX 
 1B82  59                    1	      POP CX 
 1B83  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20
 1B88  E2 CD			   LOOP WHITE_PLAYER1
				   ;)
				 
 1B8A				 RETNURN_HEALTH1:
 1B8A  5A			   POP DX
 1B8B  59			   POP CX
 1B8C  5B			   POP BX
 1B8D  58			   POP AX 
 1B8E  C3			   RETN
				;}
 1B8F				DRAW_HEALTH_BAR_1 ENDP
				;----------------------------------------------
				-
				;DRAW THE HEALTH BAR FOR PLAYER 2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-113


				;----------------------------------------------
				-
 1B8F				DRAW_HEALTH_BAR_2 PROC NEAR
				;{   
 1B8F  50			   PUSH AX
 1B90  53			   PUSH BX
 1B91  51			   PUSH CX
 1B92  52			   PUSH DX
				  
 1B93  C7 06 0029 R 01AE	   MOV HEARTS_2_START_POSITION_X,430
 1B99  B9 000A			   MOV CX,10
 1B9C  2B 0E 001D R		    SUB CX,TANK_HP_2
 1BA0  74 33			    JZ DRAW_RED
				
 1BA2				WHITE_PLAYER2:                          ;FOR PL
				AYER2 DRAW THE WHITE HEARTS FIRST
				;(
 1BA2  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_ST
				ART_POSITION_X, HEARTS_2_START_POSITION_Y
 1BA5  51                    1	   PUSH CX 
 1BA6  53                    1	   PUSH BX 
 1BA7  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1BA9  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1BAD  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1BB1  8A 3C                 1	   MOV BH, [SI] 
 1BB3                        1	   ??00CD:;{ FOR(BP = 50; BD > 0; BP--) 
 1BB3  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BB7  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1BBB                        1	      ??00CC:;{ FOR(DX = 50; DX > 0; DX--) 
 1BBB  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BBC  3A F8                 1	         CMP BH ,AL 
 1BBE  74 04                 1	         JE ??00CE 
 1BC0  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BC2  CD 10                 1	         INT     10H 
 1BC4                        1	         ??00CE: 
 1BC4  41                    1	         INC     CX         ; NEXT X POSITION 
 1BC5  4F                    1	         DEC     DI 
 1BC6  75 F3                 1	         JNZ     ??00CC 
 1BC8  42                    1	      INC     DX         ; NEXT Y POSITION 
 1BC9  4D                    1	      DEC     BP 
 1BCA  75 E7                 1	      JNZ     ??00CD 
 1BCC  5B                    1	      POP BX 
 1BCD  59                    1	      POP CX 
 1BCE  83 06 0029 R 14		   ADD HEARTS_2_START_POSITION_X,20
 1BD3  E2 CD			   LOOP WHITE_PLAYER2 
				 ;)
				
 1BD5				DRAW_RED:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-114


				;(
 1BD5  8B 0E 001D R		   MOV CX,TANK_HP_2
 1BD9				   RED_PLAYER2:
				      ;(
 1BD9  BE 0000 E		      MOV SI, OFFSET RED_HEART
				      DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_STAR
				T_POSITION_X, HEARTS_2_START_POSITION_Y
 1BDC  51                    1	   PUSH CX 
 1BDD  53                    1	   PUSH BX 
 1BDE  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1BE0  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1BE4  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1BE8  8A 3C                 1	   MOV BH, [SI] 
 1BEA                        1	   ??00D0:;{ FOR(BP = 50; BD > 0; BP--) 
 1BEA  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BEE  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1BF2                        1	      ??00CF:;{ FOR(DX = 50; DX > 0; DX--) 
 1BF2  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BF3  3A F8                 1	         CMP BH ,AL 
 1BF5  74 04                 1	         JE ??00D1 
 1BF7  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BF9  CD 10                 1	         INT     10H 
 1BFB                        1	         ??00D1: 
 1BFB  41                    1	         INC     CX         ; NEXT X POSITION 
 1BFC  4F                    1	         DEC     DI 
 1BFD  75 F3                 1	         JNZ     ??00CF 
 1BFF  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C00  4D                    1	      DEC     BP 
 1C01  75 E7                 1	      JNZ     ??00D0 
 1C03  5B                    1	      POP BX 
 1C04  59                    1	      POP CX 
 1C05  83 06 0029 R 14		      ADD HEARTS_2_START_POSITION_X,20
 1C0A  49			      DEC CX
 1C0B  75 CC			      JNZ RED_PLAYER2  
				      ;)
 1C0D  74 00			   JZ RETNURN_DATA2
				;)
 1C0F				 RETNURN_DATA2:
 1C0F  5A			   POP DX
 1C10  59			   POP CX
 1C11  5B			   POP BX
 1C12  58			   POP AX 
 1C13  C3			   RETN
				;}
 1C14				DRAW_HEALTH_BAR_2 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 1 
				;--------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-115


 1C14				DRW_PRUP_BAR_1 PROC NEAR
				;{
 1C14  50			   PUSH AX
 1C15  53			   PUSH BX
 1C16  51			   PUSH CX
 1C17  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C18  C7 06 002D R 0005	   MOV PWRUP_BAR_1_START_POSITION_X, 5
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C1E  8B 0E 0043 R		   MOV CX, BULLET_1_SPEED_POWER_NUM
 1C22  83 F9 00			   CMP CX, 0
 1C25  74 36			   JE NO_SPD_PWRUP_1
 1C27  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_1
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1C2A				   SPD_PRUP_LOOP_1:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C2A  51                    1	   PUSH CX 
 1C2B  53                    1	   PUSH BX 
 1C2C  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C2E  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C32  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1C36  8A 3C                 1	   MOV BH, [SI] 
 1C38                        1	   ??00D3:;{ FOR(BP = 50; BD > 0; BP--) 
 1C38  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C3C  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1C40                        1	      ??00D2:;{ FOR(DX = 50; DX > 0; DX--) 
 1C40  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C41  3A F8                 1	         CMP BH ,AL 
 1C43  74 04                 1	         JE ??00D4 
 1C45  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C47  CD 10                 1	         INT     10H 
 1C49                        1	         ??00D4: 
 1C49  41                    1	         INC     CX         ; NEXT X POSITION 
 1C4A  4F                    1	         DEC     DI 
 1C4B  75 F3                 1	         JNZ     ??00D2 
 1C4D  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C4E  4D                    1	      DEC     BP 
 1C4F  75 E7                 1	      JNZ     ??00D3 
 1C51  5B                    1	      POP BX 
 1C52  59                    1	      POP CX 
 1C53  83 06 002D R 14		      ADD PWRUP_BAR_1_START_POSITION_X, 20
 1C58  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-116


				   ;}
 1C5B  E2 CD			   LOOP SPD_PRUP_LOOP_1
 1C5D				   NO_SPD_PWRUP_1:
				
				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
 1C5D  83 3E 0011 R 02		   CMP TANK_DMG_1, 2
 1C62  75 2C			   JNE NO_DMG_PWRUP_1
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1C64  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_1
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C67  51                    1	   PUSH CX 
 1C68  53                    1	   PUSH BX 
 1C69  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C6B  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C6F  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1C73  8A 3C                 1	   MOV BH, [SI] 
 1C75                        1	   ??00D6:;{ FOR(BP = 50; BD > 0; BP--) 
 1C75  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C79  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1C7D                        1	      ??00D5:;{ FOR(DX = 50; DX > 0; DX--) 
 1C7D  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C7E  3A F8                 1	         CMP BH ,AL 
 1C80  74 04                 1	         JE ??00D7 
 1C82  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C84  CD 10                 1	         INT     10H 
 1C86                        1	         ??00D7: 
 1C86  41                    1	         INC     CX         ; NEXT X POSITION 
 1C87  4F                    1	         DEC     DI 
 1C88  75 F3                 1	         JNZ     ??00D5 
 1C8A  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C8B  4D                    1	      DEC     BP 
 1C8C  75 E7                 1	      JNZ     ??00D6 
 1C8E  5B                    1	      POP BX 
 1C8F  59                    1	      POP CX 
				   ;}   
 1C90				   NO_DMG_PWRUP_1:
 1C90  5A			   POP DX
 1C91  59			   POP CX
 1C92  5B			   POP BX
 1C93  58			   POP AX
 1C94  C3			   RETN
				;}
 1C95				DRW_PRUP_BAR_1 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-117


				;--------------------------------------------
 1C95				DRW_PRUP_BAR_2 PROC NEAR
				;{
 1C95  50			   PUSH AX
 1C96  53			   PUSH BX
 1C97  51			   PUSH CX
 1C98  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C99  C7 06 0031 R 01AE	   MOV PWRUP_BAR_2_START_POSITION_X, 430
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C9F  8B 0E 004F R		   MOV CX, BULLET_2_SPEED_POWER_NUM
 1CA3  83 F9 00			   CMP CX, 0
 1CA6  74 36			   JE NO_SPD_PWRUP_2
 1CA8  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_2
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1CAB				   SPD_PRUP_LOOP_2:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1CAB  51                    1	   PUSH CX 
 1CAC  53                    1	   PUSH BX 
 1CAD  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1CAF  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CB3  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1CB7  8A 3C                 1	   MOV BH, [SI] 
 1CB9                        1	   ??00D9:;{ FOR(BP = 50; BD > 0; BP--) 
 1CB9  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CBD  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1CC1                        1	      ??00D8:;{ FOR(DX = 50; DX > 0; DX--) 
 1CC1  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CC2  3A F8                 1	         CMP BH ,AL 
 1CC4  74 04                 1	         JE ??00DA 
 1CC6  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1CC8  CD 10                 1	         INT     10H 
 1CCA                        1	         ??00DA: 
 1CCA  41                    1	         INC     CX         ; NEXT X POSITION 
 1CCB  4F                    1	         DEC     DI 
 1CCC  75 F3                 1	         JNZ     ??00D8 
 1CCE  42                    1	      INC     DX         ; NEXT Y POSITION 
 1CCF  4D                    1	      DEC     BP 
 1CD0  75 E7                 1	      JNZ     ??00D9 
 1CD2  5B                    1	      POP BX 
 1CD3  59                    1	      POP CX 
 1CD4  83 06 0031 R 14		      ADD PWRUP_BAR_2_START_POSITION_X, 20
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-118


 1CD9  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_2
				   ;}
 1CDC  E2 CD			   LOOP SPD_PRUP_LOOP_2
 1CDE				   NO_SPD_PWRUP_2:
				
				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
 1CDE  83 3E 0021 R 02		   CMP TANK_DMG_2, 2
 1CE3  75 2C			   JNE NO_DMG_PWRUP_2
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1CE5  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_2
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1CE8  51                    1	   PUSH CX 
 1CE9  53                    1	   PUSH BX 
 1CEA  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1CEC  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CF0  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1CF4  8A 3C                 1	   MOV BH, [SI] 
 1CF6                        1	   ??00DC:;{ FOR(BP = 50; BD > 0; BP--) 
 1CF6  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CFA  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1CFE                        1	      ??00DB:;{ FOR(DX = 50; DX > 0; DX--) 
 1CFE  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CFF  3A F8                 1	         CMP BH ,AL 
 1D01  74 04                 1	         JE ??00DD 
 1D03  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1D05  CD 10                 1	         INT     10H 
 1D07                        1	         ??00DD: 
 1D07  41                    1	         INC     CX         ; NEXT X POSITION 
 1D08  4F                    1	         DEC     DI 
 1D09  75 F3                 1	         JNZ     ??00DB 
 1D0B  42                    1	      INC     DX         ; NEXT Y POSITION 
 1D0C  4D                    1	      DEC     BP 
 1D0D  75 E7                 1	      JNZ     ??00DC 
 1D0F  5B                    1	      POP BX 
 1D10  59                    1	      POP CX 
				   ;}   
 1D11				   NO_DMG_PWRUP_2:
 1D11  5A			   POP DX
 1D12  59			   POP CX
 1D13  5B			   POP BX
 1D14  58			   POP AX
 1D15  C3			   RETN
				;}
 1D16				DRW_PRUP_BAR_2 ENDP
				
				;---------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-119


				; LOSSER 
				;---------------------------
 1D16				PLAYER_LOST PROC NEAR 
				
 1D16  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 1D19  BB 0100			         MOV    BX, 100H
 1D1C  CD 10			         INT    10H
				YWN 40,40,150,220,04                ;DRAW YOU W
				ON WITH RED COLOR  
 1D1E  50                    1	PUSH AX 
 1D1F  51                    1	PUSH CX 
 1D20  52                    1	PUSH DX 
 1D21  53                    1	PUSH BX 
 1D22  56                    1	PUSH SI 
 1D23  57                    1	PUSH DI 
 1D24  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1D27  B9 0096               1	    MOV CX,150 ; X = 400 
 1D2A  B0 04                 1	    MOV AL,04 
 1D2C  B4 0C                 1	    MOV AH,0CH 
 1D2E                        1	    ??00DE: 
 1D2E                        1	        ??00DF: 
 1D2E  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1D32  77 0D                 1	                JA ??00E0 
 1D34  CD 10                 1	                INT 10H 
 1D36  83 C1 1E              1	                ADD CX, 40 - 10 
 1D39  CD 10                 1	                INT 10H 
 1D3B  83 E9 1E              1	                SUB CX,40 - 10 
 1D3E  EB 0F 90              1	                JMP ??00E1 
 1D41                        1	                ??00E0: 
 1D41  83 C1 14              1	                ADD CX,40 / 2 
 1D44  83 E9 05              1	                SUB CX,5 
 1D47  CD 10                 1	                INT 10H 
 1D49  83 C1 05              1	                ADD CX,5 
 1D4C  83 E9 14              1	                SUB CX,40 / 2 
 1D4F                        1	         ??00E1: 
 1D4F  83 C1 32              1	                ADD CX,40 + 10 
 1D52  CD 10                 1	                INT 10H 
 1D54  83 C1 1E              1	                ADD CX,40 -10 
 1D57  CD 10                 1	                INT 10H 
 1D59  83 C1 14              1	            ADD CX,20 
 1D5C  CD 10                 1	            INT 10H 
 1D5E  83 C1 1E              1	            ADD CX,40 -10 
 1D61  CD 10                 1	            INT 10H 
 1D63  83 C1 1E              1	            ADD CX,30 
 1D66  CD 10                 1	            INT 10H 
 1D68  83 C1 14              1	            ADD CX,40/2 
 1D6B  83 E9 05              1	            SUB CX,5 
 1D6E  CD 10                 1	            INT 10H 
 1D70  83 E9 14              1	            SUB CX,40/2 
 1D73  83 C1 05              1	            ADD CX,5 
 1D76  83 C1 1E              1	            ADD CX,40 -10 
 1D79  CD 10                 1	            INT 10H 
 1D7B  83 C1 14              1	            ADD CX,20 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-120


 1D7E  CD 10                 1	            INT 10H 
 1D80  83 C1 1E              1	            ADD CX,40 -10 
 1D83  CD 10                 1	            INT 10H 
 1D85  83 C1 14              1	                 ADD CX,20 
 1D88  CD 10                 1	                 INT 10H 
 1D8A  83 C1 21              1	                 ADD CX,40 - 7 
 1D8D  CD 10                 1	                 INT 10H 
 1D8F  81 E9 0125            1	         SUB CX,6*40 + 53 
 1D93  42                    1	        INC DX 
 1D94  81 FA 0104            1	        CMP DX,220 + 40 
 1D98  75 94                 1	        JNZ ??00DF 
 1D9A  BA 00DC               1	    MOV DX,220 
 1D9D  41                    1	    INC CX 
 1D9E  81 F9 00A0            1	    CMP CX,150 + 10 
 1DA2  75 8A                 1	    JNZ ??00DE 
 1DA4  B9 0096               1	    MOV CX,150 
 1DA7  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1DAA                        1	    ??00E2: 
 1DAA                        1	        ??00E4: 
 1DAA  CD 10                 1	            INT 10H 
 1DAC  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1DAF  83 C1 32              1	            ADD CX, 40 + 10 
 1DB2  CD 10                 1	            INT 10H 
 1DB4  83 EA 1E              1	            SUB DX, 40 - 10 
 1DB7  CD 10                 1	            INT 10H 
 1DB9  83 C2 1E              1	            ADD DX,40 -10 
 1DBC  83 C1 32              1	            ADD CX,40 + 10 
 1DBF  CD 10                 1	            INT 10H 
 1DC1  83 C1 3C              1	            ADD CX,40 + 20 
 1DC4  CD 10                 1	            INT 10H 
 1DC6  83 C1 32              1	            ADD CX,40 + 10 
 1DC9  CD 10                 1	            INT 10H 
 1DCB  83 EA 1E              1	            SUB DX,40 -10 
 1DCE  CD 10                 1	            INT 10H 
 1DD0  81 E9 00D2            1	            SUB CX,4*40+50 
 1DD4  83 C2 14              1	            ADD DX,40/2 
 1DD7  41                    1	        INC CX 
 1DD8  81 F9 00BE            1	        CMP CX,150 + 40 
 1DDC  75 CC                 1	        JNZ ??00E4 
 1DDE  B9 0096               1	    MOV CX,150 
 1DE1  42                    1	    INC DX 
 1DE2  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1DE6  75 C2                 1	    JNZ ??00E2 
 1DE8  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1DEB  BA 00DC               1	    MOV DX,220 
 1DEE  BE 00DC               1	    MOV SI,220 
 1DF1                        1	    ??00E3: 
 1DF1                        1	        ??00E5: 
 1DF1  CD 10                 1	            INT 10H 
 1DF3  41                    1	            INC CX 
 1DF4  42                    1	            INC DX 
 1DF5  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1DF9  75 F6                 1	        JNZ ??00E5 
 1DFB  83 C6 01              1	            ADD SI,1 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-121


 1DFE  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1E01  8B D6                 1	            MOV DX,SI 
 1E03  81 FA 00EA            1	            CMP DX,220 + 14 
 1E07  75 E8                 1	    JNZ ??00E3 
 1E09  5F                    1	POP DI 
 1E0A  5E                    1	POP SI 
 1E0B  5B                    1	POP BX 
 1E0C  5A                    1	POP DX 
 1E0D  59                    1	POP CX 
 1E0E  58                    1	POP AX 
 1E0F  83 3E 009E R 01		CMP WINNER,1 
 1E14  75 2D			JNZ PLAYER2_WON
				;(                                  
 1E16  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER1
				   DRAW_OBJECT TANKSIZE ,SI,280,100    ;DRAW TA
				NK 1 IF PLAYER 1 IS THE WINNER
 1E19  51                    1	   PUSH CX 
 1E1A  53                    1	   PUSH BX 
 1E1B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1E1D  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1E20  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 1E24  8A 3C                 1	   MOV BH, [SI] 
 1E26                        1	   ??00E7:;{ FOR(BP = 50; BD > 0; BP--) 
 1E26  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1E29  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 1E2D                        1	      ??00E6:;{ FOR(DX = 50; DX > 0; DX--) 
 1E2D  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1E2E  3A F8                 1	         CMP BH ,AL 
 1E30  74 04                 1	         JE ??00E8 
 1E32  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1E34  CD 10                 1	         INT     10H 
 1E36                        1	         ??00E8: 
 1E36  41                    1	         INC     CX         ; NEXT X POSITION 
 1E37  4F                    1	         DEC     DI 
 1E38  75 F3                 1	         JNZ     ??00E6 
 1E3A  42                    1	      INC     DX         ; NEXT Y POSITION 
 1E3B  4D                    1	      DEC     BP 
 1E3C  75 E8                 1	      JNZ     ??00E7 
 1E3E  5B                    1	      POP BX 
 1E3F  59                    1	      POP CX 
 1E40  E9 1F5E R		   JMP PRESS_TO_MENU
				;)
 1E43				PLAYER2_WON:
				;(
				   YWN 40,40,150,220,01              ;DRAW YOU 
				WON WITH BLUE COLOR -OVEERWRITE THE RED ONE- 
 1E43  50                    1	PUSH AX 
 1E44  51                    1	PUSH CX 
 1E45  52                    1	PUSH DX 
 1E46  53                    1	PUSH BX 
 1E47  56                    1	PUSH SI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-122


 1E48  57                    1	PUSH DI 
 1E49  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1E4C  B9 0096               1	    MOV CX,150 ; X = 400 
 1E4F  B0 01                 1	    MOV AL,01 
 1E51  B4 0C                 1	    MOV AH,0CH 
 1E53                        1	    ??00E9: 
 1E53                        1	        ??00EA: 
 1E53  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1E57  77 0D                 1	                JA ??00EB 
 1E59  CD 10                 1	                INT 10H 
 1E5B  83 C1 1E              1	                ADD CX, 40 - 10 
 1E5E  CD 10                 1	                INT 10H 
 1E60  83 E9 1E              1	                SUB CX,40 - 10 
 1E63  EB 0F 90              1	                JMP ??00EC 
 1E66                        1	                ??00EB: 
 1E66  83 C1 14              1	                ADD CX,40 / 2 
 1E69  83 E9 05              1	                SUB CX,5 
 1E6C  CD 10                 1	                INT 10H 
 1E6E  83 C1 05              1	                ADD CX,5 
 1E71  83 E9 14              1	                SUB CX,40 / 2 
 1E74                        1	         ??00EC: 
 1E74  83 C1 32              1	                ADD CX,40 + 10 
 1E77  CD 10                 1	                INT 10H 
 1E79  83 C1 1E              1	                ADD CX,40 -10 
 1E7C  CD 10                 1	                INT 10H 
 1E7E  83 C1 14              1	            ADD CX,20 
 1E81  CD 10                 1	            INT 10H 
 1E83  83 C1 1E              1	            ADD CX,40 -10 
 1E86  CD 10                 1	            INT 10H 
 1E88  83 C1 1E              1	            ADD CX,30 
 1E8B  CD 10                 1	            INT 10H 
 1E8D  83 C1 14              1	            ADD CX,40/2 
 1E90  83 E9 05              1	            SUB CX,5 
 1E93  CD 10                 1	            INT 10H 
 1E95  83 E9 14              1	            SUB CX,40/2 
 1E98  83 C1 05              1	            ADD CX,5 
 1E9B  83 C1 1E              1	            ADD CX,40 -10 
 1E9E  CD 10                 1	            INT 10H 
 1EA0  83 C1 14              1	            ADD CX,20 
 1EA3  CD 10                 1	            INT 10H 
 1EA5  83 C1 1E              1	            ADD CX,40 -10 
 1EA8  CD 10                 1	            INT 10H 
 1EAA  83 C1 14              1	                 ADD CX,20 
 1EAD  CD 10                 1	                 INT 10H 
 1EAF  83 C1 21              1	                 ADD CX,40 - 7 
 1EB2  CD 10                 1	                 INT 10H 
 1EB4  81 E9 0125            1	         SUB CX,6*40 + 53 
 1EB8  42                    1	        INC DX 
 1EB9  81 FA 0104            1	        CMP DX,220 + 40 
 1EBD  75 94                 1	        JNZ ??00EA 
 1EBF  BA 00DC               1	    MOV DX,220 
 1EC2  41                    1	    INC CX 
 1EC3  81 F9 00A0            1	    CMP CX,150 + 10 
 1EC7  75 8A                 1	    JNZ ??00E9 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-123


 1EC9  B9 0096               1	    MOV CX,150 
 1ECC  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1ECF                        1	    ??00ED: 
 1ECF                        1	        ??00EF: 
 1ECF  CD 10                 1	            INT 10H 
 1ED1  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1ED4  83 C1 32              1	            ADD CX, 40 + 10 
 1ED7  CD 10                 1	            INT 10H 
 1ED9  83 EA 1E              1	            SUB DX, 40 - 10 
 1EDC  CD 10                 1	            INT 10H 
 1EDE  83 C2 1E              1	            ADD DX,40 -10 
 1EE1  83 C1 32              1	            ADD CX,40 + 10 
 1EE4  CD 10                 1	            INT 10H 
 1EE6  83 C1 3C              1	            ADD CX,40 + 20 
 1EE9  CD 10                 1	            INT 10H 
 1EEB  83 C1 32              1	            ADD CX,40 + 10 
 1EEE  CD 10                 1	            INT 10H 
 1EF0  83 EA 1E              1	            SUB DX,40 -10 
 1EF3  CD 10                 1	            INT 10H 
 1EF5  81 E9 00D2            1	            SUB CX,4*40+50 
 1EF9  83 C2 14              1	            ADD DX,40/2 
 1EFC  41                    1	        INC CX 
 1EFD  81 F9 00BE            1	        CMP CX,150 + 40 
 1F01  75 CC                 1	        JNZ ??00EF 
 1F03  B9 0096               1	    MOV CX,150 
 1F06  42                    1	    INC DX 
 1F07  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1F0B  75 C2                 1	    JNZ ??00ED 
 1F0D  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1F10  BA 00DC               1	    MOV DX,220 
 1F13  BE 00DC               1	    MOV SI,220 
 1F16                        1	    ??00EE: 
 1F16                        1	        ??00F0: 
 1F16  CD 10                 1	            INT 10H 
 1F18  41                    1	            INC CX 
 1F19  42                    1	            INC DX 
 1F1A  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1F1E  75 F6                 1	        JNZ ??00F0 
 1F20  83 C6 01              1	            ADD SI,1 
 1F23  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1F26  8B D6                 1	            MOV DX,SI 
 1F28  81 FA 00EA            1	            CMP DX,220 + 14 
 1F2C  75 E8                 1	    JNZ ??00EE 
 1F2E  5F                    1	POP DI 
 1F2F  5E                    1	POP SI 
 1F30  5B                    1	POP BX 
 1F31  5A                    1	POP DX 
 1F32  59                    1	POP CX 
 1F33  58                    1	POP AX 
 1F34  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER2
				   DRAW_OBJECT TANKSIZE ,SI,280,100 
 1F37  51                    1	   PUSH CX 
 1F38  53                    1	   PUSH BX 
 1F39  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-124


				GISTER CONTAINING THE OFFSET 
 1F3B  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1F3E  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 1F42  8A 3C                 1	   MOV BH, [SI] 
 1F44                        1	   ??00F2:;{ FOR(BP = 50; BD > 0; BP--) 
 1F44  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1F47  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 1F4B                        1	      ??00F1:;{ FOR(DX = 50; DX > 0; DX--) 
 1F4B  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1F4C  3A F8                 1	         CMP BH ,AL 
 1F4E  74 04                 1	         JE ??00F3 
 1F50  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1F52  CD 10                 1	         INT     10H 
 1F54                        1	         ??00F3: 
 1F54  41                    1	         INC     CX         ; NEXT X POSITION 
 1F55  4F                    1	         DEC     DI 
 1F56  75 F3                 1	         JNZ     ??00F1 
 1F58  42                    1	      INC     DX         ; NEXT Y POSITION 
 1F59  4D                    1	      DEC     BP 
 1F5A  75 E8                 1	      JNZ     ??00F2 
 1F5C  5B                    1	      POP BX 
 1F5D  59                    1	      POP CX 
				;)
				 
 1F5E				PRESS_TO_MENU:
 1F5E  B4 00			      MOV AH,0                        ;GET KEY 
				PRESSED FOR ENDING THE GAME
 1F60  CD 16					INT 16H
				     
 1F62  B4 4C			      MOV    AH,4CH
 1F64  CD 21			      INT    21H
 1F66				PLAYER_LOST ENDP
				;----------------------------------------------
				----------------------------------------
				;   _____  _   _  _______  ______  _____    ___
				___             _____  ______
				;  |_   _|| \ | ||__    __||  ____||  __ \  |  
				____|   /\      / ____||  ____|
				;    | |  |  \| |   | |   | |__   | |__) | | |_
				_     /  \    | |     | |__ 
				;    | |  | . ` |   | |   |  __|  |  _  /  |  _
				_|   / /\ \   | |     |  __|
				;   _| |_ | |\  |   | |   | |____ | | \ \  | | 
				    / ____ \  | |____ | |____ 
				;  |_____||_| \_|   |_|   |______||_|  \_\ |_| 
				   /_/    \_\  \_____||______|
				;----------------------------------------------
				--------------------------------------
 1F66				  MAIN_MENU PROC NEAR
				   ;{ OPEN VIDEO MODE
 1F66  B8 4F02			         MOV    AX, 4F02H 
 1F69  BB 0105			         MOV    BX, 105H      
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-125


 1F6C  CD 10			         INT    10H   
				   ;}
				
				   
				   ;{DRAWWING THE INTERFACE
				         MENU
 1F6E  B8 4F02               1	                        MOV     AX, 4F02H 
 1F71  BB 0105               1	                        MOV     BX, 105H 
 1F74  CD 10                 1	                        INT     10H 
 1F76  B7 00                 1	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE 
 1F78  BA 0000               1	                    MOV     DX, 0     ; Y TO ST
				ART 
 1F7B  B9 0000               1	                    MOV     CX, 0 
 1F7E  B0 07                 1	                    MOV     AL, 7 
 1F80  B4 0C                 1	                    MOV     AH, 0CH 
 1F82                        1	                           ??00F4: 
 1F82                        1	                                          ??00F
				5: 
 1F82  CD 10                 1	                                               
				             INT     10H 
 1F84  41                    1	                                               
				             INC     CX 
 1F85  81 F9 0400            1	                                               
				             CMP     CX, 1024 
 1F89  75 F7                 1	                                               
				             JNZ     ??00F5 
 1F8B  B9 0000               1	                                    MOV     CX,
				0 
 1F8E  42                    1	                                    INC     DX 
				        ; NEXT Y 
 1F8F  81 FA 030C            1	                                    CMP     DX,
				 780 
 1F93  75 ED                 1	                                    JNZ     ??0
				0F4 
 1F95  B8 0600               1	                    MOV     AX, 0600H 
 1F98  B7 00                 1	                    MOV     BH, 0 
 1F9A  B9 0000               1	                    MOV     CX, 0 
 1F9D  BA 184F               1	                    MOV     DX, 184FH 
 1FA0  CD 10                 1	                    INT     10H 
 1FA2  B4 02                 1	                    MOV     AH, 2 
 1FA4  BA 1B34               1	                    MOV     DX, 1B34H 
 1FA7  CD 10                 1	                    INT     10H 
 1FA9  8D 36 00A4 R          1	                LEA     SI, MENUITEM1 
 1FAD                        1	                ??00F6: 
 1FAD  B4 09                 1	                        MOV     AH, 9 
 1FAF  B7 00                 1	                        MOV     BH, 0 
 1FB1  8A 04                 1	                        MOV     AL, [SI] 
 1FB3  B9 0001               1	                        MOV     CX, 1 
 1FB6  B3 16                 1	                        MOV     BL, 016H 
 1FB8  CD 10                 1	                        INT     10H 
 1FBA  FE C2                 1	                        INC     DL 
 1FBC  B4 02                 1	                        MOV     AH, 2 
 1FBE  CD 10                 1	                        INT     10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-126


 1FC0  46                    1	                        INC     SI 
 1FC1  8A 04                 1	                        MOV     AL, [SI] 
 1FC3  3C 24                 1	                        CMP     AL, '$' 
 1FC5  75 E6                 1	                        JNZ     ??00F6 
 1FC7  B4 02                 1	                        MOV     AH, 2 
 1FC9  BA 1D34               1	                        MOV     DX, 1D34H 
 1FCC  CD 10                 1	                        INT     10H 
 1FCE  8D 36 00BF R          1	                    LEA     SI, MENUITEM2 
 1FD2                        1	                    ??00F7: 
 1FD2  B4 09                 1	                        MOV     AH, 9 
 1FD4  B7 00                 1	                        MOV     BH, 0 
 1FD6  8A 04                 1	                        MOV     AL, [SI] 
 1FD8  B9 0001               1	                        MOV     CX, 1 
 1FDB  B3 16                 1	                        MOV     BL, 016H 
 1FDD  CD 10                 1	                        INT     10H 
 1FDF  FE C2                 1	                        INC     DL 
 1FE1  B4 02                 1	                        MOV     AH, 2 
 1FE3  CD 10                 1	                        INT     10H 
 1FE5  46                    1	                        INC     SI 
 1FE6  8A 04                 1	                        MOV     AL, [SI] 
 1FE8  3C 24                 1	                        CMP     AL, '$' 
 1FEA  75 E6                 1	                        JNZ     ??00F7 
 1FEC  B4 02                 1	                        MOV     AH, 2 
 1FEE  BA 1933               1	                        MOV     DX, 1933H 
 1FF1  CD 10                 1	                        INT     10H 
 1FF3  8D 36 00DA R          1	                    LEA     SI, MENUITEM3 
 1FF7                        1	                    ??00F8: 
 1FF7  B4 09                 1	                        MOV     AH, 9 
 1FF9  B7 00                 1	                        MOV     BH, 0 
 1FFB  8A 04                 1	                        MOV     AL, [SI] 
 1FFD  B9 0001               1	                        MOV     CX, 1 
 2000  B3 16                 1	                        MOV     BL, 016H 
 2002  CD 10                 1	                        INT     10H 
 2004  FE C2                 1	                        INC     DL 
 2006  B4 02                 1	                        MOV     AH, 2 
 2008  CD 10                 1	                        INT     10H 
 200A  46                    1	                        INC     SI 
 200B  8A 04                 1	                        MOV     AL, [SI] 
 200D  3C 24                 1	                        CMP     AL, '$' 
 200F  75 E6                 1	                        JNZ     ??00F8 
				         GHOSTWORD
 2011  BA 00FA               1	    MOV DX,250 ; Y = 250 
 2014  B9 0190               1	    MOV CX,400 ; X = 400 
 2017  B0 04                 1	    MOV AL,04 
 2019  B4 0C                 1	    MOV AH,0CH 
 201B                        1	    ??00F9: 
 201B                        1	        ??00FA: 
 201B  CD 10                 1	         INT 10H 
 201D  83 C1 1E              1	         ADD CX,30 
 2020  81 FA 010E            1	                CMP DX,270 
 2024  77 05                 1	                JA ??00FF 
 2026  CD 10                 1	                INT 10H 
 2028  EB 09 90              1	                JMP ??00FB 
 202B  81 FA 0122            1	                ??00FF: CMP DX,290 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-127


 202F  72 02                 1	                JB ??00FB 
 2031  CD 10                 1	                INT 10H 
 2033                        1	        ??00FB: 
 2033  83 C1 14              1	            ADD CX,20 
 2036  CD 10                 1	            INT 10H 
 2038  83 C1 1E              1	            ADD CX,30 
 203B  CD 10                 1	            INT 10H 
 203D  83 C1 14              1	            ADD CX,20 
 2040  CD 10                 1	            INT 10H 
 2042  83 C1 1E              1	            ADD CX,30 
 2045  CD 10                 1	            INT 10H 
 2047  83 C1 14              1	         ADD CX,20 
 204A  81 FA 0113            1	                CMP DX,275 
 204E  77 05                 1	                JA ??0100 
 2050  CD 10                 1	                INT 10H 
 2052  EB 09 90              1	                JMP ??00FC 
 2055                        1	                ??0100: 
 2055  83 C1 1E              1	                ADD CX,30 
 2058  CD 10                 1	                INT 10H 
 205A  83 E9 1E              1	                SUB CX,30 
 205D                        1	         ??00FC: 
 205D  83 C1 41              1	                ADD CX,65 
 2060  CD 10                 1	                INT 10H 
 2062  81 E9 00D7            1	        SUB CX,215 
 2066  42                    1	        INC DX 
 2067  81 FA 0136            1	        CMP DX,310 
 206B  75 AE                 1	        JNZ ??00FA 
 206D  BA 00FA               1	    MOV DX,250 
 2070  41                    1	    INC CX 
 2071  81 F9 019A            1	    CMP CX,410 
 2075  75 A4                 1	    JNZ ??00F9 
 2077  B9 01A4               1	        MOV CX,420 
 207A  BA 0118               1	        MOV DX,280 
 207D                        1	        ??0102: 
 207D                        1	            ??0101: 
 207D  CD 10                 1	                INT 10H 
 207F  41                    1	                INC CX 
 2080  81 F9 01B8            1	                CMP CX,440 
 2084  75 F7                 1	            JNZ ??0101 
 2086  B9 01A4               1	        MOV CX,420 
 2089  42                    1	        INC DX 
 208A  81 FA 0122            1	        CMP DX,290 
 208E  75 ED                 1	        JNZ ??0102 
 2090  B9 0190               1	    MOV CX,400 
 2093  BA 00FA               1	    MOV DX,250 
 2096                        1	    ??00FD: 
 2096                        1	        ??00FE: 
 2096  CD 10                 1	            INT 10H 
 2098  83 C2 32              1	            ADD DX,50 
 209B  CD 10                 1	            INT 10H 
 209D  83 EA 32              1	            SUB DX,50 
 20A0  83 C1 32              1	            ADD CX,50 
 20A3  83 C2 19              1	            ADD DX,25 
 20A6  CD 10                 1	            INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-128


 20A8  83 EA 19              1	            SUB DX,25 
 20AB  83 E9 32              1	            SUB CX,50 
 20AE  83 C1 64              1	            ADD CX,100 
 20B1  CD 10                 1	            INT 10H 
 20B3  83 C2 32              1	            ADD DX,50 
 20B6  CD 10                 1	            INT 10H 
 20B8  83 EA 32              1	            SUB DX,50 
 20BB  83 C1 32              1	            ADD CX,50 
 20BE  CD 10                 1	            INT 10H 
 20C0  83 C2 19              1	            ADD DX,25 
 20C3  CD 10                 1	            INT 10H 
 20C5  83 EA 19              1	            SUB DX,25 
 20C8  83 C2 32              1	            ADD DX,50 
 20CB  CD 10                 1	            INT 10H 
 20CD  83 EA 32              1	            SUB DX,50 
 20D0  83 C1 32              1	            ADD CX,50 
 20D3  CD 10                 1	            INT 10H 
 20D5  81 E9 00C8            1	        SUB CX,200 
 20D9  41                    1	        INC CX 
 20DA  81 F9 01B8            1	        CMP CX,440 
 20DE  75 B6                 1	        JNZ ??00FE 
 20E0  B9 0190               1	    MOV CX,400 
 20E3  42                    1	    INC DX 
 20E4  81 FA 0104            1	    CMP DX,260 
 20E8  75 AC                 1	    JNZ ??00FD 
				         BUSTERWORD
 20EA  BA 0140               1	    MOV DX,320 ; Y = 320 
 20ED  B9 017C               1	    MOV CX,380 ; X = 380 
 20F0  B0 01                 1	    MOV AL,01 
 20F2  B4 0C                 1	    MOV AH,0CH 
 20F4                        1	    ??0103: 
 20F4                        1	        ??0104: 
 20F4  CD 10                 1	         INT 10H 
 20F6  83 C1 1E              1	         ADD CX,30 
 20F9  81 FA 0159            1	                CMP DX,345 
 20FD  77 05                 1	                JA ??0109 
 20FF  CD 10                 1	                INT 10H 
 2101  EB 09 90              1	                JMP ??0105 
 2104  81 FA 0163            1	                ??0109: CMP DX,355 
 2108  72 02                 1	                JB ??0105 
 210A  CD 10                 1	                INT 10H 
 210C                        1	        ??0105: 
 210C  83 C1 14              1	            ADD CX,20 
 210F  CD 10                 1	            INT 10H 
 2111  83 C1 1E              1	            ADD CX,30 
 2114  CD 10                 1	            INT 10H 
 2116  83 C1 14              1	         ADD CX,20 
 2119  81 FA 0159            1	                CMP DX,345 
 211D  77 05                 1	                JA ??010A 
 211F  CD 10                 1	                INT 10H 
 2121  EB 09 90              1	                JMP ??0106 
 2124                        1	                ??010A: 
 2124  83 C1 1E              1	                ADD CX,30 
 2127  CD 10                 1	                INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-129


 2129  83 E9 1E              1	                SUB CX,30 
 212C                        1	         ??0106: 
 212C  83 C1 41              1	                ADD CX,65 
 212F  CD 10                 1	                INT 10H 
 2131  83 C1 23              1	            ADD CX,35 
 2134  CD 10                 1	            INT 10H 
 2136  83 C1 32              1	            ADD CX,50 
 2139  CD 10                 1	            INT 10H 
 213B  83 C1 1E              1	            ADD CX,30 
 213E  81 FA 0159            1	                    CMP DX,345 
 2142  77 05                 1	                    JA ??010C 
 2144  CD 10                 1	                    INT 10H 
 2146  EB 09 90              1	                    JMP ??010B 
 2149  81 FA 0163            1	                    ??010C: CMP DX,355 
 214D  72 02                 1	                    JB ??010B 
 214F  CD 10                 1	                    INT 10H 
 2151                        1	        ??010B: 
 2151  81 E9 0118            1	        SUB CX,280 
 2155  42                    1	        INC DX 
 2156  81 FA 017C            1	        CMP DX,380 
 215A  75 98                 1	        JNZ ??0104 
 215C  BA 0140               1	    MOV DX,320 
 215F  41                    1	    INC CX 
 2160  81 F9 0186            1	    CMP CX,390 
 2164  75 8E                 1	    JNZ ??0103 
 2166  BA 0140               1	    MOV DX,320 
 2169  B9 017C               1	    MOV CX,380 
 216C                        1	    ??0107: 
 216C                        1	        ??0108: 
 216C  CD 10                 1	            INT 10H 
 216E  83 C2 14              1	            ADD DX,20 
 2171  81 F9 019F            1	                CMP CX,415 
 2175  77 05                 1	                JA ??010F 
 2177  CD 10                 1	                INT 10H 
 2179  EB 11 90              1	                JMP ??0110 
 217C  81 FA 0159            1	                ??010F: CMP DX,345 
 2180  77 02                 1	                JA ??010E 
 2182  CD 10                 1	                INT 10H 
 2184  81 FA 0163            1	                ??010E: CMP DX,355 
 2188  72 02                 1	                JB ??0110 
 218A  CD 10                 1	                INT 10H 
 218C  83 C2 0A              1	                ??0110: ADD DX,10 
 218F  81 F9 019F            1	                CMP CX,415 
 2193  77 05                 1	                JA ??010D 
 2195  CD 10                 1	                INT 10H 
 2197  EB 11 90              1	                JMP ??0112 
 219A  81 FA 0159            1	                ??010D: CMP DX,345 
 219E  77 02                 1	                JA ??0111 
 21A0  CD 10                 1	                INT 10H 
 21A2  81 FA 0163            1	                ??0111: CMP DX,355 
 21A6  72 02                 1	                JB ??0112 
 21A8  CD 10                 1	                INT 10H 
 21AA                        1	                ??0112: 
 21AA  83 C2 14              1	                ADD DX,20 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-130


 21AD  CD 10                 1	                INT 10H 
 21AF  83 EA 32              1	        SUB DX,50 
 21B2  83 C1 32              1	            ADD CX,50 
 21B5  83 C2 32              1	            ADD DX,50 
 21B8  CD 10                 1	            INT 10H 
 21BA  83 E9 32              1	            SUB CX,50 
 21BD  83 EA 32              1	            SUB DX,50 
 21C0  83 C1 64              1	            ADD CX,100 
 21C3  CD 10                 1	            INT 10H 
 21C5  83 C2 19              1	            ADD DX,25 
 21C8  CD 10                 1	            INT 10H 
 21CA  83 EA 19              1	            SUB DX,25 
 21CD  83 C2 32              1	            ADD DX,50 
 21D0  CD 10                 1	            INT 10H 
 21D2  83 EA 32              1	            SUB DX,50 
 21D5  83 E9 64              1	            SUB CX,100 
 21D8  41                    1	    INC CX 
 21D9  81 F9 01A4            1	    CMP CX,420 
 21DD  75 8D                 1	    JNZ ??0108 
 21DF  B9 017C               1	    MOV CX,380 
 21E2  42                    1	    INC DX 
 21E3  81 FA 014A            1	    CMP DX,330 
 21E7  75 83                 1	    JNZ ??0107 
 21E9  BA 0140               1	    MOV DX,320 
 21EC  B9 0212               1	    MOV CX,530 
 21EF                        1	    ??0113: 
 21EF                        1	        ??0114: 
 21EF  CD 10                 1	        INT 10H 
 21F1  83 C1 32              1	            ADD CX,50 
 21F4  CD 10                 1	            INT 10H 
 21F6  83 C2 19              1	            ADD DX,25 
 21F9  CD 10                 1	            INT 10H 
 21FB  83 C2 19              1	            ADD DX,25 
 21FE  CD 10                 1	            INT 10H 
 2200  83 E9 32              1	            SUB CX,50 
 2203  83 EA 32              1	            SUB DX,50 
 2206  83 C1 64              1	            ADD CX,100 
 2209  CD 10                 1	            INT 10H 
 220B  83 C2 14              1	            ADD DX,20 
 220E  81 F9 0299            1	                CMP CX,665 
 2212  77 05                 1	                JA ??0115 
 2214  CD 10                 1	                INT 10H 
 2216  EB 11 90              1	                JMP ??0117 
 2219  81 FA 0159            1	                ??0115: CMP DX,345 
 221D  77 0A                 1	                JA ??0117 
 221F  CD 10                 1	                INT 10H 
 2221  81 FA 0163            1	                ??0116: CMP DX,355 
 2225  72 02                 1	                JB ??0117 
 2227  CD 10                 1	                INT 10H 
 2229  83 C2 0A              1	                ??0117: ADD DX,10 
 222C  81 F9 0299            1	                CMP CX,665 
 2230  77 05                 1	                JA ??0119 
 2232  CD 10                 1	                INT 10H 
 2234  EB 11 90              1	                JMP ??0118 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-131


 2237  81 FA 0159            1	                ??0119: CMP DX,345 
 223B  77 02                 1	                JA ??011A 
 223D  CD 10                 1	                INT 10H 
 223F  81 FA 0163            1	                ??011A: CMP DX,355 
 2243  72 02                 1	                JB ??0118 
 2245  CD 10                 1	                INT 10H 
 2247                        1	                ??0118: 
 2247  83 EA 1E              1	        SUB DX,30 
 224A  83 E9 64              1	        SUB CX,100 
 224D  41                    1	        INC CX 
 224E  81 F9 023A            1	        CMP CX,570 
 2252  75 9B                 1	        JNZ ??0114 
 2254  B9 0212               1	    MOV CX,530 
 2257  42                    1	    INC DX 
 2258  81 FA 014A            1	    CMP DX,330 
 225C  75 91                 1	    JNZ ??0113 
				   ;}
				
				   ;{DRAWING THE LOGO
 225E  BE 0000 E		         MOV SI , OFFSET LOGO
				         DRAW_OBJECT LOGOSIZE, SI, LOGO_X, LOGO
				_Y
 2261  51                    1	   PUSH CX 
 2262  53                    1	   PUSH BX 
 2263  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 2265  8B 16 00A2 R          1	   MOV     DX, LOGO_Y     ; Y TO START DRAWING 
				AT 
 2269  8B 2E 009C R          1	   MOV BP, LOGOSIZE 
 226D  8A 3C                 1	   MOV BH, [SI] 
 226F                        1	   ??011C:;{ FOR(BP = 50; BD > 0; BP--) 
 226F  8B 0E 00A0 R          1	      MOV     CX, LOGO_X    ; X TO START 
 2273  8B 3E 009C R          1	      MOV DI, LOGOSIZE 
 2277                        1	      ??011B:;{ FOR(DX = 50; DX > 0; DX--) 
 2277  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 2278  3A F8                 1	         CMP BH ,AL 
 227A  74 04                 1	         JE ??011D 
 227C  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 227E  CD 10                 1	         INT     10H 
 2280                        1	         ??011D: 
 2280  41                    1	         INC     CX         ; NEXT X POSITION 
 2281  4F                    1	         DEC     DI 
 2282  75 F3                 1	         JNZ     ??011B 
 2284  42                    1	      INC     DX         ; NEXT Y POSITION 
 2285  4D                    1	      DEC     BP 
 2286  75 E7                 1	      JNZ     ??011C 
 2288  5B                    1	      POP BX 
 2289  59                    1	      POP CX 
				   ;}
				
 228A				   MENUEE:
				   ;{ IF(USER PRESS ANY KEY)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Page     1-132


 228A  B4 01			         MOV    AH, 1
 228C  CD 16			         INT    16H
 228E  75 FA			         JNZ    MENUEE
				   ;}
				
				   ;{TAKE INPUT AND CLEAR KEYBOARD BUFFER
 2290  B4 00			         MOV     AH, 0
 2292  CD 16			         INT     16H 
 2294  E8 0300 R		         CALL    CLEARKEYBOARDBUFFER  
				   ;}
				   
				   ;{ IF(USER PRESS ECS)
 2297  3C 1B			         CMP     AL,1BH
 2299  75 0C			         JNZ     F1LABEL
				            ;{ THIS TO HANDLE FLICKERING
 229B  B8 4F02			                  MOV    AX, 4F02H 
 229E  BB 0100			                  MOV    BX, 100H
 22A1  CD 10			                  INT    10H
				            ;}
 22A3  B4 4C			         MOV    AH,4CH
 22A5  CD 21			         INT    21H
				   ;}
				
 22A7				   F1LABEL:
				   ;{ IF(USER PRESS F1)
				   ;     CMP    AH,3BH
 22A7  EB 01 90			         JMP    F2LABEL
				   ;}
 22AA				   F2LABEL:
				   ;{ IF(USER PRESS F2)
 22AA  80 FC 3C			         CMP    AH,3CH
 22AD  75 DB			         JNZ    MENUEE
				   ;}
 22AF  B4 2C			   MOV    AH, 2CH  ;GET SYSTEM TIME
 22B1  CD 21			   INT    21H
 22B3  88 36 008B R		   MOV    PREV_SYS_SECOND, DH  ;STORE THE CURRE
				NT SECOND OF THE SYSTEM
 22B7  C3			   RETN
 22B8				   MAIN_MENU ENDP
				   
				END MAIN 

Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-1


Macros:

		N a m e			Lines

BUSTERWORD . . . . . . . . . . .  	 194
DETECT_COLLISION . . . . . . . .  	  68
DRAW . . . . . . . . . . . . . .  	 208
DRAW_OBJECT  . . . . . . . . . .  	  27
GHOSTWORD  . . . . . . . . . . .  	 125
MENU . . . . . . . . . . . . . .  	  96
PRINTNUM . . . . . . . . . . . .  	  22
RANDOMIZE  . . . . . . . . . . .  	  29
WITHIN_BOUNDARIES  . . . . . . .  	  48
YWN  . . . . . . . . . . . . . .  	 142

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	00FA	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0040	PARA	STACK	'STACK'
MAIN_TEXT  . . . . . . . . . . .  	22B8	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

BACKTOMAINLOOP . . . . . . . . .  	L NEAR	040C	MAIN_TEXT
BACKTOMAINLOOP_1 . . . . . . . .  	L NEAR	0380	MAIN_TEXT
BITMAP_DOWNLEFT_PLAYER2  . . . .  	V BYTE	0000		External
BITMAP_DOWNRIGHT_PLAYER1 . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER1  . . . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_LEFT_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_RIGHT_PLAYER1 . . . . . .  	V BYTE	0000		External
BITMAP_UPLEFT_PLAYER2  . . . . .  	V BYTE	0000		External
BITMAP_UPRIGHT_PLAYER1 . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER1  . . . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER2  . . . . . . .  	V BYTE	0000		External
BUFFER . . . . . . . . . . . . .  	L BYTE	0008	_DATA
BULLETSIZE . . . . . . . . . . .  	L WORD	0096	_DATA
BULLETS_HIT  . . . . . . . . . .  	N PROC	1708	MAIN_TEXT	Length = 0081
BULLET_1_MODEL . . . . . . . . .  	V BYTE	0000		External
BULLET_1_MOTION_TYPE . . . . . .  	L WORD	003F	_DATA
BULLET_1_POSITION_X  . . . . . .  	L WORD	0039	_DATA
BULLET_1_POSITION_Y  . . . . . .  	L WORD	003B	_DATA
BULLET_1_SPEED . . . . . . . . .  	L WORD	0041	_DATA
BULLET_1_SPEED_POWER_NUM . . . .  	L WORD	0043	_DATA
BULLET_1_START_POSITION_X  . . .  	L WORD	0015	_DATA
BULLET_1_START_POSITION_Y  . . .  	L WORD	0017	_DATA
BULLET_1_STATUS  . . . . . . . .  	L WORD	003D	_DATA
BULLET_2_MODEL . . . . . . . . .  	V BYTE	0000		External
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-2


BULLET_2_MOTION_TYPE . . . . . .  	L WORD	004B	_DATA
BULLET_2_POSITION_X  . . . . . .  	L WORD	0045	_DATA
BULLET_2_POSITION_Y  . . . . . .  	L WORD	0047	_DATA
BULLET_2_SPEED . . . . . . . . .  	L WORD	004D	_DATA
BULLET_2_SPEED_POWER_NUM . . . .  	L WORD	004F	_DATA
BULLET_2_START_POSITION_X  . . .  	L WORD	0035	_DATA
BULLET_2_START_POSITION_Y  . . .  	L WORD	0037	_DATA
BULLET_2_STATUS  . . . . . . . .  	L WORD	0049	_DATA
BULLET_SPEED_POWERUPS  . . . . .  	L WORD	0051	_DATA

CHECKKEY . . . . . . . . . . . .  	L NEAR	0168	MAIN_TEXT
CHECK_HIT_BUL1_GHOST1  . . . . .  	N PROC	11E2	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST2  . . . . .  	N PROC	12A5	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST3  . . . . .  	N PROC	1368	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_TANK2 . . . . . .  	N PROC	114E	MAIN_TEXT	Length = 0094
CHECK_HIT_BUL2_GHOST1  . . . . .  	N PROC	14BF	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST2  . . . . .  	N PROC	1582	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST3  . . . . .  	N PROC	1645	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_TANK1 . . . . . .  	N PROC	142B	MAIN_TEXT	Length = 0094
CHECK_HIT_GHOST1_TANK1 . . . . .  	N PROC	1789	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST1_TANK2 . . . . .  	N PROC	194B	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK1 . . . . .  	N PROC	181F	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK2 . . . . .  	N PROC	19E1	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK1 . . . . .  	N PROC	18B5	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK2 . . . . .  	N PROC	1A77	MAIN_TEXT	Length = 0096
CLEARKEYBOARDBUFFER  . . . . . .  	N PROC	0300	MAIN_TEXT	Length = 0018
CN . . . . . . . . . . . . . . .  	L NEAR	024E	MAIN_TEXT
COLDD  . . . . . . . . . . . . .  	L NEAR	021D	MAIN_TEXT
COLRAW . . . . . . . . . . . . .  	L NEAR	0236	MAIN_TEXT

DECREASE_HP1_G1  . . . . . . . .  	L NEAR	1815	MAIN_TEXT
DECREASE_HP1_G2  . . . . . . . .  	L NEAR	18AB	MAIN_TEXT
DECREASE_HP1_G3  . . . . . . . .  	L NEAR	1941	MAIN_TEXT
DECREASE_HP2_G1  . . . . . . . .  	L NEAR	19D7	MAIN_TEXT
DECREASE_HP2_G2  . . . . . . . .  	L NEAR	1A6D	MAIN_TEXT
DECREASE_HP2_G3  . . . . . . . .  	L NEAR	1B03	MAIN_TEXT
DMG_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
DMG_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
DOWN1  . . . . . . . . . . . . .  	L NEAR	04BC	MAIN_TEXT
DOWN2  . . . . . . . . . . . . .  	L NEAR	05C3	MAIN_TEXT
DOWNB  . . . . . . . . . . . . .  	L NEAR	0FEA	MAIN_TEXT
DOWNB2 . . . . . . . . . . . . .  	L NEAR	1145	MAIN_TEXT
DOWNLEFT . . . . . . . . . . . .  	L NEAR	059E	MAIN_TEXT
DOWNLEFTB  . . . . . . . . . . .  	L NEAR	1120	MAIN_TEXT
DOWNLEFT_GHOST1  . . . . . . . .  	L NEAR	0B76	MAIN_TEXT
DOWNLEFT_GHOST2  . . . . . . . .  	L NEAR	0C95	MAIN_TEXT
DOWNLEFT_GHOST3  . . . . . . . .  	L NEAR	0DB6	MAIN_TEXT
DOWNRIGHT  . . . . . . . . . . .  	L NEAR	049B	MAIN_TEXT
DOWNRIGHTB . . . . . . . . . . .  	L NEAR	0FC5	MAIN_TEXT
DOWNRIGHT_GHOST1 . . . . . . . .  	L NEAR	0B62	MAIN_TEXT
DOWNRIGHT_GHOST2 . . . . . . . .  	L NEAR	0C81	MAIN_TEXT
DOWNRIGHT_GHOST3 . . . . . . . .  	L NEAR	0DA2	MAIN_TEXT
DOWN_LEFT  . . . . . . . . . . .  	L NEAR	1134	MAIN_TEXT
DOWN_LEFT_MOVEMENT . . . . . . .  	L NEAR	1137	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-3


DOWN_RIGHT_MOVEMENT  . . . . . .  	L NEAR	0FDC	MAIN_TEXT
DOWN_RIGHT_SPEED . . . . . . . .  	L NEAR	0FD9	MAIN_TEXT
DRAW1  . . . . . . . . . . . . .  	L NEAR	0B29	MAIN_TEXT
DRAW2  . . . . . . . . . . . . .  	L NEAR	0C48	MAIN_TEXT
DRAW3  . . . . . . . . . . . . .  	L NEAR	0D69	MAIN_TEXT
DRAWTANK . . . . . . . . . . . .  	L NEAR	04E0	MAIN_TEXT
DRAWTANK2  . . . . . . . . . . .  	L NEAR	05E7	MAIN_TEXT
DRAW_BULLET_1  . . . . . . . . .  	N PROC	0EC5	MAIN_TEXT	Length = 00B1
DRAW_BULLET_2  . . . . . . . . .  	N PROC	1024	MAIN_TEXT	Length = 00AD
DRAW_CASE  . . . . . . . . . . .  	L NEAR	018B	MAIN_TEXT
DRAW_GHOST1  . . . . . . . . . .  	N PROC	0A96	MAIN_TEXT	Length = 00C1
DRAW_GHOST2  . . . . . . . . . .  	N PROC	0BB5	MAIN_TEXT	Length = 00C1
DRAW_GHOST3  . . . . . . . . . .  	N PROC	0CD6	MAIN_TEXT	Length = 00C1
DRAW_HEALTH_BAR_1  . . . . . . .  	N PROC	1B0D	MAIN_TEXT	Length = 0082
DRAW_HEALTH_BAR_2  . . . . . . .  	N PROC	1B8F	MAIN_TEXT	Length = 0085
DRAW_PORTALS . . . . . . . . . .  	N PROC	0DF7	MAIN_TEXT	Length = 009D
DRAW_RED . . . . . . . . . . . .  	L NEAR	1BD5	MAIN_TEXT
DRAW_TANK1 . . . . . . . . . . .  	N PROC	0411	MAIN_TEXT	Length = 00FD
DRAW_TANK2 . . . . . . . . . . .  	N PROC	050E	MAIN_TEXT	Length = 0107
DRW_PRUP_BAR_1 . . . . . . . . .  	N PROC	1C14	MAIN_TEXT	Length = 0081
DRW_PRUP_BAR_2 . . . . . . . . .  	N PROC	1C95	MAIN_TEXT	Length = 0081

ENDDRAW_GHOST1 . . . . . . . . .  	L NEAR	0B52	MAIN_TEXT
ENDDRAW_GHOST11  . . . . . . . .  	L NEAR	0B10	MAIN_TEXT
ENDDRAW_GHOST2 . . . . . . . . .  	L NEAR	0C71	MAIN_TEXT
ENDDRAW_GHOST21  . . . . . . . .  	L NEAR	0C2F	MAIN_TEXT
ENDDRAW_GHOST3 . . . . . . . . .  	L NEAR	0D92	MAIN_TEXT
ENDDRAW_GHOST31  . . . . . . . .  	L NEAR	0D50	MAIN_TEXT
ENDMOVE_GHOST1 . . . . . . . . .  	L NEAR	0BB0	MAIN_TEXT
ENDMOVE_GHOST2 . . . . . . . . .  	L NEAR	0CD1	MAIN_TEXT
ENDMOVE_GHOST3 . . . . . . . . .  	L NEAR	0DF2	MAIN_TEXT
ENDPROGRAM . . . . . . . . . . .  	L NEAR	016E	MAIN_TEXT
ENDPROGRAM1  . . . . . . . . . .  	L NEAR	00C7	MAIN_TEXT
EXISTS_GHOST1  . . . . . . . . .  	L WORD	0057	_DATA
EXISTS_GHOST2  . . . . . . . . .  	L WORD	0067	_DATA
EXISTS_GHOST3  . . . . . . . . .  	L WORD	0077	_DATA
EXITPROG . . . . . . . . . . . .  	L NEAR	03F7	MAIN_TEXT

F1LABEL  . . . . . . . . . . . .  	L NEAR	22A7	MAIN_TEXT
F2LABEL  . . . . . . . . . . . .  	L NEAR	22AA	MAIN_TEXT
FIREBULLET1  . . . . . . . . . .  	L NEAR	0383	MAIN_TEXT
FIRE_BULLET2 . . . . . . . . . .  	N PROC	0FF3	MAIN_TEXT	Length = 0031
FIRE_BULLET_1  . . . . . . . . .  	N PROC	0E94	MAIN_TEXT	Length = 0031
FIRE_BULLET_2  . . . . . . . . .  	L NEAR	03ED	MAIN_TEXT

GHOST1_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_LIVES . . . . . . . . . .  	L NEAR	12A0	MAIN_TEXT
GHOST1_LIVES2  . . . . . . . . .  	L NEAR	157D	MAIN_TEXT
GHOST2_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_LIVES . . . . . . . . . .  	L NEAR	1363	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-4


GHOST2_LIVES2  . . . . . . . . .  	L NEAR	1640	MAIN_TEXT
GHOST3_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_LIVES . . . . . . . . . .  	L NEAR	1426	MAIN_TEXT
GHOST3_LIVES2  . . . . . . . . .  	L NEAR	1703	MAIN_TEXT
GHOSTSIZE  . . . . . . . . . . .  	L WORD	0094	_DATA

HEARTSIZE  . . . . . . . . . . .  	L WORD	0098	_DATA
HEARTS_1_START_POSITION_X  . . .  	L WORD	0025	_DATA
HEARTS_1_START_POSITION_Y  . . .  	L WORD	0027	_DATA
HEARTS_2_START_POSITION_X  . . .  	L WORD	0029	_DATA
HEARTS_2_START_POSITION_Y  . . .  	L WORD	002B	_DATA
HP2_LIMIT1 . . . . . . . . . . .  	L NEAR	153E	MAIN_TEXT
HP2_LIMIT2 . . . . . . . . . . .  	L NEAR	1601	MAIN_TEXT
HP2_LIMIT3 . . . . . . . . . . .  	L NEAR	16C4	MAIN_TEXT
HP_LIMIT1  . . . . . . . . . . .  	L NEAR	1261	MAIN_TEXT
HP_LIMIT2  . . . . . . . . . . .  	L NEAR	1324	MAIN_TEXT
HP_LIMIT3  . . . . . . . . . . .  	L NEAR	13E7	MAIN_TEXT

INCREASE2_DAMAGE1  . . . . . . .  	L NEAR	1556	MAIN_TEXT
INCREASE2_DAMAGE2  . . . . . . .  	L NEAR	1619	MAIN_TEXT
INCREASE2_DAMAGE3  . . . . . . .  	L NEAR	16DC	MAIN_TEXT
INCREASE_DAMAGE1 . . . . . . . .  	L NEAR	1279	MAIN_TEXT
INCREASE_DAMAGE2 . . . . . . . .  	L NEAR	133C	MAIN_TEXT
INCREASE_DAMAGE3 . . . . . . . .  	L NEAR	13FF	MAIN_TEXT

LEFT . . . . . . . . . . . . . .  	L NEAR	0569	MAIN_TEXT
LEFTB  . . . . . . . . . . . . .  	L NEAR	1112	MAIN_TEXT
LEFTBOUND_X  . . . . . . . . . .  	L WORD	0004	_DATA
LOGO . . . . . . . . . . . . . .  	V BYTE	0000		External
LOGOSIZE . . . . . . . . . . . .  	L WORD	009C	_DATA
LOGO_X . . . . . . . . . . . . .  	L WORD	00A0	_DATA
LOGO_Y . . . . . . . . . . . . .  	L WORD	00A2	_DATA
LOSER1 . . . . . . . . . . . . .  	L NEAR	14B1	MAIN_TEXT
LOSER2 . . . . . . . . . . . . .  	L NEAR	11D4	MAIN_TEXT
LOWER4MACRO  . . . . . . . . . .  	L WORD	008C	_DATA
LOWERBOUND_Y . . . . . . . . . .  	L WORD	0002	_DATA

MAIN . . . . . . . . . . . . . .  	F PROC	0000	MAIN_TEXT	Length = 0300
MAINLOOP . . . . . . . . . . . .  	L NEAR	0012	MAIN_TEXT
MAIN_MENU  . . . . . . . . . . .  	N PROC	1F66	MAIN_TEXT	Length = 0352
MENUEE . . . . . . . . . . . . .  	L NEAR	228A	MAIN_TEXT
MENUITEM1  . . . . . . . . . . .  	L BYTE	00A4	_DATA
MENUITEM2  . . . . . . . . . . .  	L BYTE	00BF	_DATA
MENUITEM3  . . . . . . . . . . .  	L BYTE	00DA	_DATA
MOTION_GHOST1  . . . . . . . . .  	L WORD	0059	_DATA
MOTION_GHOST2  . . . . . . . . .  	L WORD	0069	_DATA
MOTION_GHOST3  . . . . . . . . .  	L WORD	0079	_DATA
MOVEDOWN1  . . . . . . . . . . .  	L NEAR	033E	MAIN_TEXT
MOVEDOWN2  . . . . . . . . . . .  	L NEAR	03A8	MAIN_TEXT
MOVEUP1  . . . . . . . . . . . .  	L NEAR	0323	MAIN_TEXT
MOVEUP2  . . . . . . . . . . . .  	L NEAR	038D	MAIN_TEXT
MOVE_BULLET_1  . . . . . . . . .  	N PROC	0F76	MAIN_TEXT	Length = 007D
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-5


MOVE_BULLET_2  . . . . . . . . .  	N PROC	10D1	MAIN_TEXT	Length = 007D
MOVE_GHOST1  . . . . . . . . . .  	N PROC	0B57	MAIN_TEXT	Length = 005E
MOVE_GHOST2  . . . . . . . . . .  	N PROC	0C76	MAIN_TEXT	Length = 0060
MOVE_GHOST3  . . . . . . . . . .  	N PROC	0D97	MAIN_TEXT	Length = 0060
MOV_DOWNLEFT2  . . . . . . . . .  	L NEAR	07E2	MAIN_TEXT
MOV_DOWNRIGHT3 . . . . . . . . .  	L NEAR	0966	MAIN_TEXT
MOV_UPLEFT2  . . . . . . . . . .  	L NEAR	07E8	MAIN_TEXT
MOV_UPRIGHT3 . . . . . . . . . .  	L NEAR	096C	MAIN_TEXT

NOGHOST1 . . . . . . . . . . . .  	L NEAR	0E2B	MAIN_TEXT
NOGHOST2 . . . . . . . . . . . .  	L NEAR	0E5F	MAIN_TEXT
NOGHOST3 . . . . . . . . . . . .  	L NEAR	0E93	MAIN_TEXT
NOGHOSTWAVE  . . . . . . . . . .  	L NEAR	007B	MAIN_TEXT
NOHIT1 . . . . . . . . . . . . .  	L NEAR	11DD	MAIN_TEXT
NOHIT2 . . . . . . . . . . . . .  	L NEAR	14BA	MAIN_TEXT
NOTIMECHANGE . . . . . . . . . .  	L NEAR	007B	MAIN_TEXT
NOT_HITTING  . . . . . . . . . .  	L NEAR	1784	MAIN_TEXT
NO_DMG_PWRUP_1 . . . . . . . . .  	L NEAR	1C90	MAIN_TEXT
NO_DMG_PWRUP_2 . . . . . . . . .  	L NEAR	1D11	MAIN_TEXT
NO_SPD_PWRUP_1 . . . . . . . . .  	L NEAR	1C5D	MAIN_TEXT
NO_SPD_PWRUP_2 . . . . . . . . .  	L NEAR	1CDE	MAIN_TEXT

ORIENTATION_PLAYER1  . . . . . .  	L WORD	0013	_DATA
ORIENTATION_PLAYER2  . . . . . .  	L WORD	0023	_DATA
ORIENT_DOWN1 . . . . . . . . . .  	L NEAR	0370	MAIN_TEXT
ORIENT_DOWN2 . . . . . . . . . .  	L NEAR	03DA	MAIN_TEXT
ORIENT_UP1 . . . . . . . . . . .  	L NEAR	035D	MAIN_TEXT
ORIENT_UP2 . . . . . . . . . . .  	L NEAR	03C7	MAIN_TEXT

PLAYER1_WON  . . . . . . . . . .  	L NEAR	0182	MAIN_TEXT
PLAYER2_WON  . . . . . . . . . .  	L NEAR	1E43	MAIN_TEXT
PLAYER_LOST  . . . . . . . . . .  	N PROC	1D16	MAIN_TEXT	Length = 0250
PORTAL . . . . . . . . . . . . .  	V BYTE	0000		External
PORTAL_SIZE  . . . . . . . . . .  	L WORD	0092	_DATA
POWERUP_GHOST1 . . . . . . . . .  	L WORD	005B	_DATA
POWERUP_GHOST2 . . . . . . . . .  	L WORD	006B	_DATA
POWERUP_GHOST3 . . . . . . . . .  	L WORD	007B	_DATA
PRESS_TO_MENU  . . . . . . . . .  	L NEAR	1F5E	MAIN_TEXT
PREV_SYS_SECOND  . . . . . . . .  	L BYTE	008B	_DATA
PRUP_ICON_SIZE . . . . . . . . .  	L WORD	009A	_DATA
PWRUP_BAR_1_START_POSITION_X . .  	L WORD	002D	_DATA
PWRUP_BAR_1_START_POSITION_Y . .  	L WORD	002F	_DATA
PWRUP_BAR_2_START_POSITION_X . .  	L WORD	0031	_DATA
PWRUP_BAR_2_START_POSITION_Y . .  	L WORD	0033	_DATA

RANDOMIZE_GHOST1 . . . . . . . .  	N PROC	0615	MAIN_TEXT	Length = 0179
RANDOMIZE_GHOST2 . . . . . . . .  	N PROC	078E	MAIN_TEXT	Length = 0184
RANDOMIZE_GHOST3 . . . . . . . .  	N PROC	0912	MAIN_TEXT	Length = 0184
RANDSEED . . . . . . . . . . . .  	L WORD	0089	_DATA
RED_HEART  . . . . . . . . . . .  	V BYTE	0000		External
RED_PLAYER1  . . . . . . . . . .  	L NEAR	1B1B	MAIN_TEXT
RED_PLAYER2  . . . . . . . . . .  	L NEAR	1BD9	MAIN_TEXT
RESULT . . . . . . . . . . . . .  	L NEAR	0188	MAIN_TEXT
RETNURN_DATA2  . . . . . . . . .  	L NEAR	1C0F	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-6


RETNURN_HEALTH1  . . . . . . . .  	L NEAR	1B8A	MAIN_TEXT
RETN_DRW_BUL_1 . . . . . . . . .  	L NEAR	0F71	MAIN_TEXT
RETN_DRW_BUL_11  . . . . . . . .  	L NEAR	0F3F	MAIN_TEXT
RETN_DRW_BUL_2 . . . . . . . . .  	L NEAR	10CC	MAIN_TEXT
RETN_DRW_BUL_22  . . . . . . . .  	L NEAR	109E	MAIN_TEXT
RETN_FIRE_BUL_1  . . . . . . . .  	L NEAR	0EC0	MAIN_TEXT
RETN_FIRE_BUL_2  . . . . . . . .  	L NEAR	101F	MAIN_TEXT
RETN_MOV_BUL_1 . . . . . . . . .  	L NEAR	0FEE	MAIN_TEXT
RETN_MOV_BUL_2 . . . . . . . . .  	L NEAR	1149	MAIN_TEXT
RIGHT  . . . . . . . . . . . . .  	L NEAR	046A	MAIN_TEXT
RIGHTB . . . . . . . . . . . . .  	L NEAR	0FB7	MAIN_TEXT
RIGHTBOUND_X . . . . . . . . . .  	L WORD	0006	_DATA

SKIP1  . . . . . . . . . . . . .  	L NEAR	00CA	MAIN_TEXT
SKIP_BUL1_CHECKS1  . . . . . . .  	L NEAR	00F2	MAIN_TEXT
SKIP_BUL1_CHECKS2  . . . . . . .  	L NEAR	00FC	MAIN_TEXT
SKIP_BUL1_CHECKS3  . . . . . . .  	L NEAR	0106	MAIN_TEXT
SKIP_BUL1_CHECKS4  . . . . . . .  	L NEAR	0110	MAIN_TEXT
SKIP_BUL2_CHECKS1  . . . . . . .  	L NEAR	011A	MAIN_TEXT
SKIP_BUL2_CHECKS2  . . . . . . .  	L NEAR	0124	MAIN_TEXT
SKIP_BUL2_CHECKS3  . . . . . . .  	L NEAR	012E	MAIN_TEXT
SKIP_BUL2_CHECKS4  . . . . . . .  	L NEAR	0138	MAIN_TEXT
SKIP_GHOST1_CHECK1 . . . . . . .  	L NEAR	0092	MAIN_TEXT
SKIP_GHOST1_CHECK2 . . . . . . .  	L NEAR	00B0	MAIN_TEXT
SKIP_GHOST2_CHECK1 . . . . . . .  	L NEAR	009C	MAIN_TEXT
SKIP_GHOST2_CHECK2 . . . . . . .  	L NEAR	00BA	MAIN_TEXT
SKIP_GHOST3_CHECK1 . . . . . . .  	L NEAR	00A6	MAIN_TEXT
SKIP_GHOST3_CHECK3 . . . . . . .  	L NEAR	00C4	MAIN_TEXT
SKIP_HITTING_CHECK . . . . . . .  	L NEAR	014F	MAIN_TEXT
SOUND  . . . . . . . . . . . . .  	L FAR 	0000		External
SPD_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_LOOP_1  . . . . . . . .  	L NEAR	1C2A	MAIN_TEXT
SPD_PRUP_LOOP_2  . . . . . . . .  	L NEAR	1CAB	MAIN_TEXT
SPEED2_INCREASE1 . . . . . . . .  	L NEAR	154D	MAIN_TEXT
SPEED2_INCREASE2 . . . . . . . .  	L NEAR	1610	MAIN_TEXT
SPEED2_INCREASE3 . . . . . . . .  	L NEAR	16D3	MAIN_TEXT
SPEED2_LIMIT1  . . . . . . . . .  	L NEAR	155F	MAIN_TEXT
SPEED2_LIMIT2  . . . . . . . . .  	L NEAR	1622	MAIN_TEXT
SPEED2_LIMIT3  . . . . . . . . .  	L NEAR	16E5	MAIN_TEXT
SPEED_INCREASE1  . . . . . . . .  	L NEAR	1270	MAIN_TEXT
SPEED_INCREASE2  . . . . . . . .  	L NEAR	1333	MAIN_TEXT
SPEED_INCREASE3  . . . . . . . .  	L NEAR	13F6	MAIN_TEXT
SPEED_LIMIT1 . . . . . . . . . .  	L NEAR	1282	MAIN_TEXT
SPEED_LIMIT2 . . . . . . . . . .  	L NEAR	1345	MAIN_TEXT
SPEED_LIMIT3 . . . . . . . . . .  	L NEAR	1408	MAIN_TEXT
STARTPOS_X_GHOST1  . . . . . . .  	L WORD	0053	_DATA
STARTPOS_X_GHOST2  . . . . . . .  	L WORD	0063	_DATA
STARTPOS_X_GHOST3  . . . . . . .  	L WORD	0073	_DATA
STARTPOS_X_PLAYER1 . . . . . . .  	L WORD	0009	_DATA
STARTPOS_X_PLAYER2 . . . . . . .  	L WORD	0019	_DATA
STARTPOS_X_PORTAL1 . . . . . . .  	L WORD	005D	_DATA
STARTPOS_X_PORTAL2 . . . . . . .  	L WORD	006D	_DATA
STARTPOS_X_PORTAL3 . . . . . . .  	L WORD	007D	_DATA
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-7


STARTPOS_Y_GHOST1  . . . . . . .  	L WORD	0055	_DATA
STARTPOS_Y_GHOST2  . . . . . . .  	L WORD	0065	_DATA
STARTPOS_Y_GHOST3  . . . . . . .  	L WORD	0075	_DATA
STARTPOS_Y_PLAYER1 . . . . . . .  	L WORD	000B	_DATA
STARTPOS_Y_PLAYER2 . . . . . . .  	L WORD	001B	_DATA
STARTPOS_Y_PORTAL1 . . . . . . .  	L WORD	005F	_DATA
STARTPOS_Y_PORTAL2 . . . . . . .  	L WORD	006F	_DATA
STARTPOS_Y_PORTAL3 . . . . . . .  	L WORD	007F	_DATA

T1_KILL_G1 . . . . . . . . . . .  	L NEAR	1294	MAIN_TEXT
T1_KILL_G2 . . . . . . . . . . .  	L NEAR	1357	MAIN_TEXT
T1_KILL_G3 . . . . . . . . . . .  	L NEAR	141A	MAIN_TEXT
T2_KILL_G1 . . . . . . . . . . .  	L NEAR	1571	MAIN_TEXT
T2_KILL_G2 . . . . . . . . . . .  	L NEAR	1634	MAIN_TEXT
T2_KILL_G3 . . . . . . . . . . .  	L NEAR	16F7	MAIN_TEXT
TANK1_SAFE1  . . . . . . . . . .  	L NEAR	181A	MAIN_TEXT
TANK1_SAFE2  . . . . . . . . . .  	L NEAR	18B0	MAIN_TEXT
TANK1_SAFE3  . . . . . . . . . .  	L NEAR	1946	MAIN_TEXT
TANK2_SAFE1  . . . . . . . . . .  	L NEAR	19DC	MAIN_TEXT
TANK2_SAFE2  . . . . . . . . . .  	L NEAR	1A72	MAIN_TEXT
TANK2_SAFE3  . . . . . . . . . .  	L NEAR	1B08	MAIN_TEXT
TANKSIZE . . . . . . . . . . . .  	L WORD	0090	_DATA
TANK_DMG_1 . . . . . . . . . . .  	L WORD	0011	_DATA
TANK_DMG_2 . . . . . . . . . . .  	L WORD	0021	_DATA
TANK_HP_1  . . . . . . . . . . .  	L WORD	000D	_DATA
TANK_HP_2  . . . . . . . . . . .  	L WORD	001D	_DATA
TANK_SPEED_1 . . . . . . . . . .  	L WORD	000F	_DATA
TANK_SPEED_2 . . . . . . . . . .  	L WORD	001F	_DATA
TIME . . . . . . . . . . . . . .  	L WORD	0083	_DATA
TIME_DECIMAL . . . . . . . . . .  	L BYTE	0085	_DATA	Length = 0004
TYPE_GHOST1  . . . . . . . . . .  	L WORD	0061	_DATA
TYPE_GHOST2  . . . . . . . . . .  	L WORD	0071	_DATA
TYPE_GHOST3  . . . . . . . . . .  	L WORD	0081	_DATA

UPLEFT . . . . . . . . . . . . .  	L NEAR	0544	MAIN_TEXT
UPLEFTB  . . . . . . . . . . . .  	L NEAR	10ED	MAIN_TEXT
UPLEFT_GHOST1  . . . . . . . . .  	L NEAR	0B9E	MAIN_TEXT
UPLEFT_GHOST2  . . . . . . . . .  	L NEAR	0CBD	MAIN_TEXT
UPLEFT_GHOST3  . . . . . . . . .  	L NEAR	0DDE	MAIN_TEXT
UPPER4MACRO  . . . . . . . . . .  	L WORD	008E	_DATA
UPPERBOUND_Y . . . . . . . . . .  	L WORD	0000	_DATA
UPRIGHT  . . . . . . . . . . . .  	L NEAR	0447	MAIN_TEXT
UPRIGHTB . . . . . . . . . . . .  	L NEAR	0F92	MAIN_TEXT
UPRIGHT_GHOST1 . . . . . . . . .  	L NEAR	0B8A	MAIN_TEXT
UPRIGHT_GHOST2 . . . . . . . . .  	L NEAR	0CA9	MAIN_TEXT
UPRIGHT_GHOST3 . . . . . . . . .  	L NEAR	0DCA	MAIN_TEXT
UP_LEFT  . . . . . . . . . . . .  	L NEAR	1101	MAIN_TEXT
UP_LEFT_MOVEMENT . . . . . . . .  	L NEAR	1104	MAIN_TEXT
UP_RIGHT_MOVEMENT  . . . . . . .  	L NEAR	0FA9	MAIN_TEXT
UP_RIGHT_SPEED . . . . . . . . .  	L NEAR	0FA6	MAIN_TEXT
USERINPUT  . . . . . . . . . . .  	N PROC	0318	MAIN_TEXT	Length = 00F9

WHITE_HEART  . . . . . . . . . .  	V BYTE	0000		External
WHITE_PLAYER1  . . . . . . . . .  	L NEAR	1B57	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-8


WHITE_PLAYER2  . . . . . . . . .  	L NEAR	1BA2	MAIN_TEXT
WINNER . . . . . . . . . . . . .  	L WORD	009E	_DATA

??0000 . . . . . . . . . . . . .  	L NEAR	0031	MAIN_TEXT
??0001 . . . . . . . . . . . . .  	L NEAR	019B	MAIN_TEXT
??0002 . . . . . . . . . . . . .  	L NEAR	019B	MAIN_TEXT
??0004 . . . . . . . . . . . . .  	L NEAR	01A2	MAIN_TEXT
??0005 . . . . . . . . . . . . .  	L NEAR	01BC	MAIN_TEXT
??0006 . . . . . . . . . . . . .  	L NEAR	0201	MAIN_TEXT
??0007 . . . . . . . . . . . . .  	L NEAR	01BC	MAIN_TEXT
??0008 . . . . . . . . . . . . .  	L NEAR	0201	MAIN_TEXT
??0009 . . . . . . . . . . . . .  	L NEAR	01E0	MAIN_TEXT
??000A . . . . . . . . . . . . .  	L NEAR	01E0	MAIN_TEXT
??000C . . . . . . . . . . . . .  	L NEAR	021D	MAIN_TEXT
??000D . . . . . . . . . . . . .  	L NEAR	0246	MAIN_TEXT
??000E . . . . . . . . . . . . .  	L NEAR	0236	MAIN_TEXT
??000F . . . . . . . . . . . . .  	L NEAR	028B	MAIN_TEXT
??0010 . . . . . . . . . . . . .  	L NEAR	028B	MAIN_TEXT
??0011 . . . . . . . . . . . . .  	L NEAR	029B	MAIN_TEXT
??0012 . . . . . . . . . . . . .  	L NEAR	02AB	MAIN_TEXT
??0013 . . . . . . . . . . . . .  	L NEAR	02C9	MAIN_TEXT
??0014 . . . . . . . . . . . . .  	L NEAR	02C1	MAIN_TEXT
??0015 . . . . . . . . . . . . .  	L NEAR	02A3	MAIN_TEXT
??0016 . . . . . . . . . . . . .  	L NEAR	02B9	MAIN_TEXT
??0017 . . . . . . . . . . . . .  	L NEAR	04F6	MAIN_TEXT
??0018 . . . . . . . . . . . . .  	L NEAR	04EE	MAIN_TEXT
??0019 . . . . . . . . . . . . .  	L NEAR	04FF	MAIN_TEXT
??001A . . . . . . . . . . . . .  	L NEAR	05FD	MAIN_TEXT
??001B . . . . . . . . . . . . .  	L NEAR	05F5	MAIN_TEXT
??001C . . . . . . . . . . . . .  	L NEAR	0606	MAIN_TEXT
??001D . . . . . . . . . . . . .  	L NEAR	063B	MAIN_TEXT
??001E . . . . . . . . . . . . .  	L NEAR	064E	MAIN_TEXT
??001F . . . . . . . . . . . . .  	L NEAR	0675	MAIN_TEXT
??0020 . . . . . . . . . . . . .  	L NEAR	0688	MAIN_TEXT
??0021 . . . . . . . . . . . . .  	L NEAR	06AF	MAIN_TEXT
??0022 . . . . . . . . . . . . .  	L NEAR	06C2	MAIN_TEXT
??0023 . . . . . . . . . . . . .  	L NEAR	0701	MAIN_TEXT
??0024 . . . . . . . . . . . . .  	L NEAR	0716	MAIN_TEXT
??0025 . . . . . . . . . . . . .  	L NEAR	0756	MAIN_TEXT
??0026 . . . . . . . . . . . . .  	L NEAR	076B	MAIN_TEXT
??0027 . . . . . . . . . . . . .  	L NEAR	07B4	MAIN_TEXT
??0028 . . . . . . . . . . . . .  	L NEAR	07C7	MAIN_TEXT
??0029 . . . . . . . . . . . . .  	L NEAR	0804	MAIN_TEXT
??002A . . . . . . . . . . . . .  	L NEAR	0817	MAIN_TEXT
??002B . . . . . . . . . . . . .  	L NEAR	083E	MAIN_TEXT
??002C . . . . . . . . . . . . .  	L NEAR	0851	MAIN_TEXT
??002D . . . . . . . . . . . . .  	L NEAR	0887	MAIN_TEXT
??002E . . . . . . . . . . . . .  	L NEAR	089C	MAIN_TEXT
??002F . . . . . . . . . . . . .  	L NEAR	08DA	MAIN_TEXT
??0030 . . . . . . . . . . . . .  	L NEAR	08EF	MAIN_TEXT
??0031 . . . . . . . . . . . . .  	L NEAR	0938	MAIN_TEXT
??0032 . . . . . . . . . . . . .  	L NEAR	094B	MAIN_TEXT
??0033 . . . . . . . . . . . . .  	L NEAR	0988	MAIN_TEXT
??0034 . . . . . . . . . . . . .  	L NEAR	099B	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-9


??0035 . . . . . . . . . . . . .  	L NEAR	09C2	MAIN_TEXT
??0036 . . . . . . . . . . . . .  	L NEAR	09D5	MAIN_TEXT
??0037 . . . . . . . . . . . . .  	L NEAR	0A0B	MAIN_TEXT
??0038 . . . . . . . . . . . . .  	L NEAR	0A20	MAIN_TEXT
??0039 . . . . . . . . . . . . .  	L NEAR	0A5E	MAIN_TEXT
??003A . . . . . . . . . . . . .  	L NEAR	0A73	MAIN_TEXT
??003B . . . . . . . . . . . . .  	L NEAR	0AAB	MAIN_TEXT
??003C . . . . . . . . . . . . .  	L NEAR	0AC0	MAIN_TEXT
??003D . . . . . . . . . . . . .  	L NEAR	0AF2	MAIN_TEXT
??003E . . . . . . . . . . . . .  	L NEAR	0AD9	MAIN_TEXT
??003F . . . . . . . . . . . . .  	L NEAR	0B07	MAIN_TEXT
??0040 . . . . . . . . . . . . .  	L NEAR	0B3F	MAIN_TEXT
??0041 . . . . . . . . . . . . .  	L NEAR	0B37	MAIN_TEXT
??0042 . . . . . . . . . . . . .  	L NEAR	0B48	MAIN_TEXT
??0043 . . . . . . . . . . . . .  	L NEAR	0BCA	MAIN_TEXT
??0044 . . . . . . . . . . . . .  	L NEAR	0BDF	MAIN_TEXT
??0045 . . . . . . . . . . . . .  	L NEAR	0C11	MAIN_TEXT
??0046 . . . . . . . . . . . . .  	L NEAR	0BF8	MAIN_TEXT
??0047 . . . . . . . . . . . . .  	L NEAR	0C26	MAIN_TEXT
??0048 . . . . . . . . . . . . .  	L NEAR	0C5E	MAIN_TEXT
??0049 . . . . . . . . . . . . .  	L NEAR	0C56	MAIN_TEXT
??004A . . . . . . . . . . . . .  	L NEAR	0C67	MAIN_TEXT
??004B . . . . . . . . . . . . .  	L NEAR	0CEB	MAIN_TEXT
??004C . . . . . . . . . . . . .  	L NEAR	0D00	MAIN_TEXT
??004D . . . . . . . . . . . . .  	L NEAR	0D32	MAIN_TEXT
??004E . . . . . . . . . . . . .  	L NEAR	0D19	MAIN_TEXT
??004F . . . . . . . . . . . . .  	L NEAR	0D47	MAIN_TEXT
??0050 . . . . . . . . . . . . .  	L NEAR	0D7F	MAIN_TEXT
??0051 . . . . . . . . . . . . .  	L NEAR	0D77	MAIN_TEXT
??0052 . . . . . . . . . . . . .  	L NEAR	0D88	MAIN_TEXT
??0053 . . . . . . . . . . . . .  	L NEAR	0E18	MAIN_TEXT
??0054 . . . . . . . . . . . . .  	L NEAR	0E10	MAIN_TEXT
??0055 . . . . . . . . . . . . .  	L NEAR	0E21	MAIN_TEXT
??0056 . . . . . . . . . . . . .  	L NEAR	0E4C	MAIN_TEXT
??0057 . . . . . . . . . . . . .  	L NEAR	0E44	MAIN_TEXT
??0058 . . . . . . . . . . . . .  	L NEAR	0E55	MAIN_TEXT
??0059 . . . . . . . . . . . . .  	L NEAR	0E80	MAIN_TEXT
??005A . . . . . . . . . . . . .  	L NEAR	0E78	MAIN_TEXT
??005B . . . . . . . . . . . . .  	L NEAR	0E89	MAIN_TEXT
??005C . . . . . . . . . . . . .  	L NEAR	0EDA	MAIN_TEXT
??005D . . . . . . . . . . . . .  	L NEAR	0EEF	MAIN_TEXT
??005E . . . . . . . . . . . . .  	L NEAR	0F21	MAIN_TEXT
??005F . . . . . . . . . . . . .  	L NEAR	0F08	MAIN_TEXT
??0060 . . . . . . . . . . . . .  	L NEAR	0F36	MAIN_TEXT
??0061 . . . . . . . . . . . . .  	L NEAR	0F5E	MAIN_TEXT
??0062 . . . . . . . . . . . . .  	L NEAR	0F56	MAIN_TEXT
??0063 . . . . . . . . . . . . .  	L NEAR	0F67	MAIN_TEXT
??0064 . . . . . . . . . . . . .  	L NEAR	1039	MAIN_TEXT
??0065 . . . . . . . . . . . . .  	L NEAR	104E	MAIN_TEXT
??0066 . . . . . . . . . . . . .  	L NEAR	1080	MAIN_TEXT
??0067 . . . . . . . . . . . . .  	L NEAR	1067	MAIN_TEXT
??0068 . . . . . . . . . . . . .  	L NEAR	1095	MAIN_TEXT
??0069 . . . . . . . . . . . . .  	L NEAR	10B9	MAIN_TEXT
??006A . . . . . . . . . . . . .  	L NEAR	10B1	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-10


??006B . . . . . . . . . . . . .  	L NEAR	10C2	MAIN_TEXT
??006C . . . . . . . . . . . . .  	L NEAR	1185	MAIN_TEXT
??006D . . . . . . . . . . . . .  	L NEAR	118B	MAIN_TEXT
??006E . . . . . . . . . . . . .  	L NEAR	11B2	MAIN_TEXT
??006F . . . . . . . . . . . . .  	L NEAR	11A3	MAIN_TEXT
??0070 . . . . . . . . . . . . .  	L NEAR	11A9	MAIN_TEXT
??0071 . . . . . . . . . . . . .  	L NEAR	11B8	MAIN_TEXT
??0072 . . . . . . . . . . . . .  	L NEAR	1219	MAIN_TEXT
??0073 . . . . . . . . . . . . .  	L NEAR	121F	MAIN_TEXT
??0074 . . . . . . . . . . . . .  	L NEAR	1246	MAIN_TEXT
??0075 . . . . . . . . . . . . .  	L NEAR	1237	MAIN_TEXT
??0076 . . . . . . . . . . . . .  	L NEAR	123D	MAIN_TEXT
??0077 . . . . . . . . . . . . .  	L NEAR	124C	MAIN_TEXT
??0078 . . . . . . . . . . . . .  	L NEAR	12DC	MAIN_TEXT
??0079 . . . . . . . . . . . . .  	L NEAR	12E2	MAIN_TEXT
??007A . . . . . . . . . . . . .  	L NEAR	1309	MAIN_TEXT
??007B . . . . . . . . . . . . .  	L NEAR	12FA	MAIN_TEXT
??007C . . . . . . . . . . . . .  	L NEAR	1300	MAIN_TEXT
??007D . . . . . . . . . . . . .  	L NEAR	130F	MAIN_TEXT
??007E . . . . . . . . . . . . .  	L NEAR	139F	MAIN_TEXT
??007F . . . . . . . . . . . . .  	L NEAR	13A5	MAIN_TEXT
??0080 . . . . . . . . . . . . .  	L NEAR	13CC	MAIN_TEXT
??0081 . . . . . . . . . . . . .  	L NEAR	13BD	MAIN_TEXT
??0082 . . . . . . . . . . . . .  	L NEAR	13C3	MAIN_TEXT
??0083 . . . . . . . . . . . . .  	L NEAR	13D2	MAIN_TEXT
??0084 . . . . . . . . . . . . .  	L NEAR	1462	MAIN_TEXT
??0085 . . . . . . . . . . . . .  	L NEAR	1468	MAIN_TEXT
??0086 . . . . . . . . . . . . .  	L NEAR	148F	MAIN_TEXT
??0087 . . . . . . . . . . . . .  	L NEAR	1480	MAIN_TEXT
??0088 . . . . . . . . . . . . .  	L NEAR	1486	MAIN_TEXT
??0089 . . . . . . . . . . . . .  	L NEAR	1495	MAIN_TEXT
??008A . . . . . . . . . . . . .  	L NEAR	14F6	MAIN_TEXT
??008B . . . . . . . . . . . . .  	L NEAR	14FC	MAIN_TEXT
??008C . . . . . . . . . . . . .  	L NEAR	1523	MAIN_TEXT
??008D . . . . . . . . . . . . .  	L NEAR	1514	MAIN_TEXT
??008E . . . . . . . . . . . . .  	L NEAR	151A	MAIN_TEXT
??008F . . . . . . . . . . . . .  	L NEAR	1529	MAIN_TEXT
??0090 . . . . . . . . . . . . .  	L NEAR	15B9	MAIN_TEXT
??0091 . . . . . . . . . . . . .  	L NEAR	15BF	MAIN_TEXT
??0092 . . . . . . . . . . . . .  	L NEAR	15E6	MAIN_TEXT
??0093 . . . . . . . . . . . . .  	L NEAR	15D7	MAIN_TEXT
??0094 . . . . . . . . . . . . .  	L NEAR	15DD	MAIN_TEXT
??0095 . . . . . . . . . . . . .  	L NEAR	15EC	MAIN_TEXT
??0096 . . . . . . . . . . . . .  	L NEAR	167C	MAIN_TEXT
??0097 . . . . . . . . . . . . .  	L NEAR	1682	MAIN_TEXT
??0098 . . . . . . . . . . . . .  	L NEAR	16A9	MAIN_TEXT
??0099 . . . . . . . . . . . . .  	L NEAR	169A	MAIN_TEXT
??009A . . . . . . . . . . . . .  	L NEAR	16A0	MAIN_TEXT
??009B . . . . . . . . . . . . .  	L NEAR	16AF	MAIN_TEXT
??009C . . . . . . . . . . . . .  	L NEAR	173F	MAIN_TEXT
??009D . . . . . . . . . . . . .  	L NEAR	1745	MAIN_TEXT
??009E . . . . . . . . . . . . .  	L NEAR	176C	MAIN_TEXT
??009F . . . . . . . . . . . . .  	L NEAR	175D	MAIN_TEXT
??00A0 . . . . . . . . . . . . .  	L NEAR	1763	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-11


??00A1 . . . . . . . . . . . . .  	L NEAR	1772	MAIN_TEXT
??00A2 . . . . . . . . . . . . .  	L NEAR	17C0	MAIN_TEXT
??00A3 . . . . . . . . . . . . .  	L NEAR	17C6	MAIN_TEXT
??00A4 . . . . . . . . . . . . .  	L NEAR	17ED	MAIN_TEXT
??00A5 . . . . . . . . . . . . .  	L NEAR	17DE	MAIN_TEXT
??00A6 . . . . . . . . . . . . .  	L NEAR	17E4	MAIN_TEXT
??00A7 . . . . . . . . . . . . .  	L NEAR	17F3	MAIN_TEXT
??00A8 . . . . . . . . . . . . .  	L NEAR	1856	MAIN_TEXT
??00A9 . . . . . . . . . . . . .  	L NEAR	185C	MAIN_TEXT
??00AA . . . . . . . . . . . . .  	L NEAR	1883	MAIN_TEXT
??00AB . . . . . . . . . . . . .  	L NEAR	1874	MAIN_TEXT
??00AC . . . . . . . . . . . . .  	L NEAR	187A	MAIN_TEXT
??00AD . . . . . . . . . . . . .  	L NEAR	1889	MAIN_TEXT
??00AE . . . . . . . . . . . . .  	L NEAR	18EC	MAIN_TEXT
??00AF . . . . . . . . . . . . .  	L NEAR	18F2	MAIN_TEXT
??00B0 . . . . . . . . . . . . .  	L NEAR	1919	MAIN_TEXT
??00B1 . . . . . . . . . . . . .  	L NEAR	190A	MAIN_TEXT
??00B2 . . . . . . . . . . . . .  	L NEAR	1910	MAIN_TEXT
??00B3 . . . . . . . . . . . . .  	L NEAR	191F	MAIN_TEXT
??00B4 . . . . . . . . . . . . .  	L NEAR	1982	MAIN_TEXT
??00B5 . . . . . . . . . . . . .  	L NEAR	1988	MAIN_TEXT
??00B6 . . . . . . . . . . . . .  	L NEAR	19AF	MAIN_TEXT
??00B7 . . . . . . . . . . . . .  	L NEAR	19A0	MAIN_TEXT
??00B8 . . . . . . . . . . . . .  	L NEAR	19A6	MAIN_TEXT
??00B9 . . . . . . . . . . . . .  	L NEAR	19B5	MAIN_TEXT
??00BA . . . . . . . . . . . . .  	L NEAR	1A18	MAIN_TEXT
??00BB . . . . . . . . . . . . .  	L NEAR	1A1E	MAIN_TEXT
??00BC . . . . . . . . . . . . .  	L NEAR	1A45	MAIN_TEXT
??00BD . . . . . . . . . . . . .  	L NEAR	1A36	MAIN_TEXT
??00BE . . . . . . . . . . . . .  	L NEAR	1A3C	MAIN_TEXT
??00BF . . . . . . . . . . . . .  	L NEAR	1A4B	MAIN_TEXT
??00C0 . . . . . . . . . . . . .  	L NEAR	1AAE	MAIN_TEXT
??00C1 . . . . . . . . . . . . .  	L NEAR	1AB4	MAIN_TEXT
??00C2 . . . . . . . . . . . . .  	L NEAR	1ADB	MAIN_TEXT
??00C3 . . . . . . . . . . . . .  	L NEAR	1ACC	MAIN_TEXT
??00C4 . . . . . . . . . . . . .  	L NEAR	1AD2	MAIN_TEXT
??00C5 . . . . . . . . . . . . .  	L NEAR	1AE1	MAIN_TEXT
??00C6 . . . . . . . . . . . . .  	L NEAR	1B34	MAIN_TEXT
??00C7 . . . . . . . . . . . . .  	L NEAR	1B2C	MAIN_TEXT
??00C8 . . . . . . . . . . . . .  	L NEAR	1B3D	MAIN_TEXT
??00C9 . . . . . . . . . . . . .  	L NEAR	1B70	MAIN_TEXT
??00CA . . . . . . . . . . . . .  	L NEAR	1B68	MAIN_TEXT
??00CB . . . . . . . . . . . . .  	L NEAR	1B79	MAIN_TEXT
??00CC . . . . . . . . . . . . .  	L NEAR	1BBB	MAIN_TEXT
??00CD . . . . . . . . . . . . .  	L NEAR	1BB3	MAIN_TEXT
??00CE . . . . . . . . . . . . .  	L NEAR	1BC4	MAIN_TEXT
??00CF . . . . . . . . . . . . .  	L NEAR	1BF2	MAIN_TEXT
??00D0 . . . . . . . . . . . . .  	L NEAR	1BEA	MAIN_TEXT
??00D1 . . . . . . . . . . . . .  	L NEAR	1BFB	MAIN_TEXT
??00D2 . . . . . . . . . . . . .  	L NEAR	1C40	MAIN_TEXT
??00D3 . . . . . . . . . . . . .  	L NEAR	1C38	MAIN_TEXT
??00D4 . . . . . . . . . . . . .  	L NEAR	1C49	MAIN_TEXT
??00D5 . . . . . . . . . . . . .  	L NEAR	1C7D	MAIN_TEXT
??00D6 . . . . . . . . . . . . .  	L NEAR	1C75	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-12


??00D7 . . . . . . . . . . . . .  	L NEAR	1C86	MAIN_TEXT
??00D8 . . . . . . . . . . . . .  	L NEAR	1CC1	MAIN_TEXT
??00D9 . . . . . . . . . . . . .  	L NEAR	1CB9	MAIN_TEXT
??00DA . . . . . . . . . . . . .  	L NEAR	1CCA	MAIN_TEXT
??00DB . . . . . . . . . . . . .  	L NEAR	1CFE	MAIN_TEXT
??00DC . . . . . . . . . . . . .  	L NEAR	1CF6	MAIN_TEXT
??00DD . . . . . . . . . . . . .  	L NEAR	1D07	MAIN_TEXT
??00DE . . . . . . . . . . . . .  	L NEAR	1D2E	MAIN_TEXT
??00DF . . . . . . . . . . . . .  	L NEAR	1D2E	MAIN_TEXT
??00E0 . . . . . . . . . . . . .  	L NEAR	1D41	MAIN_TEXT
??00E1 . . . . . . . . . . . . .  	L NEAR	1D4F	MAIN_TEXT
??00E2 . . . . . . . . . . . . .  	L NEAR	1DAA	MAIN_TEXT
??00E3 . . . . . . . . . . . . .  	L NEAR	1DF1	MAIN_TEXT
??00E4 . . . . . . . . . . . . .  	L NEAR	1DAA	MAIN_TEXT
??00E5 . . . . . . . . . . . . .  	L NEAR	1DF1	MAIN_TEXT
??00E6 . . . . . . . . . . . . .  	L NEAR	1E2D	MAIN_TEXT
??00E7 . . . . . . . . . . . . .  	L NEAR	1E26	MAIN_TEXT
??00E8 . . . . . . . . . . . . .  	L NEAR	1E36	MAIN_TEXT
??00E9 . . . . . . . . . . . . .  	L NEAR	1E53	MAIN_TEXT
??00EA . . . . . . . . . . . . .  	L NEAR	1E53	MAIN_TEXT
??00EB . . . . . . . . . . . . .  	L NEAR	1E66	MAIN_TEXT
??00EC . . . . . . . . . . . . .  	L NEAR	1E74	MAIN_TEXT
??00ED . . . . . . . . . . . . .  	L NEAR	1ECF	MAIN_TEXT
??00EE . . . . . . . . . . . . .  	L NEAR	1F16	MAIN_TEXT
??00EF . . . . . . . . . . . . .  	L NEAR	1ECF	MAIN_TEXT
??00F0 . . . . . . . . . . . . .  	L NEAR	1F16	MAIN_TEXT
??00F1 . . . . . . . . . . . . .  	L NEAR	1F4B	MAIN_TEXT
??00F2 . . . . . . . . . . . . .  	L NEAR	1F44	MAIN_TEXT
??00F3 . . . . . . . . . . . . .  	L NEAR	1F54	MAIN_TEXT
??00F4 . . . . . . . . . . . . .  	L NEAR	1F82	MAIN_TEXT
??00F5 . . . . . . . . . . . . .  	L NEAR	1F82	MAIN_TEXT
??00F6 . . . . . . . . . . . . .  	L NEAR	1FAD	MAIN_TEXT
??00F7 . . . . . . . . . . . . .  	L NEAR	1FD2	MAIN_TEXT
??00F8 . . . . . . . . . . . . .  	L NEAR	1FF7	MAIN_TEXT
??00F9 . . . . . . . . . . . . .  	L NEAR	201B	MAIN_TEXT
??00FA . . . . . . . . . . . . .  	L NEAR	201B	MAIN_TEXT
??00FB . . . . . . . . . . . . .  	L NEAR	2033	MAIN_TEXT
??00FC . . . . . . . . . . . . .  	L NEAR	205D	MAIN_TEXT
??00FD . . . . . . . . . . . . .  	L NEAR	2096	MAIN_TEXT
??00FE . . . . . . . . . . . . .  	L NEAR	2096	MAIN_TEXT
??00FF . . . . . . . . . . . . .  	L NEAR	202B	MAIN_TEXT
??0100 . . . . . . . . . . . . .  	L NEAR	2055	MAIN_TEXT
??0101 . . . . . . . . . . . . .  	L NEAR	207D	MAIN_TEXT
??0102 . . . . . . . . . . . . .  	L NEAR	207D	MAIN_TEXT
??0103 . . . . . . . . . . . . .  	L NEAR	20F4	MAIN_TEXT
??0104 . . . . . . . . . . . . .  	L NEAR	20F4	MAIN_TEXT
??0105 . . . . . . . . . . . . .  	L NEAR	210C	MAIN_TEXT
??0106 . . . . . . . . . . . . .  	L NEAR	212C	MAIN_TEXT
??0107 . . . . . . . . . . . . .  	L NEAR	216C	MAIN_TEXT
??0108 . . . . . . . . . . . . .  	L NEAR	216C	MAIN_TEXT
??0109 . . . . . . . . . . . . .  	L NEAR	2104	MAIN_TEXT
??010A . . . . . . . . . . . . .  	L NEAR	2124	MAIN_TEXT
??010B . . . . . . . . . . . . .  	L NEAR	2151	MAIN_TEXT
??010C . . . . . . . . . . . . .  	L NEAR	2149	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 23:13:18
                                                             Symbols-13


??010D . . . . . . . . . . . . .  	L NEAR	219A	MAIN_TEXT
??010E . . . . . . . . . . . . .  	L NEAR	2184	MAIN_TEXT
??010F . . . . . . . . . . . . .  	L NEAR	217C	MAIN_TEXT
??0110 . . . . . . . . . . . . .  	L NEAR	218C	MAIN_TEXT
??0111 . . . . . . . . . . . . .  	L NEAR	21A2	MAIN_TEXT
??0112 . . . . . . . . . . . . .  	L NEAR	21AA	MAIN_TEXT
??0113 . . . . . . . . . . . . .  	L NEAR	21EF	MAIN_TEXT
??0114 . . . . . . . . . . . . .  	L NEAR	21EF	MAIN_TEXT
??0115 . . . . . . . . . . . . .  	L NEAR	2219	MAIN_TEXT
??0116 . . . . . . . . . . . . .  	L NEAR	2221	MAIN_TEXT
??0117 . . . . . . . . . . . . .  	L NEAR	2229	MAIN_TEXT
??0118 . . . . . . . . . . . . .  	L NEAR	2247	MAIN_TEXT
??0119 . . . . . . . . . . . . .  	L NEAR	2237	MAIN_TEXT
??011A . . . . . . . . . . . . .  	L NEAR	223F	MAIN_TEXT
??011B . . . . . . . . . . . . .  	L NEAR	2277	MAIN_TEXT
??011C . . . . . . . . . . . . .  	L NEAR	226F	MAIN_TEXT
??011D . . . . . . . . . . . . .  	L NEAR	2280	MAIN_TEXT
@CODE  . . . . . . . . . . . . .  	TEXT  main_TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  1		
@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@DATASIZE  . . . . . . . . . . .  	TEXT  1		
@FILENAME  . . . . . . . . . . .  	TEXT  main		
@VERSION . . . . . . . . . . . .  	TEXT  510		


   3681 Source  Lines
   6872 Total   Lines
    645 Symbols

  46892 + 350989 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
