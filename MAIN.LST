Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-1


				EXTRN BITMAP_LEFT_PLAYER2 : BYTE 
				EXTRN BITMAP_UPLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER2 : BYTE
				EXTRN BITMAP_DOWNLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_DOWN_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER1 : BYTE
				EXTRN BITMAP_DOWN_PLAYER1 : BYTE
				EXTRN BITMAP_RIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_DOWNRIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_UPRIGHT_PLAYER1 : BYTE
				
				EXTRN GHOST1_0 : BYTE
				EXTRN GHOST1_1 : BYTE
				EXTRN GHOST1_2 : BYTE
				EXTRN GHOST2_0 : BYTE
				EXTRN GHOST2_1 : BYTE
				EXTRN GHOST2_2 : BYTE
				EXTRN GHOST3_0 : BYTE
				EXTRN GHOST3_1 : BYTE
				EXTRN GHOST3_2 : BYTE
				
				EXTRN PORTAL : BYTE
				
				EXTRN Bullet_1_Model : BYTE
				EXTRN BULLET_2_MODEL : BYTE
				
				EXTRN RED_HEART : BYTE
				EXTRN WHITE_HEART : BYTE
				
				EXTRN DMG_PRUP_1 : BYTE
				EXTRN DMG_PRUP_2 : BYTE
				EXTRN SPD_PRUP_1 : BYTE
				EXTRN SPD_PRUP_2 : BYTE
				
				EXTRN LOGO : BYTE
				
				INCLUDE RANDOM.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO TO GET RANDOM NUMBER WITHIN A PROVIDED
				 RANGE 
			     C	;----------------------------------------------
				-------------------------------
			     C	RANDOMIZE MACRO LOWER, UPPER, NUMBER, SEED 
			     C	LOCAL SET, NODIVISION
			     C	   PUSH     AX
			     C	   PUSH     BX
			     C	   PUSH     CX
			     C	   PUSH     DX
			     C	
			     C	   MOV     AX, 25173          ; LCG MULTIPLIER 
			     C	   MUL     WORD PTR SEED      ;DX:AX = LCG MULT
				IPLIER * SEED
			     C	   ADD     AX, 13849          ; ADD LCG INCREME
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-2


				NT VALUE
			     C	   ; MODULO 65536, AX = (MULTIPLIER*SEED+INCREM
				ENT) MOD 65536
			     C	   CMP     SEED, AX
			     C	   JNE     SET
			     C	   MOV     AH, 0
			     C	   INT     1AH
			     C	   MOV     SEED, DX    ; SEED WITH THE SYSTEM T
				IME
			     C	   
			     C	   SET:
			     C	   MOV     SEED, AX          ; UPDATE SEED = RE
				TURN VALUE
			     C	
			     C	   SUB      DX, DX
			     C	   MOV      CX, UPPER
			     C	   INC      CX
			     C	   SUB      CX, LOWER 
			     C	   CMP CX, 0 
			     C	   JE NODIVISION
			     C	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER)
			     C	   NODIVISION:
			     C	   ADD      DX, LOWER
			     C	   MOV      NUMBER, DX
			     C	
			     C	   POP      DX
			     C	   POP      CX
			     C	   POP      BX
			     C	   POP      AX
			     C	ENDM RANDOMIZE
				INCLUDE PRINTNUM.INC
			     C	
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to print any number providing the hexa
				decimal representation 
			     C	;----------------------------------------------
				-------------------------------
			     C	
			     C	PRINTNUM MACRO BINARY, DECIMAL
			     C	   LOCAL BACK 
			     C	   mov DECIMAL, '0'
			     C	   mov DECIMAL + 1, '0'
			     C	   MOV BX, 10            
			     C	   MOV SI, OFFSET DECIMAL
			     C	   ADD SI, 3
			     C	   DEC SI
			     C	   MOV AX, BINARY
			     C	   BACK:
			     C	      SUB DX, DX
			     C	      DIV BX
			     C	      OR DL, 30H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-3


			     C	      MOV [SI], DL
			     C	      DEC SI
			     C	      CMP AX, 0
			     C	      JA BACK 
			     C	    
			     C	   MOV AH, 2
			     C	   MOV DH, 1    ;Y POSITION FOR PRINTING
			     C	   MOV DL, 35    ;X POSITION FOR PRINTING
			     C	   INT 10H
			     C	    
			     C	   MOV AH, 9H      ;PRINT THE NUMBER
			     C	   MOV DX, OFFSET DECIMAL   
			     C	   INT 21H
			     C	    
			     C	ENDM PRINTNUM 
				INCLUDE BUNDRY.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO CHECK IF THE SHAPE IS WITHIN BOUNDARIE
				S 
			     C	;----------------------------------------------
				-------------------------------
			     C	WITHIN_BOUNDARIES MACRO STARTPOSX, STARTPOSY, S
				IZE, RESULT
			     C	   LOCAL UPPER_CHECK, LOWERCHECK, LEFTCHECK, RI
				GHTCHECK, WITHINRANGE
			     C	   PUSH AX
			     C	   PUSH BX
			     C	   PUSH CX
			     C	   PUSH DX
			     C	
			     C	
			     C	   MOV RESULT, 1           ;FIRST ASSUME THAT T
				HE SHAPE IS WITHIN BOUNDARIES
			     C	   UPPER_CHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ABOVE
			     C	      MOV CX, STARTPOSY
			     C	      MOV BX, UPPERBOUND_Y
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE LOWERCHECK
			     C	      MOV RESULT, 0   
			     C	   ;}
			     C	   
			     C	   LOWERCHECK:
			     C	   ;{CHECK FOR BOUNDARIES BELOW
			     C	      MOV CX, STARTPOSY
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, LOWERBOUND_Y
			     C	      SUB BX, CX
			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE RIGHTCHECK
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-4


			     C	      MOV RESULT, 0
			     C	   ;}  
			     C	
			     C	   RIGHTCHECK:
			     C	   ;{CHECK FOR BOUNDARIES ON THE RIGHT
			     C	      MOV CX, STARTPOSX
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, RIGHTBOUND_X
			     C	      SUB BX, CX
			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE LEFTCHECK
			     C	      MOV RESULT, 0
			     C	   ;} 
			     C	
			     C	   LEFTCHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ON THE LEFT
			     C	      MOV CX, STARTPOSX
			     C	      MOV BX, LEFTBOUND_X
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE WITHINRANGE
			     C	      MOV RESULT, 0   
			     C	   ;} 
			     C	
			     C	   WITHINRANGE:
			     C	   POP DX
			     C	   POP CX
			     C	   POP BX
			     C	   POP AX
			     C	ENDM WITHIN_BOUNDARIES 
				INCLUDE DWOBJ.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to draw any needed object(square) prov
				iding the length of the side,
			     C	;  a register containing the offset of the colo
				rs in the ds, starting x and y
			     C	;----------------------------------------------
				-------------------------------
			     C	DRAW_OBJECT MACRO SIZE, BITMAP, X, Y
			     C	LOCAL INNERLOOP, OUTERLOOP, DONT_DRAW
			     C	;{
			     C	   PUSH CX
			     C	   PUSH BX
			     C	   MOV SI, BITMAP  ;TAKE THE RIGHT BITMAP FROM 
				A REGISTER CONTAINING THE OFFSET
			     C	   MOV     DX, Y     ; Y TO START DRAWING AT
			     C	   MOV BP, SIZE
			     C	   MOV BH, [SI]
			     C	   
			     C	
			     C	   OUTERLOOP:;{ FOR(BP = 50; BD > 0; BP--)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-5


			     C	      MOV     CX, X    ; X TO START 
			     C	      MOV DI, SIZE
			     C	      INNERLOOP:;{ FOR(DX = 50; DX > 0; DX--)
			     C	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL
			     C	         CMP BH ,AL
			     C	         JE DONT_DRAW
			     C	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL
			     C	         INT     10H
			     C	         DONT_DRAW:
			     C	         INC     CX         ; NEXT X POSITION
			     C	         DEC     DI
			     C	         JNZ     INNERLOOP
			     C	         ;}
			     C	      INC     DX         ; NEXT Y POSITION
			     C	      DEC     BP
			     C	      JNZ     OUTERLOOP
			     C		  
			     C	      POP BX
			     C	      POP CX
			     C	;} 
			     C	ENDM DRAW_OBJECT
				INCLUDE MENU.INC
			     C	MENU MACRO 
			     C	LOCAL OUTERLOOP, INNERLOOP, PRINT1, PRINT2, PRI
				NT3
			     C	                    ;{ OPEN VEDIO MODE
			     C	                        MOV     AX, 4F02H
			     C	                        MOV     BX, 105H
			     C	                        INT     10H
			     C	                    ;}
			     C	
			     C	
			     C	                ;{ DRAWING BACKGROUND
			     C	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE
			     C	                    MOV     DX, 0     ; Y TO ST
				ART
			     C	                    MOV     CX, 0
			     C	                    MOV     AL, 7
			     C	                    MOV     AH, 0CH
			     C	                           OUTERLOOP: 
			     C	                                          INNER
				LOOP: 
			     C	                                               
				             INT     10H
			     C	                                               
				             INC     CX
			     C	                                               
				             CMP     CX, 1024
			     C	                                               
				             JNZ     INNERLOOP
			     C	                                          ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-6


			     C	                                    MOV     CX,
				0
			     C	                                    INC     DX 
				        ; NEXT Y
			     C	                                    CMP     DX,
				 780
			     C	                                    JNZ     OUT
				ERLOOP
			     C	                ;}
			     C	                ;{ CLEAR THE PAGE
			     C	                    MOV     AX, 0600H
			     C	                    MOV     BH, 0
			     C	                    MOV     CX, 0
			     C	                    MOV     DX, 184FH
			     C	                    INT     10H
			     C	                ;}
			     C	                ;{ CURSUR = (34H,1AH)
			     C	                    MOV     AH, 2
			     C	                    MOV     DX, 1B34H
			     C	                    INT     10H
			     C	                ;}
			     C	                LEA     SI, MENUITEM1
			     C	                PRINT1:
			     C	                    ;{ PRINTING MENUETIME1
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT1
			     C	                    ;}
			     C	                    ;{ CURSUR = (1BH,34H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1D34H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM2
			     C	                    PRINT2:
			     C	                    ;{ PRINTING MENUETIME2
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-7


			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT2 
			     C	                    ;}
			     C	                    ;{ CURSUR = (33H,19H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1933H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM3
			     C	                    PRINT3:
			     C	                    ;{ PRINTING MENUETIME3
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT3
			     C	                    ;}
			     C	ENDM MENU
				INCLUDE GHOST.INC
			     C	GHOSTWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, GMODC
				, GMODR
			     C	;GHOSTBUSTERS
			     C	;{ THIS BLOCK DRAW GHOST WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,250 ; Y = 250
			     C	    MOV CX,400 ; X = 400
			     C	
			     C	    MOV AL,04
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'G'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(G) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,270
			     C	                JA D
			     C	                INT 10H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-8


			     C	                JMP CON
			     C	                D: CMP DX,290 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'H'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;} 
			     C	        ;{ VERTICAL LINS OF 'O'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	         ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,275
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;} 
			     C	        SUB CX,215 
			     C	        INC DX
			     C	        CMP DX,310
			     C	        JNZ COL
			     C	    MOV DX,250      
			     C	    INC CX
			     C	    CMP CX,410
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ;{ MODIFICATION TO 'G'
			     C	        MOV CX,420
			     C	        MOV DX,280
			     C	        GMODR:
			     C	            GMODC:
			     C	                INT 10H
			     C	                INC CX
			     C	                CMP CX,440
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-9


			     C	            JNZ GMODC
			     C	        MOV CX,420
			     C	        INC DX
			     C	        CMP DX,290
			     C	        JNZ GMODR    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,400
			     C	    MOV DX,250
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        
			     C	        ;{ HORIZONTAL LINS OF 'H'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            ADD DX,25
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{ HORIZONTAL LINS OF 'O'
			     C	            SUB DX,25
			     C	            SUB CX,50
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'T'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	        ;}
			     C	        SUB CX,200
			     C	        INC CX
			     C	        CMP CX,440
			     C	        JNZ RW
			     C	    MOV CX,400
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-10


			     C	    INC DX
			     C	    CMP DX,260
			     C	    JNZ CLM
			     C	;}
			     C	ENDM GHOSTWORD
				INCLUDE BUSTERS.INC
			     C	BUSTERWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, CN, R
				, L, CON3, T, CON4, CON5, CON6, CLMM, ROOW, K, 
				CON7, CON8, CON9, F, CON10
			     C	;{ THIS BLOCK DRAW BUSTER WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,320 ; Y = 320
			     C	    MOV CX,380 ; X = 380
			     C	
			     C	    MOV AL,01
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF BUSTER W
				ORD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'B'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(B) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA D
			     C	                INT 10H
			     C	                JMP CON
			     C	                D: CMP DX,355 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'U'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-11


			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;}
			     C	        ;} 
			     C	 
			     C	        ;{ VERTICAL LINS OF 'E'
			     C	            ADD CX,35
			     C	            INT 10H
			     C	         ;}
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD CX,30
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,345
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,355 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
			     C	        CN:
			     C	        SUB CX,280 
			     C	        INC DX
			     C	        CMP DX,380
			     C	        JNZ COL
			     C	    MOV DX,320      
			     C	    INC CX
			     C	    CMP CX,390
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV DX,320
			     C	    MOV CX,380
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'B'
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(B) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,415
			     C	                JA T
			     C	                INT 10H
			     C	                JMP CON4
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-12


			     C	                T: CMP DX,345 
			     C	                JA CON3
			     C	                INT 10H
			     C	                CON3: CMP DX,355
			     C	                JB CON4
			     C	                INT 10H
			     C	                CON4: ADD DX,10
			     C	                CMP CX,415
			     C	                JA L
			     C	                INT 10H
			     C	                JMP CON6
			     C	                L: CMP DX,345 
			     C	                JA CON5
			     C	                INT 10H
			     C	                CON5: CMP DX,355
			     C	                JB CON6
			     C	                INT 10H
			     C	                CON6:
			     C	                ADD DX,20
			     C	                INT 10H 
			     C	            ;}
			     C	        SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'U'
			     C	            ADD CX,50
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB DX,50
			     C	            SUB CX,100
			     C	        ;}
			     C	    INC CX
			     C	    CMP CX,420
			     C	    JNZ RW
			     C	    MOV CX,380
			     C	    INC DX
			     C	    CMP DX,330
			     C	    JNZ CLM
			     C	;}
			     C	    MOV DX,320
			     C	    MOV CX,530
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMM: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-13


			     C	        ROOW:
			     C	        INT 10H
			     C	        ;{ HORIZONTAL LINS OF 'E'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,665
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,345 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,355
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,665
			     C	                JA F
			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,345 
			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,355
			     C	                JB CON9
			     C	                INT 10H
			     C	                CON9: 
			     C	            ;}
			     C	        SUB DX,30
			     C	        SUB CX,100
			     C	        ;}
			     C	
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,570
			     C	        JNZ ROOW
			     C	    MOV CX,530
			     C	    INC DX
			     C	    CMP DX,330
			     C	    JNZ CLMM
			     C	;}    
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-14


			     C	ENDM BUSTERWORD
				INCLUDE YWON.INC
			     C	YWN MACRO WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN
			     C	
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	       ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                CMP DX,STARTY + HEGITH / 2
			     C	                JA C
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	                SUB CX,WDTH - 10
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,WDTH / 2
			     C	                SUB CX,5
			     C	                INT 10H 
			     C	                ADD CX,5
			     C	                SUB CX,WDTH / 2
			     C	            ;}
			     C	
			     C	
			     C	         CON2:
			     C	         ;{     
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD CX,WDTH -10
			     C	                INT 10H
			     C	         
			     C	         ;}
			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-15


			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	         ;{
			     C	            ADD CX,30
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	
			     C	          ;{
			     C	                 ADD CX,20
			     C	                 INT 10H
			     C	                 ADD CX,WDTH - 7
			     C	                 INT 10H         
			     C	           ;}
			     C	         SUB CX,6*WDTH + 53
			     C	           
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
			     C	    JNZ ROW    
			     C	    ;}
			     C	
			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY + HEGITH / 2
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD DX,HEGITH / 2 - 10
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-16


			     C	            ADD CX, WDTH + 10
			     C	            INT 10H
			     C	            SUB DX, HEGITH - 10
			     C	            INT 10H
			     C	            ADD DX,HEGITH -10
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 20
			     C	            INT 10H
			     C	        ;}
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	            SUB DX,HEGITH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            SUB CX,4*WDTH+50
			     C	            ADD DX,HEGITH/2
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY + HEGITH / 2 + 10
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + 5* WDTH + 70 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + 6* WDTH + 57
			     C	        JNZ RWN
			     C	            ADD SI,1
			     C	            MOV CX,STARTX + 5* WDTH + 70
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-17


			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM YWN
				INCLUDE DRAW.INC
			     C	DRAW MACRO  WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN,CLMD,RWD
				,CLMDD,ROWDD,R,ROWRAW,ROWRAWW,CLMRAWW,K,CON8,CO
				N9,CON10,CON7,F
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	   
			     C	          ;INITAL POINT
			     C	      ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	            ;}
			     C	         CON2:
			     C	         SUB CX,WDTH - 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
			     C	    JNZ ROW    
			     C	    ;}
			     C	
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-18


			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY 
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,HEGITH - 10
			     C	            INT 10H
			     C	        ;}
			     C	            SUB DX, HEGITH - 10
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY +  10 
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMD: 
			     C	        RWD:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWD
			     C	            ADD SI,1
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
			     C	    JNZ CLMD
			     C	;}
			     C	
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + HEGITH
			     C	    MOV SI,STARTY + HEGITH
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-19


			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            DEC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWN
			     C	            DEC SI
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + HEGITH -  14
			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + 10
			     C	
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROWDD: 
			     C	        COLDD:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	            ;}
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH - 10
			     C	        JNZ COLDD
			     C	    MOV DX,STARTY +10      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 5
			     C	    JNZ ROWDD  
			     C	    ;}
			     C	    
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	
			     C	    ROWRAW: 
			     C	        COLRAW:
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            INT 10H
			     C	            ADD CX,WDTH - 10
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,STARTY +25
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,STARTY + 30 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
			     C	        CN:
			     C	        ;{
			     C	            ADD CX,20
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-20


			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	         SUB CX, 3*WDTH + 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COLRAW
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 25 
			     C	    JNZ ROWRAW    
			     C	    ;}
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMRAWW: 
			     C	        ROWRAWW:
			     C	        INT 10H
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,STARTX + 2 * WDTH + 10
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,STARTY + 25 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,STARTY + 35
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,STARTX + 2*WDTH + 10
			     C	                JA F
			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,STARTY + 25  
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-21


			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,STARTY + 35
			     C	                JB CON9
			     C	                INT 10H
			     C	                
			     C	            ;}
			     C	            CON9:
			     C	            SUB DX,30
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 -10
			     C	            ;} 
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                SUB CX,2*WDTH + 20
			     C	                SUB DX,HEGITH -10
			     C	            ;}
			     C	
			     C	        INC CX
			     C	        CMP CX,STARTX + 2* WDTH + 15
			     C	        JNZ ROWRAWW
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    INC DX
			     C	    CMP DX,STARTY + 10
			     C	    JNZ CLMRAWW
			     C	;}  
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM DRAW
				INCLUDE DCOL.INC
			     C	;----------------------------------------------
				-----------------------------------------------
				--------------
			     C	;  MACRO CHECK IF THE COLLISION OF TWO SQUARE G
				RIDS GIVEN THEIR SIZE AND UPPER LEFT VERTIX (ST
				ART POSITION)
			     C	;  COLLISION_STATUS = 0 IF THERE IS A COLLISION
				 ELSE IT IS EQUAL TO ONE 
			     C	;----------------------------------------------
				-----------------------------------------------
				--------------
			     C	DETECT_COLLISION MACRO STARTPOS_1X, STARTPOS_1Y
				, SIZE_1, STARTPOS_2X, STARTPOS_2Y, SIZE_2, COL
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-22


				LISION_STATUS
			     C	    LOCAL COMMUTATEX, SKIP_COMMUTATEX, NO_COLLI
				SION, COMMUTEY, SKIP_COMMUTATEY, END_DETECT_COL
				L
			     C	    PUSH AX
			     C	    PUSH BX
			     C	    PUSH CX
			     C	    PUSH DX
			     C	    PUSH BP
			     C	        ;DIVIDE THE FIRST SIZE BY 2
			     C	        MOV CX, SIZE_1
			     C	        SHR CX, 1
			     C	        ;DIVIDE THE SECOND SIZE BY 2
			     C	        MOV DX, SIZE_2
			     C	        SHR DX, 1
			     C	        ;GET THE SUPPOSED DISTANCE BETWEEN THEI
				R CENTERS
			     C	        MOV BP , 0
			     C	        ADD BP, DX
			     C	        ADD BP, CX
			     C	        ;INORDER TO MAKE SURE THE TWO SQUARES A
				RE COLLIDING NOT ONLY PASSING BY
			     C	        SUB BP ,3 
			     C	        ;GET THE ACTUAL DISTANCE BETWEEN THEIR 
				CENTERS
			     C	        ;GET THE CENTER X COORDINATE OF BOTH
			     C	        MOV AX, STARTPOS_1X
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2X
			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO X COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
				ERS IN X
			     C	        CMP AX,BX
			     C	        JL COMMUTATEX
			     C	        SUB AX ,BX
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEX
			     C	        COMMUTATEX: 
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEX:
			     C	        ;MAKE SIMILAR CHECKS TO THE ABOVE BUT I
				N Y COORDINATES
			     C	        MOV AX, STARTPOS_1Y
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2Y
			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO Y COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-23


				ERS IN Y
			     C	        CMP AX, BX
			     C	        JL COMMUTEY
			     C	        SUB AX,BX
			     C	        ;COMPARE WITH THE REQUIRED DISTANCE FOR
				 COLLISION
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEY
			     C	        COMMUTEY:
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEY:
			     C	        ;THEN THE TWO SQUARES COLLIDE
			     C	        MOV COLLISION_STATUS, 0
			     C	        JMP END_DETECT_COLL
			     C	
			     C	    NO_COLLISION:
			     C	    MOV COLLISION_STATUS, 1    
			     C	    END_DETECT_COLL:   
			     C	    POP BP
			     C	    POP DX
			     C	    POP CX
			     C	    POP BX
			     C	    POP AX
			     C	ENDM DETECT_COLLISION
				                    .MODEL COMPACT;TINY   :DATA
				+CODE = 64KB    
				                                ;SMALL  :DATA =
				 64KB AND CODE = 64KB
				                                ;MEDIUM :DATA =
				 64KB BUT NO CODE RESTRICTION
				                                ;COMPACT:CODE =
				 64KB BUT NO DATA RESTRICTION
				                                ;LARGE  :SINGLE
				 SET OF DATA CAN NOT EXCEED 64KB
				                                ;HUGE   :NO RES
				TRICTION
				;----------------------------------------------
				--------
				                    .STACK 64   ;64 BYTES FOR S
				TACK      
				;----------------------------------------------
				--------                    
				                    .DATA                      
				     
 0000  0037			UPPERBOUND_Y DW 55   ;THOSE BOUNDARY VALUES ARE
				 BASED ON 640*400 VIDEO MODE
 0002  0168			LOWERBOUND_Y DW 360
 0004  0000			LEFTBOUND_X DW 0
 0006  0280			RIGHTBOUND_X DW 640
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-24


				
 0008  00			BUFFER DB 0                    
 0009  0032			STARTPOS_X_PLAYER1 DW 50
 000B  0096			STARTPOS_Y_PLAYER1 DW 150
 000D  000A			TANK_HP_1 DW 10
 000F  0003			TANK_SPEED_1 DW 3
 0011  0001			TANK_DMG_1 DW 1                   ;DMG == DAMAG
				E OR STRENGTH                   
 0013  0002			ORIENTATION_PLAYER1 DW 2          ; (0 UP, 1 UP
				RIGHT, 2 RIGHT, 3 DOWNRIGHT, 4 DOWN)
				
 0015  0064			BULLET_1_START_POSITION_X DW 100  ;THE END POIN
				T OF TANK 1 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0017  00AF			BULLET_1_START_POSITION_Y DW 175
				
 0019  0226			STARTPOS_X_PLAYER2 DW 550
 001B  0096			STARTPOS_Y_PLAYER2 DW 150
 001D  000A			TANK_HP_2 DW 10
 001F  0003			TANK_SPEED_2 DW 3
 0021  0001			TANK_DMG_2 DW 1           ;DMG == DAMAGE OR STR
				ENGTH                     
 0023  0002			ORIENTATION_PLAYER2 DW 2  ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
				
 0025  0005			HEARTS_1_START_POSITION_X DW 5
 0027  000A			HEARTS_1_START_POSITION_Y DW 10
				
 0029  01AE			HEARTS_2_START_POSITION_X DW 430
 002B  000A			HEARTS_2_START_POSITION_Y DW 10
				
 002D  0005			PWRUP_BAR_1_START_POSITION_X DW 5
 002F  0020			PWRUP_BAR_1_START_POSITION_Y DW 32
				
 0031  01AE			PWRUP_BAR_2_START_POSITION_X DW 430
 0033  0020			PWRUP_BAR_2_START_POSITION_Y DW 32
				
 0035  0226			BULLET_2_START_POSITION_X DW 550  ;THE END POIN
				T OF TANK 2 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0037  00AF			BULLET_2_START_POSITION_Y DW 175
				
 0039  0064			BULLET_1_POSITION_X DW 100 ;THE POSITION OF THE
				 BULLET 1 AT ANY TIME AFTER IT IS FIRED
 003B  00AF			BULLET_1_POSITION_Y DW 175
 003D  0000			BULLET_1_STATUS DW 0  ;BULLET 1 EXISTS OR NOT 0
				 -> NOT EXISTING
 003F  0002			BULLET_1_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 0041  000A			BULLET_1_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 0043  0000			BULLET_1_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER1 INCREASE HIS BULLET SPEED 
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-25


 0045  0226			BULLET_2_POSITION_X DW 550 ;THE POSITION OF THE
				 BULLET 2 AT ANY TIME AFTER IT IS FIRED
 0047  00AF			BULLET_2_POSITION_Y DW 175
 0049  0000			BULLET_2_STATUS DW 0  ;BULLET 2 EXISTS OR NOT 0
				 -> NOT EXISTING
 004B  0002			BULLET_2_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 004D  000A			BULLET_2_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 004F  0000			BULLET_2_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER2 INCREASE HIS BULLET SPEED 
				
 0051  0002			BULLET_SPEED_POWERUPS DW 2 ;EVERY SPEED POWERUP
				 THE SPEED WILL INCREASE BY 2 (BUT HAVE LIMIT 3
				 TIMES AT MOST)
				
				
 0053  0000			STARTPOS_X_GHOST1 DW ?
 0055  0000			STARTPOS_Y_GHOST1 DW ?
 0057  0000			EXISTS_GHOST1 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0059  0000			MOTION_GHOST1 DW 0   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 005B  0000			POWERUP_GHOST1 DW 0  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE 
 005D  0000			STARTPOS_X_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 005F  0000			STARTPOS_Y_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0061  00			TYPE_GHOST1 DB 0     ; TO CHOOSE ONE OF THREE S
				HAPES OF GHOSTS  (0, 1, 2)
				
				
 0062  0000			STARTPOS_X_GHOST2 DW ?
 0064  0000			STARTPOS_Y_GHOST2 DW ?
 0066  0000			EXISTS_GHOST2 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0068  0001			MOTION_GHOST2 DW 1   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 006A  0001			POWERUP_GHOST2 DW 1  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
 006C  0000			STARTPOS_X_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 006E  0000			STARTPOS_Y_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0070  00			TYPE_GHOST2 DB 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
 0071  0000			STARTPOS_X_GHOST3 DW ?
 0073  0000			STARTPOS_Y_GHOST3 DW ?
 0075  0000			EXISTS_GHOST3 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0077  0002			MOTION_GHOST3 DW 2   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 0079  0002			POWERUP_GHOST3 DW 2  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-26


 007B  0000			STARTPOS_X_PORTAL3 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 007D  0000			STARTPOS_Y_PORTAL3 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 007F  0000			TYPE_GHOST3 DW 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
				
 0081  0078			TIME DW 120           ; TIMER TERMINATES THE GA
				ME WHEN ZERO
 0083  0004[			TIME_DECIMAL DB 4 DUP('$')    ;FOR DECIMAL REPR
				ESENTAION OF TIME ON SCREEN
	   24			
			 ]	
				
 0087  6255			RANDSEED DW 25173                ;RANDSEED USED
				 FOR RANDOMIZATION
 0089  00			PREV_SYS_SECOND  DB ?
 008A  0000			LOWER4MACRO DW ?
 008C  0000			UPPER4MACRO DW ?
				
				
 008E  0032			TANKSIZE DW 50       ; SIZE OF ANY DRAWN TANK
 0090  0032			PORTAL_SIZE DW 50    ;SIZE OF THE GHOST PORTAL 
 0092  0028			GHOSTSIZE DW 40      ; SIZE OF ANY GHOST
 0094  000A			BULLETSIZE DW 10     ; SIZE OF A BULLET
 0096  0014			HEARTSIZE DW 20      ;SIZE OF A HEART
 0098  0014			PRUP_ICON_SIZE DW 20 ;SIZE OF THE POWER-UP ICON
				S 
 009A  0068			LOGOSIZE DW 104      ;SIZE OF LOGO IN THE INTER
				FACE
				
 009C  0000			WINNER DW ?          ;THE WINNNER PLAYER NUMBER
				
 009E  01DB			LOGO_X DW 475        ;POSITION OF LOGO IN INTER
				FACE
 00A0  007D			LOGO_Y DW 125        ;POSITION OF LOGO IN INTER
				FACE
				
 00A2  50 52 45 53 53 20	MENUITEM1 DB 'PRESS F1 TO START CHATTING$'
       46 31 20 54 4F 20	
       53 54 41 52 54 20	
       43 48 41 54 54 49	
       4E 47 24			
 00BD  50 52 45 53 53 20	MENUITEM2 DB 'PRESS F2 TO START THE GAME$'
       46 32 20 54 4F 20	
       53 54 41 52 54 20	
       54 48 45 20 47 41	
       4D 45 24			
 00D8  50 52 45 53 53 20	MENUITEM3 DB 'PRESS ESC TO EXIT THE PROGRAM',10
				,13,'$'
       45 53 43 20 54 4F	
       20 45 58 49 54 20	
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-27


       54 48 45 20 50 52	
       4F 47 52 41 4D 0A	
       0D 24			
				
				
				;----------------------------------------------
				-----------------------------------------------
				------------
				.CODE                                          
				       
 0000				MAIN                PROC FAR        
 0000  B8 ---- R		   MOV     AX,@DATA   
 0003  8E D8			   MOV     DS,AX
 0005  8E C0			   MOV     ES,AX      
				 
 0007  E8 1F55 R		 CALL MAIN_MENU
				 
				;{PUT INITIAL VAULE FOR THE SEED
				   
 000A  B4 00			   MOV   AH, 0
 000C  CD 1A			   INT   1AH
 000E  89 16 0087 R		   MOV   RANDSEED, DX    ; SEED WITH THE SYSTEM
				 TIME
				
				;}
 0012				   MAINLOOP:
				   ;{
 0012  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 0015  BB 0100			         MOV    BX, 100H
 0018  CD 10			         INT    10H
				
				         PRINTNUM     TIME, TIME_DECIMAL    ;ma
				cro to display time
 001A  C6 06 0083 R 30       1	   mov TIME_DECIMAL, '0' 
 001F  C6 06 0084 R 30       1	   mov TIME_DECIMAL + 1, '0' 
 0024  BB 000A               1	   MOV BX, 10 
 0027  BE 0083 R             1	   MOV SI, OFFSET TIME_DECIMAL 
 002A  83 C6 03              1	   ADD SI, 3 
 002D  4E                    1	   DEC SI 
 002E  A1 0081 R             1	   MOV AX, TIME 
 0031                        1	   ??0000: 
 0031  2B D2                 1	      SUB DX, DX 
 0033  F7 F3                 1	      DIV BX 
 0035  80 CA 30              1	      OR DL, 30H 
 0038  88 14                 1	      MOV [SI], DL 
 003A  4E                    1	      DEC SI 
 003B  3D 0000               1	      CMP AX, 0 
 003E  77 F1                 1	      JA ??0000 
 0040  B4 02                 1	   MOV AH, 2 
 0042  B6 01                 1	   MOV DH, 1    ;Y POSITION FOR PRINTING 
 0044  B2 23                 1	   MOV DL, 35    ;X POSITION FOR PRINTING 
 0046  CD 10                 1	   INT 10H 
 0048  B4 09                 1	   MOV AH, 9H      ;PRINT THE NUMBER 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-28


 004A  BA 0083 R             1	   MOV DX, OFFSET TIME_DECIMAL 
 004D  CD 21                 1	   INT 21H 
 004F  83 3E 0081 R 00		         CMP    TIME, 0                    ;END
				 GAME AT TIME 0
 0054  74 71			         JE     ENDPROGRAM1
 0056  B4 2C			         MOV    AH, 2CH
 0058  CD 21			         INT    21H
 005A  3A 36 0089 R		         CMP    DH, PREV_SYS_SECOND
 005E  74 1B			         JE     NOTIMECHANGE
 0060  83 2E 0081 R 01		         SUB    TIME, 1                    ;DEC
				REASE THE 
 0065  A1 0081 R		         MOV    AX, TIME  ;TO CHECK IF 10 DIVID
				ES TIME THEN A NEW WAVE OF GHOST APPEAR
 0068  40			         INC    AX
 0069  B3 0A			         MOV    BL, 10
 006B  F6 F3			         DIV    BL
 006D  80 FC 00			         CMP    AH, 0
 0070  75 09			         JNE    NOGHOSTWAVE
				         ;{ IF IT'S TIME FOR NEW WAVE INITIALIZ
				E THEIR POSITIONS
 0072  E8 0610 R		               CALL    RANDOMIZE_GHOST1
 0075  E8 0789 R		               CALL    RANDOMIZE_GHOST2
 0078  E8 090D R		               CALL    RANDOMIZE_GHOST3
				         ;}
				         
				
 007B				         NOTIMECHANGE:
 007B				               NOGHOSTWAVE:
 007B  88 36 0089 R		                     MOV    PREV_SYS_SECOND, DH
				       ;CURRENT SECOND IS PREVIOUS FOR NEXT TIM
				E
				                     
 007F  E8 0B52 R		                     CALL   MOVE_GHOST1
 0082  E8 0C6D R		                     CALL   MOVE_GHOST2
 0085  E8 0D8A R		                     CALL   MOVE_GHOST3
				
				               ;{CHECK FOR COLLISIONS BETWEEN T
				HE GHOSTS AND TANK 1 IF THE GHOST EXISTS
 0088  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 008D  75 03			                     JNE SKIP_GHOST1_CHECK1
 008F  E8 1778 R		                        CALL CHECK_HIT_GHOST1_T
				ANK1
 0092				                     SKIP_GHOST1_CHECK1:
				
 0092  83 3E 0066 R 01		                     CMP EXISTS_GHOST2, 1
 0097  75 03			                     JNE SKIP_GHOST2_CHECK1
 0099  E8 180E R		                        CALL CHECK_HIT_GHOST2_T
				ANK1
 009C				                     SKIP_GHOST2_CHECK1:
				
 009C  83 3E 0075 R 01		                     CMP EXISTS_GHOST3, 1
 00A1  75 03			                     JNE SKIP_GHOST3_CHECK1
 00A3  E8 18A4 R		                        CALL CHECK_HIT_GHOST3_T
				ANK1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-29


 00A6				                     SKIP_GHOST3_CHECK1:
				               ;}
				
				               ;{SIMILAR CHECKS FOR COLLISIONS 
				BETWEEN THE GHOSTS AND TANK 2 IF THE GHOST EXIS
				TS
 00A6  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 00AB  75 03			                     JNE SKIP_GHOST1_CHECK2
 00AD  E8 193A R		                        CALL CHECK_HIT_GHOST1_T
				ANK2
 00B0				                     SKIP_GHOST1_CHECK2:
				
 00B0  83 3E 0066 R 01		                     CMP EXISTS_GHOST2, 1
 00B5  75 03			                     JNE SKIP_GHOST2_CHECK2
 00B7  E8 19D0 R		                        CALL CHECK_HIT_GHOST2_T
				ANK2
 00BA				                     SKIP_GHOST2_CHECK2:
				
 00BA  83 3E 0075 R 01		                     CMP EXISTS_GHOST3, 1
 00BF  75 03			                     JNE SKIP_GHOST3_CHECK3
 00C1  E8 1A66 R		                        CALL CHECK_HIT_GHOST3_T
				ANK2
 00C4				                     SKIP_GHOST3_CHECK3:
				               ;}
				
				               ;{USELESS BLOCK TO HANDLE JUMP O
				UT OF RANGE
 00C4  EB 04 90			                  JMP SKIP1
 00C7  E9 016E R		                  ENDPROGRAM1: JMP ENDPROGRAM
 00CA				                  SKIP1:
				               ;}
 00CA  E8 0DE6 R		                     CALL   DRAW_PORTALS
 00CD  E8 040C R		                     CALL   DRAW_TANK1
 00D0  E8 0509 R		                     CALL   DRAW_TANK2
 00D3  E8 1AFC R							      C
				ALL   DRAW_HEALTH_BAR_1
 00D6  E8 1B7E R						      	CALL   
				DRAW_HEALTH_BAR_2
 00D9  E8 0A91 R		                     CALL   DRAW_GHOST1
 00DC  E8 0BAC R		                     CALL   DRAW_GHOST2
 00DF  E8 0CC9 R		                     CALL   DRAW_GHOST3
 00E2  E8 0F65 R		                     CALL MOVE_BULLET_1
 00E5  E8 10C0 R		                     CALL MOVE_BULLET_2
				
				               ;{BEFORE CHECKING COLLISION WE M
				UST MAKE SURE THE BULLET EXISTS IN THE FIRST PL
				ACE
				                     ;CHECK HITTING ANY GHOST
 00E8  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00ED  75 03			                     JNE SKIP_BUL1_CHECKS1
 00EF  E8 11D1 R		                           CALL CHECK_HIT_BUL1_
				GHOST1
 00F2				                     SKIP_BUL1_CHECKS1:
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-30


 00F2  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00F7  75 03			                     JNE SKIP_BUL1_CHECKS2
 00F9  E8 1294 R		                           CALL CHECK_HIT_BUL1_
				GHOST2
 00FC				                     SKIP_BUL1_CHECKS2:
				
 00FC  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0101  75 03			                     JNE SKIP_BUL1_CHECKS3
 0103  E8 1357 R		                           CALL CHECK_HIT_BUL1_
				GHOST3
 0106				                     SKIP_BUL1_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 0106  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 010B  75 03			                     JNE SKIP_BUL1_CHECKS4
 010D  E8 113D R		                           CALL CHECK_HIT_BUL1_
				TANK2
 0110				                     SKIP_BUL1_CHECKS4:
				               ;}
				
				               ;{SIMILAR CHECKS FOR BULLET 2
				                     ;CHECK HITTING ANY GHOST
 0110  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0115  75 03			                     JNE SKIP_BUL2_CHECKS1
 0117  E8 14AE R		                           CALL CHECK_HIT_BUL2_
				GHOST1
 011A				                     SKIP_BUL2_CHECKS1:
				
 011A  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 011F  75 03			                     JNE SKIP_BUL2_CHECKS2
 0121  E8 1571 R		                           CALL CHECK_HIT_BUL2_
				GHOST2
 0124				                     SKIP_BUL2_CHECKS2:
				
 0124  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0129  75 03			                     JNE SKIP_BUL2_CHECKS3
 012B  E8 1634 R		                           CALL CHECK_HIT_BUL2_
				GHOST3
 012E				                     SKIP_BUL2_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 012E  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0133  75 03			                     JNE SKIP_BUL2_CHECKS4
 0135  E8 141A R		                           CALL CHECK_HIT_BUL2_
				TANK1
 0138				                     SKIP_BUL2_CHECKS4:
				               ;}
				
				               ;{DRAW POWER-UP BARS
 0138  E8 1C03 R		                  CALL DRW_PRUP_BAR_1
 013B  E8 1C84 R		                  CALL DRW_PRUP_BAR_2
				               ;}
				               
				               ;{CHECK IF THE TWO BULLETS COLLI
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-31


				DE
 013E  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0143  75 0A			                     JNE SKIP_HITTING_CHECK
 0145  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1 
 014A  75 03			                     JNE SKIP_HITTING_CHECK
 014C  E8 16F7 R		                        CALL BULLETS_HIT
 014F				                     SKIP_HITTING_CHECK:
				               ;}
				
 014F  E8 0EB4 R		                     CALL DRAW_BULLET_1
 0152  E8 1013 R		                     CALL DRAW_BULLET_2
				                    
				
				               ;{ DELAY 0.125 SECOND  WHERE DEL
				AY IN MELLISECOND IS CXDX  CX AND MSB AND DX AS
				 LSB
 0155  B9 0000			                     MOV     CX, 00H
 0158  BA C350			                     MOV     DX, 0C350H
 015B  B4 86			                     MOV     AH, 86H
 015D  CD 15			                     INT     15H
				               ;}
				               
				               ;{ IF(USER PRESS ANY KEY)
 015F  B4 01			                     MOV    AH, 1
 0161  CD 16			                     INT    16H
 0163  75 03			                     JNZ    CHECKKEY
				               ;}
 0165  E9 0012 R		                     JMP    MAINLOOP
 0168				            CHECKKEY:
				               ;{
 0168  E8 0318 R		                     CALL   USERINPUT
 016B  E9 0012 R		                     JMP    MAINLOOP
				               ;}
				
				
 016E				            ENDPROGRAM: 
				               ;{       
 016E  A1 001D R		                    MOV AX, TANK_HP_2
 0171  39 06 000D R		                    CMP TANK_HP_1,AX
 0175  74 14			                    JE DRAW_CASE
 0177  77 09			                    JA PLAYER1_WON
 0179  C7 06 009C R 0002	                    MOV WINNER,2
 017F  EB 07 90			                    JMP RESULT
				
 0182				                    PLAYER1_WON:
 0182  C7 06 009C R 0001	                    MOV WINNER,1
				
 0188				                    RESULT:
 0188  E8 1D05 R		                    CALL PLAYER_LOST
				
 018B				                  DRAW_CASE :
				                  ;(
				                    DRAW 60,60,190,190,03
 018B  50                    1	PUSH AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-32


 018C  51                    1	PUSH CX 
 018D  52                    1	PUSH DX 
 018E  53                    1	PUSH BX 
 018F  56                    1	PUSH SI 
 0190  57                    1	PUSH DI 
 0191  BA 00BE               1	    MOV DX,190 ; Y = 250 
 0194  B9 00BE               1	    MOV CX,190 ; X = 400 
 0197  B0 03                 1	    MOV AL,03 
 0199  B4 0C                 1	    MOV AH,0CH 
 019B                        1	    ??0001: 
 019B                        1	        ??0002: 
 019B  CD 10                 1	                INT 10H 
 019D  83 C1 32              1	                ADD CX, 60 - 10 
 01A0  CD 10                 1	                INT 10H 
 01A2                        1	         ??0004: 
 01A2  83 E9 32              1	         SUB CX,60 - 10 
 01A5  42                    1	        INC DX 
 01A6  81 FA 00FA            1	        CMP DX,190 + 60 
 01AA  75 EF                 1	        JNZ ??0002 
 01AC  BA 00BE               1	    MOV DX,190 
 01AF  41                    1	    INC CX 
 01B0  81 F9 00C8            1	    CMP CX,190 + 10 
 01B4  75 E5                 1	    JNZ ??0001 
 01B6  B9 00BE               1	    MOV CX,190 
 01B9  BA 00BE               1	    MOV DX,190 
 01BC                        1	    ??0005: 
 01BC                        1	        ??0007: 
 01BC  CD 10                 1	            INT 10H 
 01BE  83 C2 32              1	            ADD DX,60 - 10 
 01C1  CD 10                 1	            INT 10H 
 01C3  83 EA 32              1	            SUB DX, 60 - 10 
 01C6  41                    1	        INC CX 
 01C7  81 F9 00FA            1	        CMP CX,190 + 60 
 01CB  75 EF                 1	        JNZ ??0007 
 01CD  B9 00BE               1	    MOV CX,190 
 01D0  42                    1	    INC DX 
 01D1  81 FA 00C8            1	    CMP DX,190 +  10 
 01D5  75 E5                 1	    JNZ ??0005 
 01D7  B9 00FA               1	    MOV CX,190 + 60 
 01DA  BA 00BE               1	    MOV DX,190 
 01DD  BE 00BE               1	    MOV SI,190 
 01E0                        1	    ??0009: 
 01E0                        1	        ??000A: 
 01E0  CD 10                 1	            INT 10H 
 01E2  41                    1	            INC CX 
 01E3  42                    1	            INC DX 
 01E4  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 01E8  75 F6                 1	        JNZ ??000A 
 01EA  83 C6 01              1	            ADD SI,1 
 01ED  B9 00FA               1	            MOV CX,190 + 60 
 01F0  8B D6                 1	            MOV DX,SI 
 01F2  81 FA 00CC            1	            CMP DX,190 + 14 
 01F6  75 E8                 1	    JNZ ??0009 
 01F8  B9 00FA               1	    MOV CX,190 + 60 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-33


 01FB  BA 00FA               1	    MOV DX,190 + 60 
 01FE  BE 00FA               1	    MOV SI,190 + 60 
 0201                        1	    ??0006: 
 0201                        1	        ??0008: 
 0201  CD 10                 1	            INT 10H 
 0203  41                    1	            INC CX 
 0204  4A                    1	            DEC DX 
 0205  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 0209  75 F6                 1	        JNZ ??0008 
 020B  4E                    1	            DEC SI 
 020C  B9 00FA               1	            MOV CX,190 + 60 
 020F  8B D6                 1	            MOV DX,SI 
 0211  81 FA 00EC            1	            CMP DX,190 + 60 -  14 
 0215  75 EA                 1	    JNZ ??0006 
 0217  B9 00FA               1	    MOV CX,190 + 60 
 021A  BA 00C8               1	    MOV DX,190 + 10 
 021D                        1	    ??000C: 
 021D                        1	        COLDD: 
 021D  CD 10                 1	                INT 10H 
 021F  42                    1	        INC DX 
 0220  81 FA 00F0            1	        CMP DX,190 + 60 - 10 
 0224  75 F7                 1	        JNZ COLDD 
 0226  BA 00C8               1	    MOV DX,190 +10 
 0229  41                    1	    INC CX 
 022A  81 F9 00FF            1	    CMP CX,190 + 60 + 5 
 022E  75 ED                 1	    JNZ ??000C 
 0230  B9 0109               1	    MOV CX,190 + 60 + 15 
 0233  BA 00BE               1	    MOV DX, 190 
 0236                        1	    ??000E: 
 0236                        1	        COLRAW: 
 0236  CD 10                 1	            INT 10H 
 0238  83 C1 32              1	            ADD CX,60 - 10 
 023B  81 FA 00D7            1	                    CMP DX,190 +25 
 023F  77 05                 1	                    JA ??000D 
 0241  CD 10                 1	                    INT 10H 
 0243  EB 09 90              1	                    JMP CN 
 0246  81 FA 00DC            1	                    ??000D: CMP DX,190 + 30 
 024A  72 02                 1	                    JB CN 
 024C  CD 10                 1	                    INT 10H 
 024E                        1	        CN: 
 024E  83 C1 14              1	            ADD CX,20 
 0251  CD 10                 1	            INT 10H 
 0253  83 C1 32              1	            ADD CX,60 -10 
 0256  CD 10                 1	            INT 10H 
 0258  83 C1 14              1	            ADD CX,20 
 025B  CD 10                 1	            INT 10H 
 025D  83 C1 1E              1	            ADD CX,60/2 
 0260  83 E9 05              1	            SUB CX,5 
 0263  CD 10                 1	            INT 10H 
 0265  83 E9 1E              1	            SUB CX,60/2 
 0268  83 C1 05              1	            ADD CX,5 
 026B  83 C1 32              1	            ADD CX,60 -10 
 026E  CD 10                 1	            INT 10H 
 0270  81 E9 00BE            1	         SUB CX, 3*60 + 10 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-34


 0274  42                    1	        INC DX 
 0275  81 FA 00FA            1	        CMP DX,190 + 60 
 0279  75 BB                 1	        JNZ COLRAW 
 027B  BA 00BE               1	    MOV DX,190 
 027E  41                    1	    INC CX 
 027F  81 F9 0113            1	    CMP CX,190 + 60 + 25 
 0283  75 B1                 1	    JNZ ??000E 
 0285  B9 0109               1	    MOV CX,190 + 60 + 15 
 0288  BA 00BE               1	    MOV DX, 190 
 028B                        1	    ??0010: 
 028B                        1	        ??000F: 
 028B  CD 10                 1	        INT 10H 
 028D  83 C2 14              1	            ADD DX,20 
 0290  81 F9 0140            1	                CMP CX,190 + 2 * 60 + 10 
 0294  77 05                 1	                JA ??0011 
 0296  CD 10                 1	                INT 10H 
 0298  EB 11 90              1	                JMP ??0012 
 029B  81 FA 00D7            1	                ??0011: CMP DX,190 + 25 
 029F  77 0A                 1	                JA ??0012 
 02A1  CD 10                 1	                INT 10H 
 02A3  81 FA 00E1            1	                ??0015: CMP DX,190 + 35 
 02A7  72 02                 1	                JB ??0012 
 02A9  CD 10                 1	                INT 10H 
 02AB  83 C2 0A              1	                ??0012: ADD DX,10 
 02AE  81 F9 0140            1	                CMP CX,190 + 2*60 + 10 
 02B2  77 05                 1	                JA ??0016 
 02B4  CD 10                 1	                INT 10H 
 02B6  EB 11 90              1	                JMP ??0013 
 02B9  81 FA 00D7            1	                ??0016: CMP DX,190 + 25 
 02BD  77 02                 1	                JA ??0014 
 02BF  CD 10                 1	                INT 10H 
 02C1  81 FA 00E1            1	                ??0014: CMP DX,190 + 35 
 02C5  72 02                 1	                JB ??0013 
 02C7  CD 10                 1	                INT 10H 
 02C9                        1	            ??0013: 
 02C9  83 EA 1E              1	            SUB DX,30 
 02CC  83 C1 46              1	                ADD CX,60 + 10 
 02CF  CD 10                 1	                INT 10H 
 02D1  83 C2 1E              1	                ADD DX,60/2 
 02D4  CD 10                 1	                INT 10H 
 02D6  83 C2 14              1	                ADD DX,60/2 -10 
 02D9  83 C1 46              1	                ADD CX,60 + 10 
 02DC  CD 10                 1	                INT 10H 
 02DE  81 E9 008C            1	                SUB CX,2*60 + 20 
 02E2  83 EA 32              1	                SUB DX,60 -10 
 02E5  41                    1	        INC CX 
 02E6  81 F9 0145            1	        CMP CX,190 + 2* 60 + 15 
 02EA  75 9F                 1	        JNZ ??000F 
 02EC  B9 0109               1	    MOV CX,190 + 60 + 15 
 02EF  42                    1	    INC DX 
 02F0  81 FA 00C8            1	    CMP DX,190 + 10 
 02F4  75 95                 1	    JNZ ??0010 
 02F6  5F                    1	POP DI 
 02F7  5E                    1	POP SI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-35


 02F8  5B                    1	POP BX 
 02F9  5A                    1	POP DX 
 02FA  59                    1	POP CX 
 02FB  58                    1	POP AX 
 02FC  B4 4C			                    MOV    AH,4CH
 02FE  CD 21			                    INT    21H
				                  ;)  
				               ;}
 0300				MAIN                ENDP   
				
				;----------------------------------------------
				--------------------------------------
				;  _    _   _____  ______  _____    _____  _   
				_  _____   _    _  _______  
				; | |  | | / ____||  ____||  __ \  |_   _|| \ |
				 ||  __ \ | |  | ||__   __| 
				; | |  | || (___  | |__   | |__) |   | |  |  \|
				 || |__) || |  | |   | |    
				; | |  | | \___ \ |  __|  |  _  /    | |  | . `
				 ||  ___/ | |  | |   | |    
				; | |__| | ____) || |____ | | \ \   _| |_ | |\ 
				 || |     | |__| |   | |    
				;  \____/ |_____/ |______||_|  \_\ |_____||_| \
				_||_|      \____/    |_|    
				;----------------------------------------------
				--------------------------------------         
				                                               
				                 
				                                               
				                           
				
				;----------------------------------------------
				--------------------------
				; CLEARS KEYBOARD BUFFER
				;----------------------------------------------
				----------------------------
 0300				CLEARKEYBOARDBUFFER		PROC	NEAR
 0300  50				PUSH		AX
 0301  06				PUSH		ES
 0302  B8 0000				MOV		AX, 0000H
 0305  8E C0				MOV		ES, AX
 0307  26: C7 06 041A 041E		MOV		ES:[041AH], 041EH
 030E  26: C7 06 041C 041E		MOV		ES:[041CH], 041EH
								; CLEARS KEYBOA
				RD BUFFER
 0315  07				POP		ES
 0316  58				POP		AX
 0317  C3				RET
 0318				CLEARKEYBOARDBUFFER		ENDP 
				
				;----------------------------------------------
				--------------------------
				; TAKE ACTION BASED ON USER INPUT
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-36


				----------------------------
 0318				USERINPUT PROC 
				;{    
				      ;{SAVE DATA
 0318  50			         PUSH    AX
 0319  53			         PUSH    BX
 031A  51			         PUSH    CX
 031B  52			         PUSH    DX
				      ;}
				      ;{ TAKE THE USER INPUT FROM THE KEYBOARD 
				BUFFER
 031C  B4 00			         MOV    AH, 0
 031E  CD 16			         INT    16H      
 0320  E8 0300 R		         CALL   CLEARKEYBOARDBUFFER  
				      ;} 
				   
 0323				      MOVEUP1:
				      ;{
 0323  3C 77			         CMP    AL, 'w' 
 0325  75 17			         JNE    MOVEDOWN1
 0327  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 032B  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 032F  2B CB			         SUB    CX, BX
 0331  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0334  7C 4A			         JL     BACKTOMAINLOOP_1
 0336  83 2E 000B R 03		         SUB    STARTPOS_Y_PLAYER1, 3
 033B  EB 43 90			         JMP    BACKTOMAINLOOP_1     
				      ;}
				      
 033E				      MOVEDOWN1:
				      ;{
 033E  3C 73			         CMP    AL, 's' 
 0340  75 1B			         JNE    ORIENT_UP1
 0342  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 0346  03 0E 008E R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 034A  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 034E  2B D9			         SUB    BX, CX
 0350  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0353  7C 2B			         JL     BACKTOMAINLOOP_1
 0355  83 06 000B R 03		         ADD    STARTPOS_Y_PLAYER1, 3
 035A  EB 24 90			         JMP    BACKTOMAINLOOP_1 
				      ;}
				      
 035D				      ORIENT_UP1:
				      ;{
 035D  3C 71			         CMP    AL, 'q' 
 035F  75 0F			         JNE    ORIENT_DOWN1
 0361  83 3E 0013 R 00		         CMP    ORIENTATION_PLAYER1, 0
 0366  74 18			         JE     BACKTOMAINLOOP_1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-37


 0368  83 2E 0013 R 01		         SUB    ORIENTATION_PLAYER1, 1 
 036D  EB 11 90			         JMP    BACKTOMAINLOOP_1
				      ;}
				   
 0370				      ORIENT_DOWN1:
				      ;{
 0370  3C 65			         CMP    AL, 'e' 
 0372  75 0F			         JNE    FIREBULLET1
 0374  83 3E 0013 R 04		         CMP    ORIENTATION_PLAYER1, 4
 0379  74 05			         JE     BACKTOMAINLOOP_1
 037B  83 06 0013 R 01		         ADD    ORIENTATION_PLAYER1, 1 
 0380				         BACKTOMAINLOOP_1:      ;JUST A MIDDLE 
				JUMP TO USE IT FOR THE PREVIOUS LABELS
 0380  E9 0407 R		         JMP    BACKTOMAINLOOP         
				      ;}
				
 0383				      FIREBULLET1:
				      ;{
 0383  3C 20			         CMP AL, 32 
 0385  75 06			         JNE MOVEUP2
 0387  E8 0E83 R		         CALL FIRE_BULLET_1
 038A  EB 7B 90			         JMP BACKTOMAINLOOP
				      ;}
				
 038D				      MOVEUP2:
				      ;{
 038D  3C 69			         CMP    AL, 'i' 
 038F  75 17			         JNE    MOVEDOWN2
 0391  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 0395  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 0399  2B CB			         SUB    CX, BX
 039B  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 039E  7C 67			         JL     BACKTOMAINLOOP
 03A0  83 2E 001B R 03		         SUB    STARTPOS_Y_PLAYER2, 3
 03A5  EB 60 90			         JMP    BACKTOMAINLOOP   
				      ;}
				      
 03A8				      MOVEDOWN2:
				      ;{
 03A8  3C 6B			         CMP    AL, 'k' 
 03AA  75 1B			         JNE    ORIENT_UP2
 03AC  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 03B0  03 0E 008E R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 03B4  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 03B8  2B D9			         SUB    BX, CX
 03BA  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 03BD  7C 48			         JL     BACKTOMAINLOOP
 03BF  83 06 001B R 03		         ADD    STARTPOS_Y_PLAYER2, 3
 03C4  EB 41 90			         JMP    BACKTOMAINLOOP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-38


				      ;}
				      
 03C7				      ORIENT_UP2:
				      ;{
 03C7  3C 6F			         CMP    AL, 'o' 
 03C9  75 0F			         JNE    ORIENT_DOWN2
 03CB  83 3E 0023 R 00		         CMP    ORIENTATION_PLAYER2, 0
 03D0  74 35			         JE     BACKTOMAINLOOP
 03D2  83 2E 0023 R 01		         SUB    ORIENTATION_PLAYER2, 1 
 03D7  EB 2E 90			         JMP    BACKTOMAINLOOP
				      ;}
				
 03DA				      ORIENT_DOWN2:
				      ;{
 03DA  3C 75			         CMP    AL, 'u' 
 03DC  75 0F			         JNE    FIRE_BULLET_2
 03DE  83 3E 0023 R 04		         CMP    ORIENTATION_PLAYER2, 4
 03E3  74 22			         JE     BACKTOMAINLOOP
 03E5  83 06 0023 R 01		         ADD    ORIENTATION_PLAYER2, 1 
 03EA  EB 1B 90			         JMP    BACKTOMAINLOOP          
				      ;}
				
 03ED				      FIRE_BULLET_2:
				      ;{
 03ED  3C 0D			         CMP AL , 13
 03EF  75 06			         JNE EXITPROG
 03F1  E8 0FE2 R		         CALL FIRE_BULLET2
 03F4  EB 11 90			         JMP BACKTOMAINLOOP
				      ;}
				
 03F7				      EXITPROG:
				      ;{
 03F7  3C 1B			         CMP    AL,1BH
 03F9  75 0C			         JNE    BACKTOMAINLOOP
 03FB  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 03FE  BB 0100			         MOV    BX, 100H
 0401  CD 10			         INT    10H
 0403  B4 4C			         MOV    AH, 4CH
 0405  CD 21			         INT    21H
				      ;}
				
				      ;{RETURN STORED DATA
 0407				         BACKTOMAINLOOP:
 0407  5A			         POP DX
 0408  59			         POP CX
 0409  5B			         POP BX
 040A  58			         POP AX
				      ;}   
 040B  C3			RET
 040C				USERINPUT		ENDP 
				;----------------------------------------------
				------------------------------
				;  _______         _   _  _  __
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-39


				; |__   __| /\    | \ | || |/ /
				;    | |   /  \   |  \| || ' / 
				;    | |  / /\ \  | . ` ||  <  
				;    | | / ____ \ | |\  || . \ 
				;    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				------------------------------                 
				             
				;----------------------------------------------
				----------------------------
				; DRAWS THE FIRST PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 040C				DRAW_TANK1 PROC 
				;{
				    ;{SAVE DATA  
 040C  50			      PUSH   AX
 040D  53			      PUSH   BX
 040E  51			      PUSH    CX
 040F  52			      PUSH   DX
				   ;}
				   
				   ;{;TO STORE THE TANK SIZE TO BE SENT TO THE 
				DRAWING MACRO
 0410  8B 1E 008E R		      MOV    BX, TANKSIZE    
 0414  83 3E 0013 R 00		      CMP    ORIENTATION_PLAYER1, 0
 0419  75 27			      JNE    UPRIGHT
				   ;}
				
				   ;{ IF(ORIENTATION IS UP)
 041B  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER1
				      
				      ;SET BULLET 1 STARTING POSITION X,Y
 041E  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 0420  D1 E8			      SHR AX , 1    
 0422  8B 16 0009 R		      MOV DX, STARTPOS_X_PLAYER1
 0426  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 0428  A1 0094 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 042B  D1 E8			      SHR AX, 1      
 042D  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 042F  89 16 0015 R		      MOV BULLET_1_START_POSITION_X,DX
 0433  8B 0E 000B R		      MOV CX, STARTPOS_Y_PLAYER1
 0437  2B 0E 0094 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 043B  89 0E 0017 R		      MOV BULLET_1_START_POSITION_Y, CX
				
 043F  E9 04DB R		      JMP    DRAWTANK 
				   ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-40


 0442				   UPRIGHT:
				      ;{   
 0442  83 3E 0013 R 01		         CMP    ORIENTATION_PLAYER1, 1
 0447  75 1C			         JNE    RIGHT
				            ;{ IF(ORIENTATION IS UPRIGHT)
 0449  BE 0000 E		               MOV    SI, OFFSET BITMAP_UPRIGHT
				_PLAYER1
				
				               ;SET BULLET 1 STARTING POSITION 
				X,Y
 044C  8B 16 0009 R		               MOV DX, STARTPOS_X_PLAYER1
 0450  03 D3			               ADD DX, BX  ;MOVE TO THE TOP RIG
				HT VERTIX BY ADDING TANK SIZE
 0452  89 16 0015 R		               MOV BULLET_1_START_POSITION_X, D
				X
 0456  8B 16 000B R		               MOV DX, STARTPOS_Y_PLAYER1
 045A  2B 16 0094 R		               SUB DX, BULLETSIZE
 045E  89 16 0017 R		               MOV BULLET_1_START_POSITION_Y, D
				X ;BULLET DRAWING STARTING POINT IS ABOVE THE C
				ANON BY BULLET SIZE
				
 0462  EB 77 90			               JMP    DRAWTANK  
				            ;}
				      ;}
 0465				   RIGHT:
				   ;{
 0465  83 3E 0013 R 02		         CMP    ORIENTATION_PLAYER1, 2
 046A  75 2A			         JNE    DOWNRIGHT
				         ;{ IF(ORIENTATION IS RIGHT)
 046C  BE 0000 E		            MOV    SI, OFFSET BITMAP_RIGHT_PLAY
				ER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 046F  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 0473  03 D3			            ADD DX , BX   ;ADD THE TANK SIZE TO
				 REACH THE TOP RIGHT VERTIX
 0475  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 0479  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 047B  D1 E8			            SHR AX, 1 
 047D  8B D0			            MOV DX, AX
 047F  A1 0094 R		            MOV AX, BULLETSIZE
 0482  D1 E8			            SHR AX, 1
 0484  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 0486  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 0489  8B 0E 000B R		            MOV CX, STARTPOS_Y_PLAYER1
 048D  03 CA			            ADD CX, DX
 048F  89 0E 0017 R		            MOV BULLET_1_START_POSITION_Y, CX  
				           
				            
 0493  EB 46 90			              JMP DRAWTANK
				         ;}
				   ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-41


 0496				   DOWNRIGHT:
				   ;{
 0496  83 3E 0013 R 03		         CMP    ORIENTATION_PLAYER1, 3
 049B  75 1A			         JNE    DOWN1
				         ;{ IF(ORIENTATION IS DOWNRIGHT)
 049D  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNRIGHT_
				PLAYER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 04A0  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 04A4  03 D3			            ADD DX, BX ;ADD TANK SIZE TO REACH 
				THE TOP RIGHT VERTIX OF THE TANK
 04A6  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 04AA  8B 16 000B R		            MOV DX, STARTPOS_Y_PLAYER1
 04AE  03 D3			            ADD DX, BX ;ADD THE TANK SIZE IN Y 
				TO GO TO THE BOTTOM LEFT VERTIX
 04B0  89 16 0017 R		            MOV BULLET_1_START_POSITION_Y, DX
				            
 04B4  EB 25 90			            JMP DRAWTANK  
				         ;}
				   ;}
				
				    
 04B7				   DOWN1:
				   ;{
 04B7  BE 0000 E		         MOV    SI, OFFSET BITMAP_DOWN_PLAYER1
				
				         ;SET BULLET 1 STARTING POSITION X,Y
 04BA  8B C3			         MOV AX , BX ;GET HALF THE TANK SIZE
 04BC  D1 E8			         SHR AX,1
 04BE  8B D0			         MOV DX, AX
 04C0  A1 0094 R		         MOV AX, BULLETSIZE
 04C3  D1 E8			         SHR AX,1
 04C5  2B D0			         SUB DX, AX  ;SUBTRACT HALF THE BULLETS
				IZE TO REACH TOP LEFT VERTIX OF THE BULLET
 04C7  8B 0E 0009 R		         MOV CX, STARTPOS_X_PLAYER1
 04CB  03 CA			         ADD CX, DX
 04CD  89 0E 0015 R		         MOV BULLET_1_START_POSITION_X, CX
 04D1  8B 16 000B R		         MOV DX,STARTPOS_Y_PLAYER1
 04D5  03 D3			         ADD DX, BX  ;ADD TANK SIZE TO REACH TH
				E BOTTOM END
 04D7  89 16 0017 R		         MOV BULLET_1_START_POSITION_Y, DX     
				         
				   ;}
 04DB				   DRAWTANK:
				   ;{
				         DRAW_OBJECT    TANKSIZE, SI, STARTPOS_
				X_PLAYER1, STARTPOS_Y_PLAYER1
 04DB  51                    1	   PUSH CX 
 04DC  53                    1	   PUSH BX 
 04DD  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 04DF  8B 16 000B R          1	   MOV     DX, STARTPOS_Y_PLAYER1     ; Y TO ST
				ART DRAWING AT 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-42


 04E3  8B 2E 008E R          1	   MOV BP, TANKSIZE 
 04E7  8A 3C                 1	   MOV BH, [SI] 
 04E9                        1	   ??0018:;{ FOR(BP = 50; BD > 0; BP--) 
 04E9  8B 0E 0009 R          1	      MOV     CX, STARTPOS_X_PLAYER1    ; X TO 
				START 
 04ED  8B 3E 008E R          1	      MOV DI, TANKSIZE 
 04F1                        1	      ??0017:;{ FOR(DX = 50; DX > 0; DX--) 
 04F1  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 04F2  3A F8                 1	         CMP BH ,AL 
 04F4  74 04                 1	         JE ??0019 
 04F6  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 04F8  CD 10                 1	         INT     10H 
 04FA                        1	         ??0019: 
 04FA  41                    1	         INC     CX         ; NEXT X POSITION 
 04FB  4F                    1	         DEC     DI 
 04FC  75 F3                 1	         JNZ     ??0017 
 04FE  42                    1	      INC     DX         ; NEXT Y POSITION 
 04FF  4D                    1	      DEC     BP 
 0500  75 E7                 1	      JNZ     ??0018 
 0502  5B                    1	      POP BX 
 0503  59                    1	      POP CX 
				   ;}
				   ;{GET DATA STORED
 0504  5A			      POP DX
 0505  59			      POP CX
 0506  5B			      POP BX
 0507  58			      POP AX
				   ;}
 0508  C3			RET
				;}
 0509				DRAW_TANK1	ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE SECOND PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 0509				DRAW_TANK2 PROC 
				;{
				   ;{STORE DATA
 0509  50			      PUSH    AX
 050A  53			      PUSH    BX
 050B  51			      PUSH    CX
 050C  52			      PUSH    DX
				   ;}   
 050D  8B 1E 008E R		   MOV    BX, TANKSIZE    ;TO STORE THE TANK SI
				ZE TO BE SENT TO THE DRAWING MACRO
 0511  83 3E 0023 R 00		   CMP    ORIENTATION_PLAYER2, 0
 0516  75 27			   JNE    UPLEFT
				   ;{ IF(ORIENTATION IS UP)
 0518  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-43


				
				      ;SET BULLET 2 STARTING POSITION X,Y
 051B  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 051D  D1 E8			      SHR AX , 1    
 051F  8B 16 0019 R		      MOV DX, STARTPOS_X_PLAYER2
 0523  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 0525  A1 0094 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 0528  D1 E8			      SHR AX, 1      
 052A  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 052C  89 16 0035 R		      MOV BULLET_2_START_POSITION_X,DX
 0530  8B 0E 001B R		      MOV CX, STARTPOS_Y_PLAYER2
 0534  2B 0E 0094 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 0538  89 0E 0037 R		      MOV BULLET_2_START_POSITION_Y, CX
				      
 053C  E9 05E2 R		      JMP    DRAWTANK2
				   ;}
 053F				   UPLEFT: 
				   ;{  
 053F  83 3E 0023 R 01		      CMP    ORIENTATION_PLAYER2, 1
 0544  75 1E			      JNE    LEFT
				         ;{ IF(ORIENTATION IS UPLEFT)
 0546  BE 0000 E		            MOV    SI, OFFSET BITMAP_UPLEFT_PLA
				YER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 0549  8B 16 0094 R		            MOV DX, BULLETSIZE
 054D  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 0551  2B CA			            SUB CX, DX 
 0553  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 0557  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 055B  2B CA			            SUB CX , DX 
 055D  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				            
 0561  EB 7F 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 0564				   LEFT:
				   ;{
 0564  83 3E 0023 R 02		      CMP    ORIENTATION_PLAYER2, 2
 0569  75 2E			      JNE    DOWNLEFT
				         ;{ IF(ORIENTATION IS LEFT)
 056B  BE 0000 E		            MOV    SI, OFFSET BITMAP_LEFT_PLAYE
				R2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 056E  8B 16 0094 R		            MOV DX, BULLETSIZE
 0572  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2 
 0576  2B CA			            SUB CX, DX                    ;SUBT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-44


				RACT BULLET SIZE TO REACH THE TOP LEFT CORNER O
				F THE BULLET GRID
 0578  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
				
 057C  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 057E  D1 E8			            SHR AX, 1 
 0580  8B D0			            MOV DX, AX
 0582  A1 0094 R		            MOV AX, BULLETSIZE
 0585  D1 E8			            SHR AX, 1
 0587  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 0589  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 058C  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 0590  03 CA			            ADD CX, DX
 0592  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX  
				
 0596  EB 4A 90			            JMP    DRAWTANK2  
				         ;}
				   ;}   
 0599				   DOWNLEFT:
				   ;{
 0599  83 3E 0023 R 03		      CMP    ORIENTATION_PLAYER2, 3
 059E  75 1E			      JNE    DOWN2
				         ;{ IF(ORIENTATION IS DOWNLEFT)
 05A0  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNLEFT_P
				LAYER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 05A3  8B 16 0094 R		            MOV DX, BULLETSIZE
 05A7  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 05AB  2B CA			            SUB CX, DX        ;SUBTRACT BULLET 
				SIZE FROM STATRING POSITION TO REACH TOP LEFT V
				ERTIX OF THE BULLET GRID
 05AD  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 05B1  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 05B5  03 CB			            ADD CX, BX
 05B7  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				
 05BB  EB 25 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 05BE				   DOWN2:
				   ;{
 05BE  BE 0000 E		      MOV    SI, OFFSET BITMAP_DOWN_PLAYER2
				
				      ;SET BULLET 2 STARTING POSITION X,Y
 05C1  8B C3			      MOV AX , BX ;GET HALF THE TANK SIZE
 05C3  D1 E8			      SHR AX,1
 05C5  8B D0			      MOV DX, AX
 05C7  A1 0094 R		      MOV AX, BULLETSIZE
 05CA  D1 E8			      SHR AX,1
 05CC  2B D0			      SUB DX, AX  ;SUBTRACT HALF THE BULLETSIZE
				 TO REACH TOP LEFT VERTIX OF THE BULLET
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-45


 05CE  8B 0E 0019 R		      MOV CX, STARTPOS_X_PLAYER2
 05D2  03 CA			      ADD CX, DX
 05D4  89 0E 0035 R		      MOV BULLET_2_START_POSITION_X, CX
 05D8  8B 16 001B R		      MOV DX,STARTPOS_Y_PLAYER2
 05DC  03 D3			      ADD DX, BX  ;ADD TANK SIZE TO REACH THE B
				OTTOM END
 05DE  89 16 0037 R		      MOV BULLET_2_START_POSITION_Y, DX
				
				   ;}
 05E2				   DRAWTANK2:
				   ;{
				      DRAW_OBJECT     TANKSIZE, SI, STARTPOS_X_
				PLAYER2, STARTPOS_Y_PLAYER2
 05E2  51                    1	   PUSH CX 
 05E3  53                    1	   PUSH BX 
 05E4  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 05E6  8B 16 001B R          1	   MOV     DX, STARTPOS_Y_PLAYER2     ; Y TO ST
				ART DRAWING AT 
 05EA  8B 2E 008E R          1	   MOV BP, TANKSIZE 
 05EE  8A 3C                 1	   MOV BH, [SI] 
 05F0                        1	   ??001B:;{ FOR(BP = 50; BD > 0; BP--) 
 05F0  8B 0E 0019 R          1	      MOV     CX, STARTPOS_X_PLAYER2    ; X TO 
				START 
 05F4  8B 3E 008E R          1	      MOV DI, TANKSIZE 
 05F8                        1	      ??001A:;{ FOR(DX = 50; DX > 0; DX--) 
 05F8  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 05F9  3A F8                 1	         CMP BH ,AL 
 05FB  74 04                 1	         JE ??001C 
 05FD  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 05FF  CD 10                 1	         INT     10H 
 0601                        1	         ??001C: 
 0601  41                    1	         INC     CX         ; NEXT X POSITION 
 0602  4F                    1	         DEC     DI 
 0603  75 F3                 1	         JNZ     ??001A 
 0605  42                    1	      INC     DX         ; NEXT Y POSITION 
 0606  4D                    1	      DEC     BP 
 0607  75 E7                 1	      JNZ     ??001B 
 0609  5B                    1	      POP BX 
 060A  59                    1	      POP CX 
				   ;}
				   ;{GET DATA SOTRED
 060B  5A			      POP    DX
 060C  59			      POP    CX
 060D  5B			      POP    BX
 060E  58			      POP    AX
				   ;}
 060F  C3			RET
				;}
 0610				DRAW_TANK2	ENDP
				;----------------------------------------------
				---------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-46


				;   _____  _    _   ____    _____  _______ 
				;  / ____|| |  | | / __ \  / ____||__   __|
				; | |  __ | |__| || |  | || (___     | |   
				; | | |_ ||  __  || |  | | \___ \    | |   
				; | |__| || |  | || |__| | ____) |   | |   
				;  \_____||_|  |_| \____/ |_____/    |_|   
				;----------------------------------------------
				---------------------------------
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE FIRST GHOST
				;----------------------------------------------
				---------------------------
 0610				RANDOMIZE_GHOST1 PROC
				;{
				   ;{
 0610  50			      PUSH   AX
 0611  53			      PUSH   BX
 0612  51			      PUSH   CX
 0613  52			      PUSH   DX
				   ;}
 0614  C7 06 0057 R 0001	   MOV    EXISTS_GHOST1, 1
				   RANDOMIZE 0, 3, MOTION_GHOST1, RANDSEED
 061A  50                    1	   PUSH     AX 
 061B  53                    1	   PUSH     BX 
 061C  51                    1	   PUSH     CX 
 061D  52                    1	   PUSH     DX 
 061E  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0621  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0625  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0628  39 06 0087 R          1	   CMP     RANDSEED, AX 
 062C  75 08                 1	   JNE     ??001D 
 062E  B4 00                 1	   MOV     AH, 0 
 0630  CD 1A                 1	   INT     1AH 
 0632  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0636                        1	   ??001D: 
 0636  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0639  2B D2                 1	   SUB      DX, DX 
 063B  B9 0003               1	   MOV      CX, 3 
 063E  41                    1	   INC      CX 
 063F  83 E9 00              1	   SUB      CX, 0 
 0642  83 F9 00              1	   CMP CX, 0 
 0645  74 02                 1	   JE ??001E 
 0647  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0649                        1	   ??001E: 
 0649  83 C2 00              1	   ADD      DX, 0 
 064C  89 16 0059 R          1	   MOV      MOTION_GHOST1, DX 
 0650  5A                    1	   POP      DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-47


 0651  59                    1	   POP      CX 
 0652  5B                    1	   POP      BX 
 0653  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST1, RANDSEED
 0654  50                    1	   PUSH     AX 
 0655  53                    1	   PUSH     BX 
 0656  51                    1	   PUSH     CX 
 0657  52                    1	   PUSH     DX 
 0658  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 065B  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 065F  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0662  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0666  75 08                 1	   JNE     ??001F 
 0668  B4 00                 1	   MOV     AH, 0 
 066A  CD 1A                 1	   INT     1AH 
 066C  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0670                        1	   ??001F: 
 0670  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0673  2B D2                 1	   SUB      DX, DX 
 0675  B9 0002               1	   MOV      CX, 2 
 0678  41                    1	   INC      CX 
 0679  83 E9 00              1	   SUB      CX, 0 
 067C  83 F9 00              1	   CMP CX, 0 
 067F  74 02                 1	   JE ??0020 
 0681  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0683                        1	   ??0020: 
 0683  83 C2 00              1	   ADD      DX, 0 
 0686  89 16 005B R          1	   MOV      POWERUP_GHOST1, DX 
 068A  5A                    1	   POP      DX 
 068B  59                    1	   POP      CX 
 068C  5B                    1	   POP      BX 
 068D  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST1, RANDSEED 
 068E  50                    1	   PUSH     AX 
 068F  53                    1	   PUSH     BX 
 0690  51                    1	   PUSH     CX 
 0691  52                    1	   PUSH     DX 
 0692  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0695  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0699  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 069C  39 06 0087 R          1	   CMP     RANDSEED, AX 
 06A0  75 08                 1	   JNE     ??0021 
 06A2  B4 00                 1	   MOV     AH, 0 
 06A4  CD 1A                 1	   INT     1AH 
 06A6  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-48


 06AA                        1	   ??0021: 
 06AA  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 06AD  2B D2                 1	   SUB      DX, DX 
 06AF  B9 0002               1	   MOV      CX, 2 
 06B2  41                    1	   INC      CX 
 06B3  83 E9 00              1	   SUB      CX, 0 
 06B6  83 F9 00              1	   CMP CX, 0 
 06B9  74 02                 1	   JE ??0022 
 06BB  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 06BD                        1	   ??0022: 
 06BD  83 C2 00              1	   ADD      DX, 0 
 06C0  89 16 0061 R          1	   MOV      TYPE_GHOST1, DX 
main.ASM(843): warning A4031: Operand types must match
 06C4  5A                    1	   POP      DX 
 06C5  59                    1	   POP      CX 
 06C6  5B                    1	   POP      BX 
 06C7  58                    1	   POP      AX 
				
				   ;{  TO START APPROX IN THE MIDDLE
 06C8  A1 0002 R		   MOV AX, LOWERBOUND_Y
 06CB  03 06 0000 R		   ADD AX, UPPERBOUND_Y
 06CF  D1 E8			   SHR AX, 1
 06D1  8B D8			   MOV BX, AX
 06D3  2D 0014			   SUB AX, 20
 06D6  83 C3 14			   ADD BX, 20
 06D9  A3 008A R		   MOV LOWER4MACRO, AX      
 06DC  89 1E 008C R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST1, RANDSEED
 06E0  50                    1	   PUSH     AX 
 06E1  53                    1	   PUSH     BX 
 06E2  51                    1	   PUSH     CX 
 06E3  52                    1	   PUSH     DX 
 06E4  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 06E7  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 06EB  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 06EE  39 06 0087 R          1	   CMP     RANDSEED, AX 
 06F2  75 08                 1	   JNE     ??0023 
 06F4  B4 00                 1	   MOV     AH, 0 
 06F6  CD 1A                 1	   INT     1AH 
 06F8  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 06FC                        1	   ??0023: 
 06FC  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 06FF  2B D2                 1	   SUB      DX, DX 
 0701  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-49


 0705  41                    1	   INC      CX 
 0706  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 070A  83 F9 00              1	   CMP CX, 0 
 070D  74 02                 1	   JE ??0024 
 070F  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0711                        1	   ??0024: 
 0711  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 0715  89 16 0055 R          1	   MOV      STARTPOS_Y_GHOST1, DX 
 0719  5A                    1	   POP      DX 
 071A  59                    1	   POP      CX 
 071B  5B                    1	   POP      BX 
 071C  58                    1	   POP      AX 
				
				
				    ;{  TO START APPROX IN THE MIDDLE
 071D  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0720  03 06 0004 R		   ADD AX, LEFTBOUND_X
 0724  D1 E8			   SHR AX, 1
 0726  8B D8			   MOV BX, AX
 0728  2D 0014			   SUB AX, 20
 072B  83 C3 14			   ADD BX, 20
 072E  A3 008A R		   MOV LOWER4MACRO, AX      
 0731  89 1E 008C R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST1, RANDSEED
 0735  50                    1	   PUSH     AX 
 0736  53                    1	   PUSH     BX 
 0737  51                    1	   PUSH     CX 
 0738  52                    1	   PUSH     DX 
 0739  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 073C  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0740  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0743  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0747  75 08                 1	   JNE     ??0025 
 0749  B4 00                 1	   MOV     AH, 0 
 074B  CD 1A                 1	   INT     1AH 
 074D  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0751                        1	   ??0025: 
 0751  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0754  2B D2                 1	   SUB      DX, DX 
 0756  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
 075A  41                    1	   INC      CX 
 075B  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 075F  83 F9 00              1	   CMP CX, 0 
 0762  74 02                 1	   JE ??0026 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-50


 0764  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0766                        1	   ??0026: 
 0766  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 076A  89 16 0053 R          1	   MOV      STARTPOS_X_GHOST1, DX 
 076E  5A                    1	   POP      DX 
 076F  59                    1	   POP      CX 
 0770  5B                    1	   POP      BX 
 0771  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 0772  A1 0053 R		   MOV AX, STARTPOS_X_GHOST1
 0775  2D 000A			   SUB AX, 10
 0778  A3 005D R		   MOV STARTPOS_X_PORTAL1, AX
 077B  A1 0055 R		   MOV AX, STARTPOS_Y_GHOST1
 077E  2D 000A			   SUB AX, 10
 0781  A3 005F R		   MOV STARTPOS_Y_PORTAL1, AX 
				   ;}
				
 0784  5A			   POP DX
 0785  59			   POP CX
 0786  5B			   POP BX
 0787  58			   POP AX 
 0788  C3			   RET
				;} 
 0789				RANDOMIZE_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
 0789				RANDOMIZE_GHOST2 PROC
				;{
 0789  50			   PUSH AX
 078A  53			   PUSH BX
 078B  51			   PUSH CX
 078C  52			   PUSH DX
				
 078D  C7 06 0066 R 0001	   MOV EXISTS_GHOST2, 1
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 1 (DOWN
				LEFT) OR 3 (UPLEFT)
				   RANDOMIZE 0, 3 , MOTION_GHOST2, RANDSEED
 0793  50                    1	   PUSH     AX 
 0794  53                    1	   PUSH     BX 
 0795  51                    1	   PUSH     CX 
 0796  52                    1	   PUSH     DX 
 0797  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 079A  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 079E  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-51


				NT VALUE 
 07A1  39 06 0087 R          1	   CMP     RANDSEED, AX 
 07A5  75 08                 1	   JNE     ??0027 
 07A7  B4 00                 1	   MOV     AH, 0 
 07A9  CD 1A                 1	   INT     1AH 
 07AB  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 07AF                        1	   ??0027: 
 07AF  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 07B2  2B D2                 1	   SUB      DX, DX 
 07B4  B9 0003               1	   MOV      CX, 3 
 07B7  41                    1	   INC      CX 
 07B8  83 E9 00              1	   SUB      CX, 0 
 07BB  83 F9 00              1	   CMP CX, 0 
 07BE  74 02                 1	   JE ??0028 
 07C0  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 07C2                        1	   ??0028: 
 07C2  83 C2 00              1	   ADD      DX, 0 
 07C5  89 16 0068 R          1	   MOV      MOTION_GHOST2, DX 
 07C9  5A                    1	   POP      DX 
 07CA  59                    1	   POP      CX 
 07CB  5B                    1	   POP      BX 
 07CC  58                    1	   POP      AX 
 07CD  83 3E 0068 R 02		   CMP MOTION_GHOST2, 2
 07D2  72 09			   JB MOV_DOWNLEFT2
 07D4  C7 06 0068 R 0003	   MOV MOTION_GHOST2, 3    ;MOV UPLEFT
 07DA  EB 07 90			   JMP MOV_UPLEFT2
 07DD				   MOV_DOWNLEFT2:
 07DD  C7 06 0068 R 0001	   MOV MOTION_GHOST2, 1    ;MOVE BY INC Y AND D
				EC X
 07E3				   MOV_UPLEFT2:
				   ;}
				   
				   RANDOMIZE 0, 2, POWERUP_GHOST2, RANDSEED
 07E3  50                    1	   PUSH     AX 
 07E4  53                    1	   PUSH     BX 
 07E5  51                    1	   PUSH     CX 
 07E6  52                    1	   PUSH     DX 
 07E7  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 07EA  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 07EE  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 07F1  39 06 0087 R          1	   CMP     RANDSEED, AX 
 07F5  75 08                 1	   JNE     ??0029 
 07F7  B4 00                 1	   MOV     AH, 0 
 07F9  CD 1A                 1	   INT     1AH 
 07FB  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 07FF                        1	   ??0029: 
 07FF  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-52


				= RETURN VALUE 
 0802  2B D2                 1	   SUB      DX, DX 
 0804  B9 0002               1	   MOV      CX, 2 
 0807  41                    1	   INC      CX 
 0808  83 E9 00              1	   SUB      CX, 0 
 080B  83 F9 00              1	   CMP CX, 0 
 080E  74 02                 1	   JE ??002A 
 0810  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0812                        1	   ??002A: 
 0812  83 C2 00              1	   ADD      DX, 0 
 0815  89 16 006A R          1	   MOV      POWERUP_GHOST2, DX 
 0819  5A                    1	   POP      DX 
 081A  59                    1	   POP      CX 
 081B  5B                    1	   POP      BX 
 081C  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST2, RANDSEED
 081D  50                    1	   PUSH     AX 
 081E  53                    1	   PUSH     BX 
 081F  51                    1	   PUSH     CX 
 0820  52                    1	   PUSH     DX 
 0821  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0824  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0828  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 082B  39 06 0087 R          1	   CMP     RANDSEED, AX 
 082F  75 08                 1	   JNE     ??002B 
 0831  B4 00                 1	   MOV     AH, 0 
 0833  CD 1A                 1	   INT     1AH 
 0835  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0839                        1	   ??002B: 
 0839  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 083C  2B D2                 1	   SUB      DX, DX 
 083E  B9 0002               1	   MOV      CX, 2 
 0841  41                    1	   INC      CX 
 0842  83 E9 00              1	   SUB      CX, 0 
 0845  83 F9 00              1	   CMP CX, 0 
 0848  74 02                 1	   JE ??002C 
 084A  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 084C                        1	   ??002C: 
 084C  83 C2 00              1	   ADD      DX, 0 
 084F  89 16 0070 R          1	   MOV      TYPE_GHOST2, DX 
main.ASM(916): warning A4031: Operand types must match
 0853  5A                    1	   POP      DX 
 0854  59                    1	   POP      CX 
 0855  5B                    1	   POP      BX 
 0856  58                    1	   POP      AX 
				   
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-53


 0857  A1 0002 R		   MOV AX, LOWERBOUND_Y
 085A  2D 0032			   SUB AX, 50
 085D  A3 008C R		   MOV UPPER4MACRO, AX
 0860  A1 0000 R		   MOV AX, UPPERBOUND_Y
 0863  A3 008A R		   MOV LOWER4MACRO, AX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST2, RANDSEED
 0866  50                    1	   PUSH     AX 
 0867  53                    1	   PUSH     BX 
 0868  51                    1	   PUSH     CX 
 0869  52                    1	   PUSH     DX 
 086A  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 086D  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0871  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0874  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0878  75 08                 1	   JNE     ??002D 
 087A  B4 00                 1	   MOV     AH, 0 
 087C  CD 1A                 1	   INT     1AH 
 087E  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0882                        1	   ??002D: 
 0882  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0885  2B D2                 1	   SUB      DX, DX 
 0887  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
 088B  41                    1	   INC      CX 
 088C  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 0890  83 F9 00              1	   CMP CX, 0 
 0893  74 02                 1	   JE ??002E 
 0895  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0897                        1	   ??002E: 
 0897  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 089B  89 16 0064 R          1	   MOV      STARTPOS_Y_GHOST2, DX 
 089F  5A                    1	   POP      DX 
 08A0  59                    1	   POP      CX 
 08A1  5B                    1	   POP      BX 
 08A2  58                    1	   POP      AX 
				
				
				
 08A3  A1 0006 R		   MOV AX, RIGHTBOUND_X
 08A6  D1 E8			   SHR AX, 1
 08A8  2D 0064			   SUB AX, 100
 08AB  A3 008C R		   MOV UPPER4MACRO, AX
 08AE  8B 1E 0004 R		   MOV BX, LEFTBOUND_X 
 08B2  83 C3 6E			   ADD BX, 110
 08B5  89 1E 008A R		   MOV LOWER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST2, RANDSEED
 08B9  50                    1	   PUSH     AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-54


 08BA  53                    1	   PUSH     BX 
 08BB  51                    1	   PUSH     CX 
 08BC  52                    1	   PUSH     DX 
 08BD  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 08C0  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 08C4  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 08C7  39 06 0087 R          1	   CMP     RANDSEED, AX 
 08CB  75 08                 1	   JNE     ??002F 
 08CD  B4 00                 1	   MOV     AH, 0 
 08CF  CD 1A                 1	   INT     1AH 
 08D1  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 08D5                        1	   ??002F: 
 08D5  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 08D8  2B D2                 1	   SUB      DX, DX 
 08DA  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
 08DE  41                    1	   INC      CX 
 08DF  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 08E3  83 F9 00              1	   CMP CX, 0 
 08E6  74 02                 1	   JE ??0030 
 08E8  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 08EA                        1	   ??0030: 
 08EA  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 08EE  89 16 0062 R          1	   MOV      STARTPOS_X_GHOST2, DX 
 08F2  5A                    1	   POP      DX 
 08F3  59                    1	   POP      CX 
 08F4  5B                    1	   POP      BX 
 08F5  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 08F6  A1 0062 R		   MOV AX, STARTPOS_X_GHOST2
 08F9  2D 000A			   SUB AX, 10
 08FC  A3 006C R		   MOV STARTPOS_X_PORTAL2, AX
 08FF  A1 0064 R		   MOV AX, STARTPOS_Y_GHOST2
 0902  2D 000A			   SUB AX, 10
 0905  A3 006E R		   MOV STARTPOS_Y_PORTAL2, AX 
				   ;}
				   
 0908  5A			   POP DX
 0909  59			   POP CX
 090A  5B			   POP BX
 090B  58			   POP AX 
 090C  C3			   RET
				;} 
 090D				RANDOMIZE_GHOST2 ENDP
				
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE THIRD GHOST
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-55


				;----------------------------------------------
				---------------------------
				
 090D				RANDOMIZE_GHOST3 PROC
				;{
 090D  50			   PUSH AX
 090E  53			   PUSH BX
 090F  51			   PUSH CX
 0910  52			   PUSH DX
				
 0911  C7 06 0075 R 0001	   MOV EXISTS_GHOST3, 1    ;MOVE BY INC X AND D
				EC Y
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 0 (DOWN
				RIGHT) OR 2 (UPRIGHT)
				   RANDOMIZE 0, 3 , MOTION_GHOST3, RANDSEED
 0917  50                    1	   PUSH     AX 
 0918  53                    1	   PUSH     BX 
 0919  51                    1	   PUSH     CX 
 091A  52                    1	   PUSH     DX 
 091B  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 091E  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0922  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0925  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0929  75 08                 1	   JNE     ??0031 
 092B  B4 00                 1	   MOV     AH, 0 
 092D  CD 1A                 1	   INT     1AH 
 092F  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0933                        1	   ??0031: 
 0933  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0936  2B D2                 1	   SUB      DX, DX 
 0938  B9 0003               1	   MOV      CX, 3 
 093B  41                    1	   INC      CX 
 093C  83 E9 00              1	   SUB      CX, 0 
 093F  83 F9 00              1	   CMP CX, 0 
 0942  74 02                 1	   JE ??0032 
 0944  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0946                        1	   ??0032: 
 0946  83 C2 00              1	   ADD      DX, 0 
 0949  89 16 0077 R          1	   MOV      MOTION_GHOST3, DX 
 094D  5A                    1	   POP      DX 
 094E  59                    1	   POP      CX 
 094F  5B                    1	   POP      BX 
 0950  58                    1	   POP      AX 
 0951  83 3E 0077 R 02		   CMP MOTION_GHOST3, 2
 0956  72 09			   JB MOV_DOWNRIGHT3
 0958  C7 06 0077 R 0002	   MOV MOTION_GHOST3, 2    ;MOV UPRIGHT
 095E  EB 07 90			   JMP MOV_UPRIGHT3
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-56


 0961				   MOV_DOWNRIGHT3:
 0961  C7 06 0077 R 0000	   MOV MOTION_GHOST3, 0    ;MOVE DOWNRIGHT
 0967				   MOV_UPRIGHT3:
				   ;}
				
				
				   RANDOMIZE 0, 2, TYPE_GHOST3, RANDSEED
 0967  50                    1	   PUSH     AX 
 0968  53                    1	   PUSH     BX 
 0969  51                    1	   PUSH     CX 
 096A  52                    1	   PUSH     DX 
 096B  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 096E  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0972  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0975  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0979  75 08                 1	   JNE     ??0033 
 097B  B4 00                 1	   MOV     AH, 0 
 097D  CD 1A                 1	   INT     1AH 
 097F  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0983                        1	   ??0033: 
 0983  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0986  2B D2                 1	   SUB      DX, DX 
 0988  B9 0002               1	   MOV      CX, 2 
 098B  41                    1	   INC      CX 
 098C  83 E9 00              1	   SUB      CX, 0 
 098F  83 F9 00              1	   CMP CX, 0 
 0992  74 02                 1	   JE ??0034 
 0994  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0996                        1	   ??0034: 
 0996  83 C2 00              1	   ADD      DX, 0 
 0999  89 16 007F R          1	   MOV      TYPE_GHOST3, DX 
 099D  5A                    1	   POP      DX 
 099E  59                    1	   POP      CX 
 099F  5B                    1	   POP      BX 
 09A0  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST3, RANDSEED
 09A1  50                    1	   PUSH     AX 
 09A2  53                    1	   PUSH     BX 
 09A3  51                    1	   PUSH     CX 
 09A4  52                    1	   PUSH     DX 
 09A5  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09A8  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09AC  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09AF  39 06 0087 R          1	   CMP     RANDSEED, AX 
 09B3  75 08                 1	   JNE     ??0035 
 09B5  B4 00                 1	   MOV     AH, 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-57


 09B7  CD 1A                 1	   INT     1AH 
 09B9  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 09BD                        1	   ??0035: 
 09BD  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 09C0  2B D2                 1	   SUB      DX, DX 
 09C2  B9 0002               1	   MOV      CX, 2 
 09C5  41                    1	   INC      CX 
 09C6  83 E9 00              1	   SUB      CX, 0 
 09C9  83 F9 00              1	   CMP CX, 0 
 09CC  74 02                 1	   JE ??0036 
 09CE  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 09D0                        1	   ??0036: 
 09D0  83 C2 00              1	   ADD      DX, 0 
 09D3  89 16 0079 R          1	   MOV      POWERUP_GHOST3, DX 
 09D7  5A                    1	   POP      DX 
 09D8  59                    1	   POP      CX 
 09D9  5B                    1	   POP      BX 
 09DA  58                    1	   POP      AX 
				
				   
 09DB  A1 0002 R		   MOV AX, LOWERBOUND_Y
 09DE  2D 0032			   SUB AX, 50
 09E1  A3 008C R		   MOV UPPER4MACRO, AX
 09E4  A1 0000 R		   MOV AX, UPPERBOUND_Y
 09E7  A3 008A R		   MOV LOWER4MACRO, AX
				   RANDOMIZE  LOWER4MACRO, UPPER4MACRO, STARTPO
				S_Y_GHOST3, RANDSEED
 09EA  50                    1	   PUSH     AX 
 09EB  53                    1	   PUSH     BX 
 09EC  51                    1	   PUSH     CX 
 09ED  52                    1	   PUSH     DX 
 09EE  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09F1  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09F5  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09F8  39 06 0087 R          1	   CMP     RANDSEED, AX 
 09FC  75 08                 1	   JNE     ??0037 
 09FE  B4 00                 1	   MOV     AH, 0 
 0A00  CD 1A                 1	   INT     1AH 
 0A02  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A06                        1	   ??0037: 
 0A06  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A09  2B D2                 1	   SUB      DX, DX 
 0A0B  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
 0A0F  41                    1	   INC      CX 
 0A10  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 0A14  83 F9 00              1	   CMP CX, 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-58


 0A17  74 02                 1	   JE ??0038 
 0A19  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0A1B                        1	   ??0038: 
 0A1B  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 0A1F  89 16 0073 R          1	   MOV      STARTPOS_Y_GHOST3, DX 
 0A23  5A                    1	   POP      DX 
 0A24  59                    1	   POP      CX 
 0A25  5B                    1	   POP      BX 
 0A26  58                    1	   POP      AX 
				
				
				
 0A27  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0A2A  D1 E8			   SHR AX, 1
 0A2C  2D 0032			   SUB AX, 50
 0A2F  A3 008A R		   MOV LOWER4MACRO, AX
 0A32  8B 1E 0006 R		   MOV BX, RIGHTBOUND_X 
 0A36  83 EB 50			   SUB BX, 80
 0A39  89 1E 008C R		   MOV UPPER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST3, RANDSEED
 0A3D  50                    1	   PUSH     AX 
 0A3E  53                    1	   PUSH     BX 
 0A3F  51                    1	   PUSH     CX 
 0A40  52                    1	   PUSH     DX 
 0A41  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0A44  F7 26 0087 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0A48  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0A4B  39 06 0087 R          1	   CMP     RANDSEED, AX 
 0A4F  75 08                 1	   JNE     ??0039 
 0A51  B4 00                 1	   MOV     AH, 0 
 0A53  CD 1A                 1	   INT     1AH 
 0A55  89 16 0087 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A59                        1	   ??0039: 
 0A59  A3 0087 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A5C  2B D2                 1	   SUB      DX, DX 
 0A5E  8B 0E 008C R          1	   MOV      CX, UPPER4MACRO 
 0A62  41                    1	   INC      CX 
 0A63  2B 0E 008A R          1	   SUB      CX, LOWER4MACRO 
 0A67  83 F9 00              1	   CMP CX, 0 
 0A6A  74 02                 1	   JE ??003A 
 0A6C  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0A6E                        1	   ??003A: 
 0A6E  03 16 008A R          1	   ADD      DX, LOWER4MACRO 
 0A72  89 16 0071 R          1	   MOV      STARTPOS_X_GHOST3, DX 
 0A76  5A                    1	   POP      DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-59


 0A77  59                    1	   POP      CX 
 0A78  5B                    1	   POP      BX 
 0A79  58                    1	   POP      AX 
				   
				   ;{GHOST PORTAL LOCATION
 0A7A  A1 0071 R		   MOV AX, STARTPOS_X_GHOST3
 0A7D  2D 000A			   SUB AX, 10
 0A80  A3 007B R		   MOV STARTPOS_X_PORTAL3, AX
 0A83  A1 0073 R		   MOV AX, STARTPOS_Y_GHOST3
 0A86  2D 000A			   SUB AX, 10
 0A89  A3 007D R		   MOV STARTPOS_Y_PORTAL3, AX 
				   ;}
				
 0A8C  5A			   POP DX
 0A8D  59			   POP CX
 0A8E  5B			   POP BX
 0A8F  58			   POP AX 
 0A90  C3			   RET
				;} 
 0A91				RANDOMIZE_GHOST3 ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAW THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0A91				DRAW_GHOST1 PROC
				;{
 0A91  50			   PUSH AX
 0A92  53			   PUSH BX
 0A93  51			   PUSH CX
 0A94  52			   PUSH DX
				
 0A95  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0A9A  75 6F			   JNE ENDDRAW_GHOST11
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST1, STARTPO
				S_Y_GHOST1, GHOSTSIZE , EXISTS_GHOST1 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0A9C  50                    1	   PUSH AX 
 0A9D  53                    1	   PUSH BX 
 0A9E  51                    1	   PUSH CX 
 0A9F  52                    1	   PUSH DX 
 0AA0  C7 06 0057 R 0001     1	   MOV EXISTS_GHOST1, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0AA6                        1	   ??003B: 
 0AA6  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
 0AAA  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0AAE  2B CB                 1	      SUB CX, BX 
 0AB0  83 F9 00              1	      CMP CX, 0 
 0AB3  7D 06                 1	      JGE ??003C 
 0AB5  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0ABB                        1	   ??003C: 
 0ABB  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-60


 0ABF  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0AC3  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0AC7  2B D9                 1	      SUB BX, CX 
 0AC9  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0ACC  7D 06                 1	      JGE ??003E 
 0ACE  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AD4                        1	   ??003E: 
 0AD4  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0AD8  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0ADC  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0AE0  2B D9                 1	      SUB BX, CX 
 0AE2  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0AE5  7D 06                 1	      JGE ??003D 
 0AE7  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AED                        1	   ??003D: 
 0AED  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0AF1  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0AF5  2B CB                 1	      SUB CX, BX 
 0AF7  83 F9 00              1	      CMP CX, 0 
 0AFA  7D 06                 1	      JGE ??003F 
 0AFC  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0B02                        1	   ??003F: 
 0B02  5A                    1	   POP DX 
 0B03  59                    1	   POP CX 
 0B04  5B                    1	   POP BX 
 0B05  58                    1	   POP AX 
 0B06  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B0B				   ENDDRAW_GHOST11:     ; JUST A MIDDLE LABEL F
				OR JUMP
 0B0B  75 40			   JNE ENDDRAW_GHOST1
				
				  
				
				   ;{FIRST TYPE 
 0B0D  80 3E 0061 R 00		   CMP TYPE_GHOST1, 0
 0B12  BE 0000 E		   MOV SI, OFFSET GHOST1_0
 0B15  74 0D			   JE DRAW1
				   ;}
				
				   ;{SECOND TYPE 
 0B17  80 3E 0061 R 01		   CMP TYPE_GHOST1, 1
 0B1C  BE 0000 E		   MOV SI, OFFSET GHOST1_1
 0B1F  74 03			   JE DRAW1
				   ;}
				
				   ;{THIRD TYPE
 0B21  BE 0000 E		   MOV SI, OFFSET GHOST1_2
				   ;}
				
 0B24				   DRAW1:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-61


				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1
 0B24  51                    1	   PUSH CX 
 0B25  53                    1	   PUSH BX 
 0B26  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0B28  8B 16 0055 R          1	   MOV     DX, STARTPOS_Y_GHOST1     ; Y TO STA
				RT DRAWING AT 
 0B2C  8B 2E 0092 R          1	   MOV BP, GHOSTSIZE 
 0B30  8A 3C                 1	   MOV BH, [SI] 
 0B32                        1	   ??0041:;{ FOR(BP = 50; BD > 0; BP--) 
 0B32  8B 0E 0053 R          1	      MOV     CX, STARTPOS_X_GHOST1    ; X TO S
				TART 
 0B36  8B 3E 0092 R          1	      MOV DI, GHOSTSIZE 
 0B3A                        1	      ??0040:;{ FOR(DX = 50; DX > 0; DX--) 
 0B3A  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0B3B  3A F8                 1	         CMP BH ,AL 
 0B3D  74 04                 1	         JE ??0042 
 0B3F  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0B41  CD 10                 1	         INT     10H 
 0B43                        1	         ??0042: 
 0B43  41                    1	         INC     CX         ; NEXT X POSITION 
 0B44  4F                    1	         DEC     DI 
 0B45  75 F3                 1	         JNZ     ??0040 
 0B47  42                    1	      INC     DX         ; NEXT Y POSITION 
 0B48  4D                    1	      DEC     BP 
 0B49  75 E7                 1	      JNZ     ??0041 
 0B4B  5B                    1	      POP BX 
 0B4C  59                    1	      POP CX 
				   
				  
				
 0B4D				   ENDDRAW_GHOST1:
 0B4D  5A			   POP DX
 0B4E  59			   POP CX
 0B4F  5B			   POP BX
 0B50  58			   POP AX 
 0B51  C3			   RET
				;} 
 0B52				DRAW_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MOVES THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0B52				MOVE_GHOST1 PROC
				;{
 0B52  50			   PUSH AX
 0B53  53			   PUSH BX
 0B54  51			   PUSH CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-62


 0B55  52			   PUSH DX
				
 0B56  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B5B  75 4A			   JNE ENDMOVE_GHOST1
 0B5D				   DOWNRIGHT_GHOST1:
				   ;{ DOWNRIGHT MOVEMENT
 0B5D  83 3E 0059 R 00		      CMP MOTION_GHOST1, 0
 0B62  75 0D			      JNE DOWNLEFT_GHOST1
 0B64  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B69  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B6E  EB 37 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B71				   DOWNLEFT_GHOST1:
				   ;{ DOWNLEFT MOVEMENT
 0B71  83 3E 0059 R 01		      CMP MOTION_GHOST1, 1
 0B76  75 0C			      JNE UPRIGHT_GHOST1
 0B78  FF 0E 0053 R		      DEC STARTPOS_X_GHOST1, 3
main.ASM(1093): warning A4001: Extra characters on line
 0B7C  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B81  EB 24 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B84				   UPRIGHT_GHOST1:
				   ;{ UPRIGHT MOVEMENT
 0B84  83 3E 0059 R 02		      CMP MOTION_GHOST1, 2
 0B89  75 0C			      JNE UPLEFT_GHOST1
 0B8B  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B90  FF 0E 0055 R		      DEC STARTPOS_Y_GHOST1, 3
main.ASM(1102): warning A4001: Extra characters on line
 0B94  EB 11 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B97				   UPLEFT_GHOST1:
				   ;{ UPLEFT MOVEMENT 
 0B97  83 3E 0059 R 03		      CMP MOTION_GHOST1, 3
				      ;JNE ENDMOVE_GHOST1
 0B9C  FF 0E 0053 R		      DEC STARTPOS_X_GHOST1, 3
main.ASM(1109): warning A4001: Extra characters on line
 0BA0  FF 0E 0055 R		      DEC STARTPOS_Y_GHOST1, 3
main.ASM(1110): warning A4001: Extra characters on line
 0BA4  EB 01 90			      JMP ENDMOVE_GHOST1
				   ;}
				   
 0BA7				   ENDMOVE_GHOST1:
 0BA7  5A			   POP DX
 0BA8  59			   POP CX
 0BA9  5B			   POP BX
 0BAA  58			   POP AX 
 0BAB  C3			   RET
				;} 
 0BAC				MOVE_GHOST1 ENDP
				
				
				;----------------------------------------------
				----------------------------
				;  DRAWS THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
 0BAC				DRAW_GHOST2 PROC
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-63


				;{
 0BAC  50			   PUSH AX
 0BAD  53			   PUSH BX
 0BAE  51			   PUSH CX
 0BAF  52			   PUSH DX
				
 0BB0  83 3E 0066 R 01		   CMP EXISTS_GHOST2, 1
 0BB5  75 6F			   JNE ENDDRAW_GHOST21
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST2, STARTPO
				S_Y_GHOST2, GHOSTSIZE , EXISTS_GHOST2 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0BB7  50                    1	   PUSH AX 
 0BB8  53                    1	   PUSH BX 
 0BB9  51                    1	   PUSH CX 
 0BBA  52                    1	   PUSH DX 
 0BBB  C7 06 0066 R 0001     1	   MOV EXISTS_GHOST2, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0BC1                        1	   ??0043: 
 0BC1  8B 0E 0064 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BC5  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0BC9  2B CB                 1	      SUB CX, BX 
 0BCB  83 F9 00              1	      CMP CX, 0 
 0BCE  7D 06                 1	      JGE ??0044 
 0BD0  C7 06 0066 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BD6                        1	   ??0044: 
 0BD6  8B 0E 0064 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BDA  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0BDE  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0BE2  2B D9                 1	      SUB BX, CX 
 0BE4  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0BE7  7D 06                 1	      JGE ??0046 
 0BE9  C7 06 0066 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BEF                        1	   ??0046: 
 0BEF  8B 0E 0062 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0BF3  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0BF7  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0BFB  2B D9                 1	      SUB BX, CX 
 0BFD  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0C00  7D 06                 1	      JGE ??0045 
 0C02  C7 06 0066 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C08                        1	   ??0045: 
 0C08  8B 0E 0062 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0C0C  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0C10  2B CB                 1	      SUB CX, BX 
 0C12  83 F9 00              1	      CMP CX, 0 
 0C15  7D 06                 1	      JGE ??0047 
 0C17  C7 06 0066 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C1D                        1	   ??0047: 
 0C1D  5A                    1	   POP DX 
 0C1E  59                    1	   POP CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-64


 0C1F  5B                    1	   POP BX 
 0C20  58                    1	   POP AX 
 0C21  83 3E 0066 R 01		   CMP EXISTS_GHOST2, 1
 0C26				   ENDDRAW_GHOST21:    ;JUST A MIDDLE LABEL FOR
				 JUMP
 0C26  75 40			   JNE ENDDRAW_GHOST2
				
				
				   
				
				
				   ;{FIRST TYPE 
 0C28  80 3E 0070 R 00		   CMP TYPE_GHOST2, 0
 0C2D  BE 0000 E		   MOV SI, OFFSET GHOST2_0
 0C30  74 0D			   JE DRAW2
				   ;}
				
				   ;{SECOND TYPE 
 0C32  80 3E 0070 R 01		   CMP TYPE_GHOST2, 1
 0C37  BE 0000 E		   MOV SI, OFFSET GHOST2_1
 0C3A  74 03			   JE DRAW2
				   ;}
				
				   ;{THIRD TYPE
 0C3C  BE 0000 E		   MOV SI, OFFSET GHOST2_2
				   ;}
				
 0C3F				   DRAW2:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2
 0C3F  51                    1	   PUSH CX 
 0C40  53                    1	   PUSH BX 
 0C41  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0C43  8B 16 0064 R          1	   MOV     DX, STARTPOS_Y_GHOST2     ; Y TO STA
				RT DRAWING AT 
 0C47  8B 2E 0092 R          1	   MOV BP, GHOSTSIZE 
 0C4B  8A 3C                 1	   MOV BH, [SI] 
 0C4D                        1	   ??0049:;{ FOR(BP = 50; BD > 0; BP--) 
 0C4D  8B 0E 0062 R          1	      MOV     CX, STARTPOS_X_GHOST2    ; X TO S
				TART 
 0C51  8B 3E 0092 R          1	      MOV DI, GHOSTSIZE 
 0C55                        1	      ??0048:;{ FOR(DX = 50; DX > 0; DX--) 
 0C55  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0C56  3A F8                 1	         CMP BH ,AL 
 0C58  74 04                 1	         JE ??004A 
 0C5A  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0C5C  CD 10                 1	         INT     10H 
 0C5E                        1	         ??004A: 
 0C5E  41                    1	         INC     CX         ; NEXT X POSITION 
 0C5F  4F                    1	         DEC     DI 
 0C60  75 F3                 1	         JNZ     ??0048 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-65


 0C62  42                    1	      INC     DX         ; NEXT Y POSITION 
 0C63  4D                    1	      DEC     BP 
 0C64  75 E7                 1	      JNZ     ??0049 
 0C66  5B                    1	      POP BX 
 0C67  59                    1	      POP CX 
				   
				  
				
 0C68				   ENDDRAW_GHOST2:
 0C68  5A			   POP DX
 0C69  59			   POP CX
 0C6A  5B			   POP BX
 0C6B  58			   POP AX 
 0C6C  C3			   RET
				;} 
 0C6D				DRAW_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE SECOND GHOST
				;----------------------------------------------
				----------------------------
 0C6D				MOVE_GHOST2 PROC
				;{
 0C6D  50			   PUSH AX
 0C6E  53			   PUSH BX
 0C6F  51			   PUSH CX
 0C70  52			   PUSH DX
				
 0C71  83 3E 0066 R 01		   CMP EXISTS_GHOST2, 1
 0C76  75 4C			   JNE ENDMOVE_GHOST2
 0C78				   DOWNRIGHT_GHOST2:
				   ;{ DOWNRIGHT MOVEMENT
 0C78  83 3E 0068 R 00		      CMP MOTION_GHOST2, 0
 0C7D  75 0D			      JNE DOWNLEFT_GHOST2
 0C7F  83 06 0062 R 03		      ADD STARTPOS_X_GHOST2, 3
 0C84  83 06 0064 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0C89  EB 39 90			      JMP ENDMOVE_GHOST2
				   ;}
 0C8C				   DOWNLEFT_GHOST2:
				   ;{ DOWNLEFT MOVEMENT
 0C8C  83 3E 0068 R 01		      CMP MOTION_GHOST2, 1
 0C91  75 0C			      JNE UPRIGHT_GHOST2
 0C93  FF 0E 0062 R		      DEC STARTPOS_X_GHOST2, 3
main.ASM(1201): warning A4001: Extra characters on line
 0C97  83 06 0064 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0C9C  EB 26 90			      JMP ENDMOVE_GHOST2
				   ;}
 0C9F				   UPRIGHT_GHOST2:
				   ;{ UPRIGHT MOVEMENT
 0C9F  83 3E 0068 R 02		      CMP MOTION_GHOST2, 2
 0CA4  75 0C			      JNE UPLEFT_GHOST2
 0CA6  83 06 0062 R 03		      ADD STARTPOS_X_GHOST2, 3
 0CAB  FF 0E 0064 R		      DEC STARTPOS_Y_GHOST2, 3
main.ASM(1210): warning A4001: Extra characters on line
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-66


 0CAF  EB 13 90			      JMP ENDMOVE_GHOST2
				   ;}
 0CB2				   UPLEFT_GHOST2:
				   ;{ UPLEFT MOVEMENT
 0CB2  83 3E 0068 R 03		      CMP MOTION_GHOST2, 3
 0CB7  75 0B			      JNE ENDMOVE_GHOST2
 0CB9  FF 0E 0062 R		      DEC STARTPOS_X_GHOST2, 3
main.ASM(1217): warning A4001: Extra characters on line
 0CBD  FF 0E 0064 R		      DEC STARTPOS_Y_GHOST2, 3
main.ASM(1218): warning A4001: Extra characters on line
 0CC1  EB 01 90			      JMP ENDMOVE_GHOST2
				   ;}
				   
 0CC4				   ENDMOVE_GHOST2:
 0CC4  5A			   POP DX
 0CC5  59			   POP CX
 0CC6  5B			   POP BX
 0CC7  58			   POP AX 
 0CC8  C3			   RET
				;} 
 0CC9				MOVE_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE THIRD GHOST
				;----------------------------------------------
				---------------------------
				
 0CC9				DRAW_GHOST3 PROC
				;{
 0CC9  50			   PUSH AX
 0CCA  53			   PUSH BX
 0CCB  51			   PUSH CX
 0CCC  52			   PUSH DX
				
 0CCD  83 3E 0075 R 01		   CMP EXISTS_GHOST3, 1
 0CD2  75 6F			   JNE ENDDRAW_GHOST31
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST3, STARTPO
				S_Y_GHOST3, GHOSTSIZE , EXISTS_GHOST3 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0CD4  50                    1	   PUSH AX 
 0CD5  53                    1	   PUSH BX 
 0CD6  51                    1	   PUSH CX 
 0CD7  52                    1	   PUSH DX 
 0CD8  C7 06 0075 R 0001     1	   MOV EXISTS_GHOST3, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0CDE                        1	   ??004B: 
 0CDE  8B 0E 0073 R          1	      MOV CX, STARTPOS_Y_GHOST3 
 0CE2  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0CE6  2B CB                 1	      SUB CX, BX 
 0CE8  83 F9 00              1	      CMP CX, 0 
 0CEB  7D 06                 1	      JGE ??004C 
 0CED  C7 06 0075 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0CF3                        1	   ??004C: 
 0CF3  8B 0E 0073 R          1	      MOV CX, STARTPOS_Y_GHOST3 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-67


 0CF7  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0CFB  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0CFF  2B D9                 1	      SUB BX, CX 
 0D01  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D04  7D 06                 1	      JGE ??004E 
 0D06  C7 06 0075 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D0C                        1	   ??004E: 
 0D0C  8B 0E 0071 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D10  03 0E 0092 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0D14  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0D18  2B D9                 1	      SUB BX, CX 
 0D1A  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D1D  7D 06                 1	      JGE ??004D 
 0D1F  C7 06 0075 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D25                        1	   ??004D: 
 0D25  8B 0E 0071 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D29  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0D2D  2B CB                 1	      SUB CX, BX 
 0D2F  83 F9 00              1	      CMP CX, 0 
 0D32  7D 06                 1	      JGE ??004F 
 0D34  C7 06 0075 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D3A                        1	   ??004F: 
 0D3A  5A                    1	   POP DX 
 0D3B  59                    1	   POP CX 
 0D3C  5B                    1	   POP BX 
 0D3D  58                    1	   POP AX 
 0D3E  83 3E 0075 R 01		   CMP EXISTS_GHOST3, 1
 0D43				   ENDDRAW_GHOST31:       ;JUST A MIDDLE LABEL 
				FOR JUMP
 0D43  75 40			   JNE ENDDRAW_GHOST3
				   
				   
				
				   ;{FIRST TYPE 
 0D45  83 3E 007F R 00		   CMP TYPE_GHOST3, 0
 0D4A  BE 0000 E		   MOV SI, OFFSET GHOST3_0
 0D4D  74 0D			   JE DRAW3
				   ;}
				
				   ;{SECOND TYPE 
 0D4F  83 3E 007F R 01		   CMP TYPE_GHOST3, 1
 0D54  BE 0000 E		   MOV SI, OFFSET GHOST3_1
 0D57  74 03			   JE DRAW3
				   ;}
				
				   ;{THIRD TYPE
 0D59  BE 0000 E		   MOV SI, OFFSET GHOST3_2
				   ;}
				
 0D5C				   DRAW3:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-68


				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3
 0D5C  51                    1	   PUSH CX 
 0D5D  53                    1	   PUSH BX 
 0D5E  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0D60  8B 16 0073 R          1	   MOV     DX, STARTPOS_Y_GHOST3     ; Y TO STA
				RT DRAWING AT 
 0D64  8B 2E 0092 R          1	   MOV BP, GHOSTSIZE 
 0D68  8A 3C                 1	   MOV BH, [SI] 
 0D6A                        1	   ??0051:;{ FOR(BP = 50; BD > 0; BP--) 
 0D6A  8B 0E 0071 R          1	      MOV     CX, STARTPOS_X_GHOST3    ; X TO S
				TART 
 0D6E  8B 3E 0092 R          1	      MOV DI, GHOSTSIZE 
 0D72                        1	      ??0050:;{ FOR(DX = 50; DX > 0; DX--) 
 0D72  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0D73  3A F8                 1	         CMP BH ,AL 
 0D75  74 04                 1	         JE ??0052 
 0D77  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0D79  CD 10                 1	         INT     10H 
 0D7B                        1	         ??0052: 
 0D7B  41                    1	         INC     CX         ; NEXT X POSITION 
 0D7C  4F                    1	         DEC     DI 
 0D7D  75 F3                 1	         JNZ     ??0050 
 0D7F  42                    1	      INC     DX         ; NEXT Y POSITION 
 0D80  4D                    1	      DEC     BP 
 0D81  75 E7                 1	      JNZ     ??0051 
 0D83  5B                    1	      POP BX 
 0D84  59                    1	      POP CX 
				   
				  
				
 0D85				   ENDDRAW_GHOST3:
 0D85  5A			   POP DX
 0D86  59			   POP CX
 0D87  5B			   POP BX
 0D88  58			   POP AX 
 0D89  C3			   RET
				;} 
 0D8A				DRAW_GHOST3 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE THIRD GHOST
				;----------------------------------------------
				---------------------------
 0D8A				MOVE_GHOST3 PROC
				;{
 0D8A  50			   PUSH AX
 0D8B  53			   PUSH BX
 0D8C  51			   PUSH CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-69


 0D8D  52			   PUSH DX
				
 0D8E  83 3E 0075 R 01		   CMP EXISTS_GHOST3, 1
 0D93  75 4C			   JNE ENDMOVE_GHOST3
 0D95				   DOWNRIGHT_GHOST3:
				   ;{ DOWNRIGHT MOVEMENT
 0D95  83 3E 0077 R 00		      CMP MOTION_GHOST3, 0
 0D9A  75 0D			      JNE DOWNLEFT_GHOST3
 0D9C  83 06 0071 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DA1  83 06 0073 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DA6  EB 39 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DA9				   DOWNLEFT_GHOST3:
				   ;{ DOWNLEFT MOVEMENT
 0DA9  83 3E 0077 R 01		      CMP MOTION_GHOST3, 1
 0DAE  75 0C			      JNE UPRIGHT_GHOST3
 0DB0  FF 0E 0071 R		      DEC STARTPOS_X_GHOST3, 3
main.ASM(1307): warning A4001: Extra characters on line
 0DB4  83 06 0073 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DB9  EB 26 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DBC				   UPRIGHT_GHOST3:
				   ;{ UPRIGHT MOVEMENT
 0DBC  83 3E 0077 R 02		      CMP MOTION_GHOST3, 2
 0DC1  75 0C			      JNE UPLEFT_GHOST3
 0DC3  83 06 0071 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DC8  FF 0E 0073 R		      DEC STARTPOS_Y_GHOST3, 3
main.ASM(1316): warning A4001: Extra characters on line
 0DCC  EB 13 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DCF				   UPLEFT_GHOST3:
				   ;{ UPLEFT MOVEMENT
 0DCF  83 3E 0077 R 03		      CMP MOTION_GHOST3, 3
 0DD4  75 0B			      JNE ENDMOVE_GHOST3
 0DD6  FF 0E 0071 R		      DEC STARTPOS_X_GHOST3, 3
main.ASM(1323): warning A4001: Extra characters on line
 0DDA  FF 0E 0073 R		      DEC STARTPOS_Y_GHOST3, 3
main.ASM(1324): warning A4001: Extra characters on line
 0DDE  EB 01 90			      JMP ENDMOVE_GHOST3
				   ;}
				   
 0DE1				   ENDMOVE_GHOST3:
 0DE1  5A			   POP DX
 0DE2  59			   POP CX
 0DE3  5B			   POP BX
 0DE4  58			   POP AX 
 0DE5  C3			   RET
				;} 
 0DE6				MOVE_GHOST3 ENDP
				
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; DRAWS THE PORTALS FROM WHICH GHOSTS COME FROM
				;----------------------------------------------
				-----------------------------------------------
				------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-70


 0DE6				DRAW_PORTALS PROC 
				;{
				
				   ;{DRAW GHOST PORTAL
 0DE6  83 3E 0057 R 00		   CMP EXISTS_GHOST1, 0
 0DEB  74 2D			   JE NOGHOST1
 0DED  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL1, STARTPOS_Y_PORTAL1 
 0DF1  51                    1	   PUSH CX 
 0DF2  53                    1	   PUSH BX 
 0DF3  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0DF5  8B 16 005F R          1	   MOV     DX, STARTPOS_Y_PORTAL1     ; Y TO ST
				ART DRAWING AT 
 0DF9  8B 2E 0090 R          1	   MOV BP, PORTAL_SIZE 
 0DFD  8A 3C                 1	   MOV BH, [SI] 
 0DFF                        1	   ??0054:;{ FOR(BP = 50; BD > 0; BP--) 
 0DFF  8B 0E 005D R          1	      MOV     CX, STARTPOS_X_PORTAL1    ; X TO 
				START 
 0E03  8B 3E 0090 R          1	      MOV DI, PORTAL_SIZE 
 0E07                        1	      ??0053:;{ FOR(DX = 50; DX > 0; DX--) 
 0E07  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E08  3A F8                 1	         CMP BH ,AL 
 0E0A  74 04                 1	         JE ??0055 
 0E0C  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E0E  CD 10                 1	         INT     10H 
 0E10                        1	         ??0055: 
 0E10  41                    1	         INC     CX         ; NEXT X POSITION 
 0E11  4F                    1	         DEC     DI 
 0E12  75 F3                 1	         JNZ     ??0053 
 0E14  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E15  4D                    1	      DEC     BP 
 0E16  75 E7                 1	      JNZ     ??0054 
 0E18  5B                    1	      POP BX 
 0E19  59                    1	      POP CX 
				   ;}
				
 0E1A				   NOGHOST1:
				   ;{DRAW GHOST PORTAL
 0E1A  83 3E 0066 R 00		   CMP EXISTS_GHOST2, 0
 0E1F  74 2D			   JE NOGHOST2
 0E21  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL2, STARTPOS_Y_PORTAL2 
 0E25  51                    1	   PUSH CX 
 0E26  53                    1	   PUSH BX 
 0E27  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E29  8B 16 006E R          1	   MOV     DX, STARTPOS_Y_PORTAL2     ; Y TO ST
				ART DRAWING AT 
 0E2D  8B 2E 0090 R          1	   MOV BP, PORTAL_SIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-71


 0E31  8A 3C                 1	   MOV BH, [SI] 
 0E33                        1	   ??0057:;{ FOR(BP = 50; BD > 0; BP--) 
 0E33  8B 0E 006C R          1	      MOV     CX, STARTPOS_X_PORTAL2    ; X TO 
				START 
 0E37  8B 3E 0090 R          1	      MOV DI, PORTAL_SIZE 
 0E3B                        1	      ??0056:;{ FOR(DX = 50; DX > 0; DX--) 
 0E3B  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E3C  3A F8                 1	         CMP BH ,AL 
 0E3E  74 04                 1	         JE ??0058 
 0E40  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E42  CD 10                 1	         INT     10H 
 0E44                        1	         ??0058: 
 0E44  41                    1	         INC     CX         ; NEXT X POSITION 
 0E45  4F                    1	         DEC     DI 
 0E46  75 F3                 1	         JNZ     ??0056 
 0E48  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E49  4D                    1	      DEC     BP 
 0E4A  75 E7                 1	      JNZ     ??0057 
 0E4C  5B                    1	      POP BX 
 0E4D  59                    1	      POP CX 
				   ;}
 0E4E				   NOGHOST2:
				   ;{DRAW GHOST PORTAL
 0E4E  83 3E 0075 R 00		   CMP EXISTS_GHOST3, 0
 0E53  74 2D			   JE NOGHOST3
 0E55  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL3, STARTPOS_Y_PORTAL3 
 0E59  51                    1	   PUSH CX 
 0E5A  53                    1	   PUSH BX 
 0E5B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E5D  8B 16 007D R          1	   MOV     DX, STARTPOS_Y_PORTAL3     ; Y TO ST
				ART DRAWING AT 
 0E61  8B 2E 0090 R          1	   MOV BP, PORTAL_SIZE 
 0E65  8A 3C                 1	   MOV BH, [SI] 
 0E67                        1	   ??005A:;{ FOR(BP = 50; BD > 0; BP--) 
 0E67  8B 0E 007B R          1	      MOV     CX, STARTPOS_X_PORTAL3    ; X TO 
				START 
 0E6B  8B 3E 0090 R          1	      MOV DI, PORTAL_SIZE 
 0E6F                        1	      ??0059:;{ FOR(DX = 50; DX > 0; DX--) 
 0E6F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E70  3A F8                 1	         CMP BH ,AL 
 0E72  74 04                 1	         JE ??005B 
 0E74  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E76  CD 10                 1	         INT     10H 
 0E78                        1	         ??005B: 
 0E78  41                    1	         INC     CX         ; NEXT X POSITION 
 0E79  4F                    1	         DEC     DI 
 0E7A  75 F3                 1	         JNZ     ??0059 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-72


 0E7C  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E7D  4D                    1	      DEC     BP 
 0E7E  75 E7                 1	      JNZ     ??005A 
 0E80  5B                    1	      POP BX 
 0E81  59                    1	      POP CX 
				   ;}
 0E82				   NOGHOST3:
 0E82  C3			   RET
				;}
 0E83				DRAW_PORTALS ENDP
				
				
				;----------------------------------------------
				--------------------------------------------
				 ; _             _  _        _        
				 ;| |           | || |      | |       
				 ;| |__   _   _ | || |  ___ | |_  ___ 
				 ;| '_ \ | | | || || | / _ \| __|/ __|
				 ;| |_) || |_| || || ||  __/| |_ \__ \
				 ;|_.__/  \__,_||_||_| \___| \__||___/
				 ;---------------------------------------------
				----------------------------------------------
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 1 CANON SET ITS MOTI
				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
				;----------------------------------------------
				-----------------------------------------------
				------
 0E83				FIRE_BULLET_1 PROC
				;{
 0E83  50			   PUSH AX
 0E84  53			   PUSH BX
 0E85  51			   PUSH CX
 0E86  52			   PUSH DX
				   
				   ;IF(BULLET_1_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0E87  83 3E 003D R 01		   CMP BULLET_1_STATUS,1
 0E8C  74 21			      JE RET_FIRE_BUL_1   
				   ;ELSE DRAW A BULLET AT START POSITION
 0E8E  C7 06 003D R 0001	      MOV BULLET_1_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 0E94  8B 1E 0015 R		      MOV BX , BULLET_1_START_POSITION_X
 0E98  89 1E 0039 R		      MOV BULLET_1_POSITION_X, BX
 0E9C  8B 1E 0017 R		      MOV BX, BULLET_1_START_POSITION_Y
 0EA0  89 1E 003B R		      MOV BULLET_1_POSITION_Y, BX
 0EA4  8B 1E 0013 R		      MOV BX, ORIENTATION_PLAYER1 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 0EA8  89 1E 003F R		      MOV BULLET_1_MOTION_TYPE, BX
 0EAC  E8 0EB4 R		      CALL DRAW_BULLET_1    
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-73


				   
 0EAF				   RET_FIRE_BUL_1:
 0EAF  5A			   POP DX
 0EB0  59			   POP CX
 0EB1  5B			   POP BX
 0EB2  58			   POP AX 
 0EB3  C3			   RET
				;}
 0EB4				FIRE_BULLET_1 ENDP
				
				;----------------------------------------------
				--------------------------------
				; DRAWS A BULLET 1 AT BULLET_POSTION_1 X , Y IF
				 THE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 0EB4				DRAW_BULLET_1 PROC
				;{   
 0EB4  50			   PUSH AX
 0EB5  53			   PUSH BX
 0EB6  51			   PUSH CX
 0EB7  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 0EB8  83 3E 003D R 01		   CMP BULLET_1_STATUS, 1
 0EBD  75 6F			   JNE RET_DRW_BUL_11   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_1_POSITION_X, BULLE
				T_1_POSITION_Y, BULLETSIZE , BULLET_1_STATUS ;R
				ETURNS IN BULLETSTATUS 0 IF NOT WITHIN
 0EBF  50                    1	   PUSH AX 
 0EC0  53                    1	   PUSH BX 
 0EC1  51                    1	   PUSH CX 
 0EC2  52                    1	   PUSH DX 
 0EC3  C7 06 003D R 0001     1	   MOV BULLET_1_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 0EC9                        1	   ??005C: 
 0EC9  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0ECD  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0ED1  2B CB                 1	      SUB CX, BX 
 0ED3  83 F9 00              1	      CMP CX, 0 
 0ED6  7D 06                 1	      JGE ??005D 
 0ED8  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0EDE                        1	   ??005D: 
 0EDE  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0EE2  03 0E 0094 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0EE6  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0EEA  2B D9                 1	      SUB BX, CX 
 0EEC  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0EEF  7D 06                 1	      JGE ??005F 
 0EF1  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0EF7                        1	   ??005F: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-74


 0EF7  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0EFB  03 0E 0094 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0EFF  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0F03  2B D9                 1	      SUB BX, CX 
 0F05  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0F08  7D 06                 1	      JGE ??005E 
 0F0A  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F10                        1	   ??005E: 
 0F10  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0F14  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0F18  2B CB                 1	      SUB CX, BX 
 0F1A  83 F9 00              1	      CMP CX, 0 
 0F1D  7D 06                 1	      JGE ??0060 
 0F1F  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F25                        1	   ??0060: 
 0F25  5A                    1	   POP DX 
 0F26  59                    1	   POP CX 
 0F27  5B                    1	   POP BX 
 0F28  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 0F29  83 3E 003D R 01		      CMP BULLET_1_STATUS, 1
 0F2E				      RET_DRW_BUL_11:      ;USELESS LABEL FOR I
				NTERMEDIATE JUMP
 0F2E  75 30			      JNE RET_DRW_BUL_1
 0F30  8B 1E 0094 R		      MOV BX , BULLETSIZE
 0F34  BE 0000 E		      MOV SI, OFFSET Bullet_1_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_1_PO
				SITION_X, BULLET_1_POSITION_Y
 0F37  51                    1	   PUSH CX 
 0F38  53                    1	   PUSH BX 
 0F39  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0F3B  8B 16 003B R          1	   MOV     DX, BULLET_1_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 0F3F  8B 2E 0094 R          1	   MOV BP, BULLETSIZE 
 0F43  8A 3C                 1	   MOV BH, [SI] 
 0F45                        1	   ??0062:;{ FOR(BP = 50; BD > 0; BP--) 
 0F45  8B 0E 0039 R          1	      MOV     CX, BULLET_1_POSITION_X    ; X TO
				 START 
 0F49  8B 3E 0094 R          1	      MOV DI, BULLETSIZE 
 0F4D                        1	      ??0061:;{ FOR(DX = 50; DX > 0; DX--) 
 0F4D  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0F4E  3A F8                 1	         CMP BH ,AL 
 0F50  74 04                 1	         JE ??0063 
 0F52  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0F54  CD 10                 1	         INT     10H 
 0F56                        1	         ??0063: 
 0F56  41                    1	         INC     CX         ; NEXT X POSITION 
 0F57  4F                    1	         DEC     DI 
 0F58  75 F3                 1	         JNZ     ??0061 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-75


 0F5A  42                    1	      INC     DX         ; NEXT Y POSITION 
 0F5B  4D                    1	      DEC     BP 
 0F5C  75 E7                 1	      JNZ     ??0062 
 0F5E  5B                    1	      POP BX 
 0F5F  59                    1	      POP CX 
 0F60				   RET_DRW_BUL_1:
 0F60  5A			   POP DX
 0F61  59			   POP CX
 0F62  5B			   POP BX
 0F63  58			   POP AX 
 0F64  C3			   RET
				;}
 0F65				DRAW_BULLET_1 ENDP
				;----------------------------------------------
				--------------------------------
				; MOVES BULLET 1 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROCEDURE 
				;----------------------------------------------
				--------------------------------
 0F65				MOVE_BULLET_1 PROC 
				;{
 0F65  50			   PUSH AX
 0F66  53			   PUSH BX
 0F67  51			   PUSH CX
 0F68  52			   PUSH DX
				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 0F69  83 3E 003D R 00		   CMP BULLET_1_STATUS, 0
 0F6E  74 6D			   JE RET_MOV_BUL_1
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPRIGH
				T, 2:RIGHT, 3:DOWNRIGHT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 0F70  A1 0041 R		   MOV AX ,BULLET_1_SPEED                
				   ;{
 0F73  83 3E 003F R 00		      CMP BULLET_1_MOTION_TYPE,0
 0F78  75 07			      JNE UPRIGHTB
 0F7A  29 06 003B R		      SUB BULLET_1_POSITION_Y, AX         ;MOVE
				 WITH SPEED 
 0F7E  EB 5D 90			      JMP RET_MOV_BUL_1
				   ;}
 0F81				   UPRIGHTB:
				   ;{
 0F81  83 3E 003F R 01		      CMP BULLET_1_MOTION_TYPE,1
 0F86  75 1E			      JNE RIGHTB
 0F88  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0F8D  77 06			      JA UP_RIGHT_SPEED
 0F8F  2D 0004			      SUB AX,4
 0F92  EB 04 90			      JMP UP_RIGHT_MOVEMENT
 0F95				   UP_RIGHT_SPEED: 
 0F95  2D 0008			      SUB AX,8                            ;UP R
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-76


				IGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHAN
				GE IT)
 0F98				   UP_RIGHT_MOVEMENT:   
 0F98  01 06 0039 R		      ADD BULLET_1_POSITION_X,AX
 0F9C  29 06 003B R		      SUB BULLET_1_POSITION_Y,AX
 0FA0  A1 0041 R		      MOV AX,BULLET_1_SPEED               ;RESE
				T AX=SPEED OF BULLET 
 0FA3  EB 38 90			      JMP RET_MOV_BUL_1
				   ;}
 0FA6				   RIGHTB:
				   ;{
 0FA6  83 3E 003F R 02		      CMP BULLET_1_MOTION_TYPE,2
 0FAB  75 07			      JNE DOWNRIGHTB
 0FAD  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FB1  EB 2A 90			      JMP RET_MOV_BUL_1 
				   ;}
 0FB4				   DOWNRIGHTB:
				   ;{
 0FB4  83 3E 003F R 03		      CMP BULLET_1_MOTION_TYPE,3
 0FB9  75 1E			      JNE DOWNB
 0FBB  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0FC0  77 06			      JA DOWN_RIGHT_SPEED
 0FC2  2D 0004			      SUB AX,4
 0FC5  EB 04 90			      JMP DOWN_RIGHT_MOVEMENT
 0FC8				   DOWN_RIGHT_SPEED:
 0FC8  2D 0008			      SUB AX,8                           ;DOWN 
				RIGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHA
				NGE IT)
 0FCB				   DOWN_RIGHT_MOVEMENT:  
 0FCB  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
 0FCF  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FD3  A1 0041 R		      MOV AX,BULLET_1_SPEED
 0FD6  EB 05 90			      JMP RET_MOV_BUL_1
				   ;}
 0FD9				   DOWNB:
				   ;{
 0FD9  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
				   ;}
				
 0FDD				   RET_MOV_BUL_1:
 0FDD  5A			   POP DX
 0FDE  59			   POP CX
 0FDF  5B			   POP BX
 0FE0  58			   POP AX 
 0FE1  C3			   RET
				;}  
 0FE2				MOVE_BULLET_1 ENDP
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 2 CANON SET ITS MOTI
				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-77


				;----------------------------------------------
				-----------------------------------------------
				------
 0FE2				FIRE_BULLET2 PROC
				;{
 0FE2  50			   PUSH AX
 0FE3  53			   PUSH BX
 0FE4  51			   PUSH CX
 0FE5  52			   PUSH DX
				   
				   ;IF(BULLET_2_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0FE6  83 3E 0049 R 01		   CMP BULLET_2_STATUS,1
 0FEB  74 21			      JE RET_FIRE_BUL_2   
				   ;ELSE DRAW A BULLET AT START POSITION
 0FED  C7 06 0049 R 0001	      MOV BULLET_2_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 0FF3  8B 1E 0035 R		      MOV BX , BULLET_2_START_POSITION_X
 0FF7  89 1E 0045 R		      MOV BULLET_2_POSITION_X, BX
 0FFB  8B 1E 0037 R		      MOV BX, BULLET_2_START_POSITION_Y
 0FFF  89 1E 0047 R		      MOV BULLET_2_POSITION_Y, BX
 1003  8B 1E 0023 R		      MOV BX, ORIENTATION_PLAYER2 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 1007  89 1E 004B R		      MOV BULLET_2_MOTION_TYPE, BX
 100B  E8 1013 R		      CALL DRAW_BULLET_2    
				   
 100E				   RET_FIRE_BUL_2:
 100E  5A			   POP DX
 100F  59			   POP CX
 1010  5B			   POP BX
 1011  58			   POP AX 
 1012  C3			   RET
				;}
 1013				FIRE_BULLET2 ENDP
				;----------------------------------------------
				--------------------------------
				; DRAWS BULLET 2 AT BULLET_POSTION_1 X , Y IF T
				HE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 1013				DRAW_BULLET_2 PROC
				;{   
 1013  50			   PUSH AX
 1014  53			   PUSH BX
 1015  51			   PUSH CX
 1016  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 1017  83 3E 0049 R 01		   CMP BULLET_2_STATUS, 1
 101C  75 6F			   JNE RET_DRW_BUL_22   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_2_POSITION_X, BULLE
				T_2_POSITION_Y, BULLETSIZE , BULLET_2_STATUS ;R
				ETURNS IN BULLETSTATUS 0 IF NOT WITHIN
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-78


 101E  50                    1	   PUSH AX 
 101F  53                    1	   PUSH BX 
 1020  51                    1	   PUSH CX 
 1021  52                    1	   PUSH DX 
 1022  C7 06 0049 R 0001     1	   MOV BULLET_2_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 1028                        1	   ??0064: 
 1028  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 102C  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 1030  2B CB                 1	      SUB CX, BX 
 1032  83 F9 00              1	      CMP CX, 0 
 1035  7D 06                 1	      JGE ??0065 
 1037  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 103D                        1	   ??0065: 
 103D  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 1041  03 0E 0094 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 1045  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 1049  2B D9                 1	      SUB BX, CX 
 104B  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 104E  7D 06                 1	      JGE ??0067 
 1050  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1056                        1	   ??0067: 
 1056  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 105A  03 0E 0094 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 105E  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 1062  2B D9                 1	      SUB BX, CX 
 1064  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 1067  7D 06                 1	      JGE ??0066 
 1069  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 106F                        1	   ??0066: 
 106F  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 1073  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 1077  2B CB                 1	      SUB CX, BX 
 1079  83 F9 00              1	      CMP CX, 0 
 107C  7D 06                 1	      JGE ??0068 
 107E  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1084                        1	   ??0068: 
 1084  5A                    1	   POP DX 
 1085  59                    1	   POP CX 
 1086  5B                    1	   POP BX 
 1087  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 1088  83 3E 0049 R 01		      CMP BULLET_2_STATUS, 1
 108D				      RET_DRW_BUL_22:      ;USELESS LABEL FOR I
				NTERMEDIATE JUMP
 108D  75 2C			      JNE RET_DRW_BUL_2
 108F  BE 0000 E		      MOV SI, OFFSET Bullet_2_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_2_PO
				SITION_X, BULLET_2_POSITION_Y
 1092  51                    1	   PUSH CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-79


 1093  53                    1	   PUSH BX 
 1094  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1096  8B 16 0047 R          1	   MOV     DX, BULLET_2_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 109A  8B 2E 0094 R          1	   MOV BP, BULLETSIZE 
 109E  8A 3C                 1	   MOV BH, [SI] 
 10A0                        1	   ??006A:;{ FOR(BP = 50; BD > 0; BP--) 
 10A0  8B 0E 0045 R          1	      MOV     CX, BULLET_2_POSITION_X    ; X TO
				 START 
 10A4  8B 3E 0094 R          1	      MOV DI, BULLETSIZE 
 10A8                        1	      ??0069:;{ FOR(DX = 50; DX > 0; DX--) 
 10A8  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 10A9  3A F8                 1	         CMP BH ,AL 
 10AB  74 04                 1	         JE ??006B 
 10AD  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 10AF  CD 10                 1	         INT     10H 
 10B1                        1	         ??006B: 
 10B1  41                    1	         INC     CX         ; NEXT X POSITION 
 10B2  4F                    1	         DEC     DI 
 10B3  75 F3                 1	         JNZ     ??0069 
 10B5  42                    1	      INC     DX         ; NEXT Y POSITION 
 10B6  4D                    1	      DEC     BP 
 10B7  75 E7                 1	      JNZ     ??006A 
 10B9  5B                    1	      POP BX 
 10BA  59                    1	      POP CX 
 10BB				   RET_DRW_BUL_2:
 10BB  5A			   POP DX
 10BC  59			   POP CX
 10BD  5B			   POP BX
 10BE  58			   POP AX 
 10BF  C3			   RET
				;}
 10C0				DRAW_BULLET_2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				; MOVES BULLET 2 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROCEDURE 
				;----------------------------------------------
				-------------------------------------------
 10C0				MOVE_BULLET_2 PROC 
				;{
 10C0  50			   PUSH AX
 10C1  53			   PUSH BX
 10C2  51			   PUSH CX
 10C3  52			   PUSH DX
				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 10C4  83 3E 0049 R 00		   CMP BULLET_2_STATUS, 0
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-80


 10C9  74 6D			   JE RET_MOV_BUL_2
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPLEFT
				, 2:LEFT, 3:DOWNLEFT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 10CB  A1 004D R		   MOV AX,BULLET_2_SPEED
				   ;{
 10CE  83 3E 004B R 00		      CMP BULLET_2_MOTION_TYPE,0
 10D3  75 07			      JNE UPLEFTB
 10D5  29 06 0047 R		      SUB BULLET_2_POSITION_Y, AX
 10D9  EB 5D 90			      JMP RET_MOV_BUL_2
				   ;}
 10DC				   UPLEFTB:
				   ;{
 10DC  83 3E 004B R 01		      CMP BULLET_2_MOTION_TYPE,1
 10E1  75 1E			      JNE LEFTB
 10E3  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 10E8  77 06			      JA UP_LEFT
 10EA  2D 0005			      SUB AX,5
 10ED  EB 04 90			      JMP UP_LEFT_MOVEMENT
 10F0				   UP_LEFT:   
 10F0  2D 0008			      SUB AX,8
 10F3				   UP_LEFT_MOVEMENT:   
 10F3  29 06 0045 R		      SUB BULLET_2_POSITION_X,AX
 10F7  29 06 0047 R		      SUB BULLET_2_POSITION_Y,AX
 10FB  A1 004D R		      MOV AX,BULLET_2_SPEED
 10FE  EB 38 90			      JMP RET_MOV_BUL_2
				   ;}
 1101				   LEFTB:
				   ;{
 1101  83 3E 004B R 02		      CMP BULLET_2_MOTION_TYPE,2
 1106  75 07			      JNE DOWNLEFTB
 1108  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
				      
 110C  EB 2A 90			      JMP RET_MOV_BUL_2 
				  ;}
 110F				   DOWNLEFTB:
				   ;{
 110F  83 3E 004B R 03		      CMP BULLET_2_MOTION_TYPE,3
 1114  75 1E			      JNE DOWNB2
 1116  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 111B  77 06			      JA DOWN_LEFT
 111D  2D 0005			   SUB AX,5
 1120  EB 04 90			      JMP DOWN_LEFT_MOVEMENT
 1123				   DOWN_LEFT:   
 1123  2D 0008			      SUB AX,8
 1126				   DOWN_LEFT_MOVEMENT:
 1126  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
 112A  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
 112E  A1 004D R		      MOV AX,BULLET_2_SPEED
 1131  EB 05 90			      JMP RET_MOV_BUL_2
				   ;}
 1134				   DOWNB2:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-81


				   ;{
 1134  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
				   ;}
				
 1138				   RET_MOV_BUL_2:
 1138  5A			   POP DX
 1139  59			   POP CX
 113A  5B			   POP BX
 113B  58			   POP AX 
 113C  C3			   RET
				;}  
 113D				MOVE_BULLET_2 ENDP
				 
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits tank 2 
				;----------------------------------------------
				-------------------------------------------
 113D				CHECK_HIT_BUL1_TANK2 PROC
				;{
 113D  50			   PUSH AX
 113E  53			   PUSH BX
 113F  51			   PUSH CX
 1140  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, BULLET_1_POSITION_X, 
				BULLET_1_POSITION_Y, BULLETSIZE, BULLET_1_STATU
				S
 1141  50                    1	    PUSH AX 
 1142  53                    1	    PUSH BX 
 1143  51                    1	    PUSH CX 
 1144  52                    1	    PUSH DX 
 1145  55                    1	    PUSH BP 
 1146  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 114A  D1 E9                 1	        SHR CX, 1 
 114C  8B 16 0094 R          1	        MOV DX, BULLETSIZE 
 1150  D1 EA                 1	        SHR DX, 1 
 1152  BD 0000               1	        MOV BP , 0 
 1155  03 EA                 1	        ADD BP, DX 
 1157  03 E9                 1	        ADD BP, CX 
 1159  83 ED 03              1	        SUB BP ,3 
 115C  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 115F  03 C1                 1	        ADD AX, CX 
 1161  8B 1E 0039 R          1	        MOV BX, BULLET_1_POSITION_X 
 1165  03 DA                 1	        ADD BX, DX 
 1167  3B C3                 1	        CMP AX,BX 
 1169  7C 09                 1	        JL ??006C 
 116B  2B C3                 1	        SUB AX ,BX 
 116D  3B C5                 1	        CMP AX, BP 
 116F  77 30                 1	        JA ??006E 
 1171  EB 07 90              1	        JMP ??006D 
 1174                        1	        ??006C: 
 1174  2B D8                 1	            SUB BX, AX 
 1176  3B DD                 1	            CMP BX, BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-82


 1178  77 27                 1	            JA ??006E 
 117A                        1	        ??006D: 
 117A  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 117D  03 C1                 1	        ADD AX, CX 
 117F  8B 1E 003B R          1	        MOV BX, BULLET_1_POSITION_Y 
 1183  03 DA                 1	        ADD BX, DX 
 1185  3B C3                 1	        CMP AX, BX 
 1187  7C 09                 1	        JL ??006F 
 1189  2B C3                 1	        SUB AX,BX 
 118B  3B C5                 1	        CMP AX, BP 
 118D  77 12                 1	        JA ??006E 
 118F  EB 07 90              1	        JMP ??0070 
 1192                        1	        ??006F: 
 1192  2B D8                 1	            SUB BX, AX 
 1194  3B DD                 1	            CMP BX, BP 
 1196  77 09                 1	            JA ??006E 
 1198                        1	        ??0070: 
 1198  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 119E  EB 07 90              1	        JMP ??0071 
 11A1                        1	    ??006E: 
 11A1  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 11A7                        1	    ??0071: 
 11A7  5D                    1	    POP BP 
 11A8  5A                    1	    POP DX 
 11A9  59                    1	    POP CX 
 11AA  5B                    1	    POP BX 
 11AB  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 11AC  83 3E 003D R 00		         CMP BULLET_1_STATUS, 0
 11B1  75 19			         JNE NOHIT1
				         ;MAY BE SPLIT IN ANOTHER PROCEDURE JUS
				TFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 11B3  A1 0011 R		         MOV AX, TANK_DMG_1         
 11B6  39 06 001D R		         CMP TANK_HP_2,AX             ;IF HP<= 
				THE OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 11BA  7E 07			         JLE LOSER2
				         
 11BC  29 06 001D R		         SUB TANK_HP_2, AX            ;OTHERWIS
				E HIS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 11C0  EB 0A 90			         JMP NOHIT1
				
 11C3				      LOSER2: 
 11C3  C7 06 009C R 0001	      MOV WINNER ,1                   ;SET WHO 
				IS THE WINNER
 11C9  E8 1D05 R		      CALL PLAYER_LOST                ;TO PRINT
				 RESULTS    
				      ;}
 11CC				   NOHIT1:   
 11CC  5A			   POP DX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-83


 11CD  59			   POP CX
 11CE  5B			   POP BX
 11CF  58			   POP AX
 11D0  C3			   RET
				;}   
 11D1				CHECK_HIT_BUL1_TANK2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost1 
				;----------------------------------------------
				-------------------------------------------
 11D1				CHECK_HIT_BUL1_GHOST1 PROC
				;{
 11D1  50			   PUSH AX
 11D2  53			   PUSH BX
 11D3  51			   PUSH CX
 11D4  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_1_STATUS
				     
 11D5  50                    1	    PUSH AX 
 11D6  53                    1	    PUSH BX 
 11D7  51                    1	    PUSH CX 
 11D8  52                    1	    PUSH DX 
 11D9  55                    1	    PUSH BP 
 11DA  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 11DE  D1 E9                 1	        SHR CX, 1 
 11E0  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 11E4  D1 EA                 1	        SHR DX, 1 
 11E6  BD 0000               1	        MOV BP , 0 
 11E9  03 EA                 1	        ADD BP, DX 
 11EB  03 E9                 1	        ADD BP, CX 
 11ED  83 ED 03              1	        SUB BP ,3 
 11F0  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 11F3  03 C1                 1	        ADD AX, CX 
 11F5  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 11F9  03 DA                 1	        ADD BX, DX 
 11FB  3B C3                 1	        CMP AX,BX 
 11FD  7C 09                 1	        JL ??0072 
 11FF  2B C3                 1	        SUB AX ,BX 
 1201  3B C5                 1	        CMP AX, BP 
 1203  77 30                 1	        JA ??0074 
 1205  EB 07 90              1	        JMP ??0073 
 1208                        1	        ??0072: 
 1208  2B D8                 1	            SUB BX, AX 
 120A  3B DD                 1	            CMP BX, BP 
 120C  77 27                 1	            JA ??0074 
 120E                        1	        ??0073: 
 120E  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1211  03 C1                 1	        ADD AX, CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-84


 1213  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1217  03 DA                 1	        ADD BX, DX 
 1219  3B C3                 1	        CMP AX, BX 
 121B  7C 09                 1	        JL ??0075 
 121D  2B C3                 1	        SUB AX,BX 
 121F  3B C5                 1	        CMP AX, BP 
 1221  77 12                 1	        JA ??0074 
 1223  EB 07 90              1	        JMP ??0076 
 1226                        1	        ??0075: 
 1226  2B D8                 1	            SUB BX, AX 
 1228  3B DD                 1	            CMP BX, BP 
 122A  77 09                 1	            JA ??0074 
 122C                        1	        ??0076: 
 122C  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1232  EB 07 90              1	        JMP ??0077 
 1235                        1	    ??0074: 
 1235  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 123B                        1	    ??0077: 
 123B  5D                    1	    POP BP 
 123C  5A                    1	    POP DX 
 123D  59                    1	    POP CX 
 123E  5B                    1	    POP BX 
 123F  58                    1	    POP AX 
 1240  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1245  75 48			      JNE GHOST1_LIVES
				
				      ;POWER-UPS
				      ;( 
 1247  83 3E 005B R 00		      CMP POWERUP_GHOST1,0         ;IF POWERUPS
				=0 IT WILL INCREASE THE HP BY 1 UNLESS HE HAS H
				P=10
 124C  74 02			      JZ HP_LIMIT1
 124E  75 0F			      JNZ SPEED_INCREASE1
				      ;)
 1250				      HP_LIMIT1:
				      ;(
 1250  83 3E 000D R 0A		      CMP TANK_HP_1,10                     
 1255  74 2C			      JZ T1_KILL_G1                ;IF HP=10 KI
				LL THE GHOST WITHOUT INCREASING HP
 1257  83 06 000D R 01		      ADD TANK_HP_1,1
 125C  EB 25 90			      JMP T1_KILL_G1
				      ;)
				
 125F				      SPEED_INCREASE1:
				      ;(
 125F  83 3E 005B R 01		      CMP POWERUP_GHOST1,1         ;IF POWERUPS
				=1 THE SPEED WILL INCREASE BUT IT HAS LIMIT (AT
				 MOST 3 TIMES)
 1264  74 0B			      JZ SPEED_LIMIT1
 1266  75 00			      JNZ INCREASE_DAMAGE1
				      ;)
 1268				      INCREASE_DAMAGE1:
				      ;(
 1268  C7 06 0011 R 0002	          MOV TANK_DMG_1,2        ;IF POWERUPS=
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-85


				2  THE TANK DAMAGE WILL BE 2 
 126E  EB 13 90			          JMP T1_KILL_G1
				      ;)
 1271				      SPEED_LIMIT1:
				      ;(
 1271  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3  
				        ;IF NUMBER OF SPEED POWERUPS =3 KILL TH
				E GHOST ONLY
 1276  7D 0B			               JNL T1_KILL_G1
 1278  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 127B  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 127F  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1283				    T1_KILL_G1:  
				     ;(      
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1283  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1289  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
				      
 128F				   GHOST1_LIVES:   
 128F  5A			   POP DX
 1290  59			   POP CX
 1291  5B			   POP BX
 1292  58			   POP AX
 1293  C3			   RET
				;}   
 1294				CHECK_HIT_BUL1_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 1294				CHECK_HIT_BUL1_GHOST2 PROC
				;{
 1294  50			   PUSH AX
 1295  53			   PUSH BX
 1296  51			   PUSH CX
 1297  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_1_STATUS
				     
 1298  50                    1	    PUSH AX 
 1299  53                    1	    PUSH BX 
 129A  51                    1	    PUSH CX 
 129B  52                    1	    PUSH DX 
 129C  55                    1	    PUSH BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-86


 129D  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 12A1  D1 E9                 1	        SHR CX, 1 
 12A3  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 12A7  D1 EA                 1	        SHR DX, 1 
 12A9  BD 0000               1	        MOV BP , 0 
 12AC  03 EA                 1	        ADD BP, DX 
 12AE  03 E9                 1	        ADD BP, CX 
 12B0  83 ED 03              1	        SUB BP ,3 
 12B3  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 12B6  03 C1                 1	        ADD AX, CX 
 12B8  8B 1E 0062 R          1	        MOV BX, STARTPOS_X_GHOST2 
 12BC  03 DA                 1	        ADD BX, DX 
 12BE  3B C3                 1	        CMP AX,BX 
 12C0  7C 09                 1	        JL ??0078 
 12C2  2B C3                 1	        SUB AX ,BX 
 12C4  3B C5                 1	        CMP AX, BP 
 12C6  77 30                 1	        JA ??007A 
 12C8  EB 07 90              1	        JMP ??0079 
 12CB                        1	        ??0078: 
 12CB  2B D8                 1	            SUB BX, AX 
 12CD  3B DD                 1	            CMP BX, BP 
 12CF  77 27                 1	            JA ??007A 
 12D1                        1	        ??0079: 
 12D1  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 12D4  03 C1                 1	        ADD AX, CX 
 12D6  8B 1E 0064 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 12DA  03 DA                 1	        ADD BX, DX 
 12DC  3B C3                 1	        CMP AX, BX 
 12DE  7C 09                 1	        JL ??007B 
 12E0  2B C3                 1	        SUB AX,BX 
 12E2  3B C5                 1	        CMP AX, BP 
 12E4  77 12                 1	        JA ??007A 
 12E6  EB 07 90              1	        JMP ??007C 
 12E9                        1	        ??007B: 
 12E9  2B D8                 1	            SUB BX, AX 
 12EB  3B DD                 1	            CMP BX, BP 
 12ED  77 09                 1	            JA ??007A 
 12EF                        1	        ??007C: 
 12EF  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 12F5  EB 07 90              1	        JMP ??007D 
 12F8                        1	    ??007A: 
 12F8  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 12FE                        1	    ??007D: 
 12FE  5D                    1	    POP BP 
 12FF  5A                    1	    POP DX 
 1300  59                    1	    POP CX 
 1301  5B                    1	    POP BX 
 1302  58                    1	    POP AX 
 1303  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1308  75 48			      JNE GHOST2_LIVES
				      ;POWER-UPS
				      ;( 
 130A  83 3E 006A R 00		      CMP POWERUP_GHOST2,0
 130F  74 02			      JZ HP_LIMIT2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-87


 1311  75 0F			      JNZ SPEED_INCREASE2
				      ;)
 1313				      HP_LIMIT2:
				      ;(
 1313  83 3E 000D R 0A		      CMP TANK_HP_1,10
 1318  74 2C			      JZ T1_KILL_G2
 131A  83 06 000D R 01		      ADD TANK_HP_1,1
 131F  EB 25 90			      JMP T1_KILL_G2
				      ;)
				
 1322				      SPEED_INCREASE2:
				      ;(
 1322  83 3E 006A R 01		      CMP POWERUP_GHOST2,1
 1327  74 0B			      JZ SPEED_LIMIT2
 1329  75 00			      JNZ INCREASE_DAMAGE2
				      ;)
 132B				      INCREASE_DAMAGE2:
				      ;(
				           
 132B  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 1331  EB 13 90			          JMP T1_KILL_G2
				      ;)
 1334				      SPEED_LIMIT2:
				      ;( 
 1334  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 1339  7D 0B			               JNL T1_KILL_G2
 133B  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 133E  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1342  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1346				    T1_KILL_G2:  
				      ;(
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1346  C7 06 0066 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 134C  81 2E 0064 R 0258	      SUB STARTPOS_Y_GHOST2, 600
				      ;)
 1352				   GHOST2_LIVES:   
 1352  5A			   POP DX
 1353  59			   POP CX
 1354  5B			   POP BX
 1355  58			   POP AX
 1356  C3			   RET
				;}   
 1357				CHECK_HIT_BUL1_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost3 
				;----------------------------------------------
				-------------------------------------------
 1357				CHECK_HIT_BUL1_GHOST3 PROC
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-88


				;{
 1357  50			   PUSH AX
 1358  53			   PUSH BX
 1359  51			   PUSH CX
 135A  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_1_STATUS
				     
 135B  50                    1	    PUSH AX 
 135C  53                    1	    PUSH BX 
 135D  51                    1	    PUSH CX 
 135E  52                    1	    PUSH DX 
 135F  55                    1	    PUSH BP 
 1360  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 1364  D1 E9                 1	        SHR CX, 1 
 1366  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 136A  D1 EA                 1	        SHR DX, 1 
 136C  BD 0000               1	        MOV BP , 0 
 136F  03 EA                 1	        ADD BP, DX 
 1371  03 E9                 1	        ADD BP, CX 
 1373  83 ED 03              1	        SUB BP ,3 
 1376  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 1379  03 C1                 1	        ADD AX, CX 
 137B  8B 1E 0071 R          1	        MOV BX, STARTPOS_X_GHOST3 
 137F  03 DA                 1	        ADD BX, DX 
 1381  3B C3                 1	        CMP AX,BX 
 1383  7C 09                 1	        JL ??007E 
 1385  2B C3                 1	        SUB AX ,BX 
 1387  3B C5                 1	        CMP AX, BP 
 1389  77 30                 1	        JA ??0080 
 138B  EB 07 90              1	        JMP ??007F 
 138E                        1	        ??007E: 
 138E  2B D8                 1	            SUB BX, AX 
 1390  3B DD                 1	            CMP BX, BP 
 1392  77 27                 1	            JA ??0080 
 1394                        1	        ??007F: 
 1394  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1397  03 C1                 1	        ADD AX, CX 
 1399  8B 1E 0073 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 139D  03 DA                 1	        ADD BX, DX 
 139F  3B C3                 1	        CMP AX, BX 
 13A1  7C 09                 1	        JL ??0081 
 13A3  2B C3                 1	        SUB AX,BX 
 13A5  3B C5                 1	        CMP AX, BP 
 13A7  77 12                 1	        JA ??0080 
 13A9  EB 07 90              1	        JMP ??0082 
 13AC                        1	        ??0081: 
 13AC  2B D8                 1	            SUB BX, AX 
 13AE  3B DD                 1	            CMP BX, BP 
 13B0  77 09                 1	            JA ??0080 
 13B2                        1	        ??0082: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-89


 13B2  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 13B8  EB 07 90              1	        JMP ??0083 
 13BB                        1	    ??0080: 
 13BB  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 13C1                        1	    ??0083: 
 13C1  5D                    1	    POP BP 
 13C2  5A                    1	    POP DX 
 13C3  59                    1	    POP CX 
 13C4  5B                    1	    POP BX 
 13C5  58                    1	    POP AX 
 13C6  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 13CB  75 48			      JNE GHOST3_LIVES
				      ;POWER-UPS
				      ;( 
 13CD  83 3E 0079 R 00		      CMP POWERUP_GHOST3,0
 13D2  74 02			      JZ HP_LIMIT3
 13D4  75 0F			      JNZ SPEED_INCREASE3
				      ;)
 13D6				      HP_LIMIT3:
				      ;(
 13D6  83 3E 000D R 0A		      CMP TANK_HP_1,10
 13DB  74 2C			      JZ T1_KILL_G3
 13DD  83 06 000D R 01		      ADD TANK_HP_1,1
 13E2  EB 25 90			      JMP T1_KILL_G3
				      ;)
				
 13E5				      SPEED_INCREASE3:
				      ;(
 13E5  83 3E 0079 R 01		      CMP POWERUP_GHOST3,1
 13EA  74 0B			      JZ SPEED_LIMIT3
 13EC  75 00			      JNZ INCREASE_DAMAGE3
				      ;)
 13EE				      INCREASE_DAMAGE3:
				      ;(
				          
 13EE  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 13F4  EB 13 90			          JMP T1_KILL_G3
				      ;)
 13F7				      SPEED_LIMIT3:
				      ;(
 13F7  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 13FC  7D 0B			               JNL T1_KILL_G3
 13FE  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1401  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1405  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1409				    T1_KILL_G3:  
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1409  C7 06 0075 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST3 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 140F  81 2E 0073 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 1415				   GHOST3_LIVES:   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-90


 1415  5A			   POP DX
 1416  59			   POP CX
 1417  5B			   POP BX
 1418  58			   POP AX
 1419  C3			   RET
				;}   
 141A				CHECK_HIT_BUL1_GHOST3 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits tank 1 
				;----------------------------------------------
				-------------------------------------------
 141A				CHECK_HIT_BUL2_TANK1 PROC
				;{
 141A  50			   PUSH AX
 141B  53			   PUSH BX
 141C  51			   PUSH CX
 141D  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, BULLET_2_POSITION_X, 
				BULLET_2_POSITION_Y, BULLETSIZE, BULLET_2_STATU
				S
 141E  50                    1	    PUSH AX 
 141F  53                    1	    PUSH BX 
 1420  51                    1	    PUSH CX 
 1421  52                    1	    PUSH DX 
 1422  55                    1	    PUSH BP 
 1423  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 1427  D1 E9                 1	        SHR CX, 1 
 1429  8B 16 0094 R          1	        MOV DX, BULLETSIZE 
 142D  D1 EA                 1	        SHR DX, 1 
 142F  BD 0000               1	        MOV BP , 0 
 1432  03 EA                 1	        ADD BP, DX 
 1434  03 E9                 1	        ADD BP, CX 
 1436  83 ED 03              1	        SUB BP ,3 
 1439  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 143C  03 C1                 1	        ADD AX, CX 
 143E  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 1442  03 DA                 1	        ADD BX, DX 
 1444  3B C3                 1	        CMP AX,BX 
 1446  7C 09                 1	        JL ??0084 
 1448  2B C3                 1	        SUB AX ,BX 
 144A  3B C5                 1	        CMP AX, BP 
 144C  77 30                 1	        JA ??0086 
 144E  EB 07 90              1	        JMP ??0085 
 1451                        1	        ??0084: 
 1451  2B D8                 1	            SUB BX, AX 
 1453  3B DD                 1	            CMP BX, BP 
 1455  77 27                 1	            JA ??0086 
 1457                        1	        ??0085: 
 1457  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 145A  03 C1                 1	        ADD AX, CX 
 145C  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-91


 1460  03 DA                 1	        ADD BX, DX 
 1462  3B C3                 1	        CMP AX, BX 
 1464  7C 09                 1	        JL ??0087 
 1466  2B C3                 1	        SUB AX,BX 
 1468  3B C5                 1	        CMP AX, BP 
 146A  77 12                 1	        JA ??0086 
 146C  EB 07 90              1	        JMP ??0088 
 146F                        1	        ??0087: 
 146F  2B D8                 1	            SUB BX, AX 
 1471  3B DD                 1	            CMP BX, BP 
 1473  77 09                 1	            JA ??0086 
 1475                        1	        ??0088: 
 1475  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 147B  EB 07 90              1	        JMP ??0089 
 147E                        1	    ??0086: 
 147E  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1484                        1	    ??0089: 
 1484  5D                    1	    POP BP 
 1485  5A                    1	    POP DX 
 1486  59                    1	    POP CX 
 1487  5B                    1	    POP BX 
 1488  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 1489  83 3E 0049 R 00		         CMP BULLET_2_STATUS, 0
 148E  75 19			         JNE NOHIT2
				         ;MAY BE SPLIT IN ANOTHER PROCEDURE JUS
				TFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 1490  A1 0021 R		         MOV AX, TANK_DMG_2        ;IF HP<= THE
				 OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 1493  39 06 000D R		         CMP TANK_HP_1,AX
 1497  7E 07			         JLE LOSER1
 1499  29 06 000D R		         SUB TANK_HP_1, AX         ;OTHERWISE H
				IS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 149D  EB 0A 90			         JMP NOHIT2
 14A0				         LOSER1:
 14A0  C7 06 009C R 0002	         MOV WINNER,2
 14A6  E8 1D05 R		         CALL PLAYER_LOST
				      ;}
 14A9				   NOHIT2:   
 14A9  5A			   POP DX
 14AA  59			   POP CX
 14AB  5B			   POP BX
 14AC  58			   POP AX
 14AD  C3			   RET
				;}   
 14AE				CHECK_HIT_BUL2_TANK1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-92


				;Detects if bullet 2 hits Ghost1 
				;----------------------------------------------
				-------------------------------------------
 14AE				CHECK_HIT_BUL2_GHOST1 PROC
				;{
 14AE  50			   PUSH AX
 14AF  53			   PUSH BX
 14B0  51			   PUSH CX
 14B1  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_2_STATUS
				     
 14B2  50                    1	    PUSH AX 
 14B3  53                    1	    PUSH BX 
 14B4  51                    1	    PUSH CX 
 14B5  52                    1	    PUSH DX 
 14B6  55                    1	    PUSH BP 
 14B7  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 14BB  D1 E9                 1	        SHR CX, 1 
 14BD  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 14C1  D1 EA                 1	        SHR DX, 1 
 14C3  BD 0000               1	        MOV BP , 0 
 14C6  03 EA                 1	        ADD BP, DX 
 14C8  03 E9                 1	        ADD BP, CX 
 14CA  83 ED 03              1	        SUB BP ,3 
 14CD  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 14D0  03 C1                 1	        ADD AX, CX 
 14D2  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 14D6  03 DA                 1	        ADD BX, DX 
 14D8  3B C3                 1	        CMP AX,BX 
 14DA  7C 09                 1	        JL ??008A 
 14DC  2B C3                 1	        SUB AX ,BX 
 14DE  3B C5                 1	        CMP AX, BP 
 14E0  77 30                 1	        JA ??008C 
 14E2  EB 07 90              1	        JMP ??008B 
 14E5                        1	        ??008A: 
 14E5  2B D8                 1	            SUB BX, AX 
 14E7  3B DD                 1	            CMP BX, BP 
 14E9  77 27                 1	            JA ??008C 
 14EB                        1	        ??008B: 
 14EB  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 14EE  03 C1                 1	        ADD AX, CX 
 14F0  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 14F4  03 DA                 1	        ADD BX, DX 
 14F6  3B C3                 1	        CMP AX, BX 
 14F8  7C 09                 1	        JL ??008D 
 14FA  2B C3                 1	        SUB AX,BX 
 14FC  3B C5                 1	        CMP AX, BP 
 14FE  77 12                 1	        JA ??008C 
 1500  EB 07 90              1	        JMP ??008E 
 1503                        1	        ??008D: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-93


 1503  2B D8                 1	            SUB BX, AX 
 1505  3B DD                 1	            CMP BX, BP 
 1507  77 09                 1	            JA ??008C 
 1509                        1	        ??008E: 
 1509  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 150F  EB 07 90              1	        JMP ??008F 
 1512                        1	    ??008C: 
 1512  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1518                        1	    ??008F: 
 1518  5D                    1	    POP BP 
 1519  5A                    1	    POP DX 
 151A  59                    1	    POP CX 
 151B  5B                    1	    POP BX 
 151C  58                    1	    POP AX 
 151D  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 1522  75 48			      JNE GHOST1_LIVES2
				      ;POWER-UPS
				      ;( 
 1524  83 3E 005B R 00		      CMP POWERUP_GHOST1,0
 1529  74 02			      JZ HP2_LIMIT1
 152B  75 0F			      JNZ SPEED2_INCREASE1
				      ;)
 152D				      HP2_LIMIT1:
				      ;(
 152D  83 3E 001D R 0A		      CMP TANK_HP_2,10
 1532  74 2C			      JZ T2_KILL_G1
 1534  83 06 001D R 01		      ADD TANK_HP_2,1
 1539  EB 25 90			      JMP T2_KILL_G1
				      ;)
				
 153C				      SPEED2_INCREASE1:
				      ;(
 153C  83 3E 005B R 01		      CMP POWERUP_GHOST1,1
 1541  74 0B			      JZ SPEED2_LIMIT1
 1543  75 00			      JNZ INCREASE2_DAMAGE1
				      ;)
 1545				      INCREASE2_DAMAGE1:
				      ;(
				           
 1545  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 154B  EB 13 90			          JMP T2_KILL_G1
				      ;)
 154E				      SPEED2_LIMIT1:
				      ;(
 154E  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 1553  7D 0B			               JNL T2_KILL_G1
 1555  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1558  01 06 004D R		               ADD BULLET_2_SPEED,AX
 155C  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1560				      T2_KILL_G1:
				      ;(
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-94


 1560  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1566  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
 156C				   GHOST1_LIVES2:   
 156C  5A			   POP DX
 156D  59			   POP CX
 156E  5B			   POP BX
 156F  58			   POP AX
 1570  C3			   RET
				;}   
 1571				CHECK_HIT_BUL2_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 1571				CHECK_HIT_BUL2_GHOST2 PROC
				;{
 1571  50			   PUSH AX
 1572  53			   PUSH BX
 1573  51			   PUSH CX
 1574  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_2_STATUS
				     
 1575  50                    1	    PUSH AX 
 1576  53                    1	    PUSH BX 
 1577  51                    1	    PUSH CX 
 1578  52                    1	    PUSH DX 
 1579  55                    1	    PUSH BP 
 157A  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 157E  D1 E9                 1	        SHR CX, 1 
 1580  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 1584  D1 EA                 1	        SHR DX, 1 
 1586  BD 0000               1	        MOV BP , 0 
 1589  03 EA                 1	        ADD BP, DX 
 158B  03 E9                 1	        ADD BP, CX 
 158D  83 ED 03              1	        SUB BP ,3 
 1590  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 1593  03 C1                 1	        ADD AX, CX 
 1595  8B 1E 0062 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1599  03 DA                 1	        ADD BX, DX 
 159B  3B C3                 1	        CMP AX,BX 
 159D  7C 09                 1	        JL ??0090 
 159F  2B C3                 1	        SUB AX ,BX 
 15A1  3B C5                 1	        CMP AX, BP 
 15A3  77 30                 1	        JA ??0092 
 15A5  EB 07 90              1	        JMP ??0091 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-95


 15A8                        1	        ??0090: 
 15A8  2B D8                 1	            SUB BX, AX 
 15AA  3B DD                 1	            CMP BX, BP 
 15AC  77 27                 1	            JA ??0092 
 15AE                        1	        ??0091: 
 15AE  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 15B1  03 C1                 1	        ADD AX, CX 
 15B3  8B 1E 0064 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 15B7  03 DA                 1	        ADD BX, DX 
 15B9  3B C3                 1	        CMP AX, BX 
 15BB  7C 09                 1	        JL ??0093 
 15BD  2B C3                 1	        SUB AX,BX 
 15BF  3B C5                 1	        CMP AX, BP 
 15C1  77 12                 1	        JA ??0092 
 15C3  EB 07 90              1	        JMP ??0094 
 15C6                        1	        ??0093: 
 15C6  2B D8                 1	            SUB BX, AX 
 15C8  3B DD                 1	            CMP BX, BP 
 15CA  77 09                 1	            JA ??0092 
 15CC                        1	        ??0094: 
 15CC  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 15D2  EB 07 90              1	        JMP ??0095 
 15D5                        1	    ??0092: 
 15D5  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 15DB                        1	    ??0095: 
 15DB  5D                    1	    POP BP 
 15DC  5A                    1	    POP DX 
 15DD  59                    1	    POP CX 
 15DE  5B                    1	    POP BX 
 15DF  58                    1	    POP AX 
 15E0  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 15E5  75 48			      JNE GHOST2_LIVES2
				       ;POWER-UPS
				      ;( 
 15E7  83 3E 006A R 00		      CMP POWERUP_GHOST2,0
 15EC  74 02			      JZ HP2_LIMIT2
 15EE  75 0F			      JNZ SPEED2_INCREASE2
				      ;)
 15F0				      HP2_LIMIT2:
				      ;(
 15F0  83 3E 001D R 0A		      CMP TANK_HP_2,10
 15F5  74 2C			      JZ T2_KILL_G2
 15F7  83 06 001D R 01		      ADD TANK_HP_2,1
 15FC  EB 25 90			      JMP T2_KILL_G2
				      ;)
				
 15FF				      SPEED2_INCREASE2:
				      ;(
 15FF  83 3E 006A R 01		      CMP POWERUP_GHOST2,1
 1604  74 0B			      JZ SPEED2_LIMIT2
 1606  75 00			      JNZ INCREASE2_DAMAGE2
				      ;)
 1608				      INCREASE2_DAMAGE2:
				      ;(
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-96


				         
 1608  C7 06 0021 R 0002	         MOV TANK_DMG_2,2
 160E  EB 13 90			         JMP T2_KILL_G2
				      ;)
 1611				      SPEED2_LIMIT2:
				      ;(
 1611  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 1616  7D 0B			               JNL T2_KILL_G2
 1618  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 161B  01 06 004D R		               ADD BULLET_2_SPEED,AX
 161F  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1623				      T2_KILL_G2:
				      
 1623  C7 06 0066 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1629  81 2E 0064 R 0258	      SUB STARTPOS_Y_GHOST2, 600
 162F				   GHOST2_LIVES2:   
 162F  5A			   POP DX
 1630  59			   POP CX
 1631  5B			   POP BX
 1632  58			   POP AX
 1633  C3			   RET
				;}   
 1634				CHECK_HIT_BUL2_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost3 
				;----------------------------------------------
				-------------------------------------------
 1634				CHECK_HIT_BUL2_GHOST3 PROC
				;{
 1634  50			   PUSH AX
 1635  53			   PUSH BX
 1636  51			   PUSH CX
 1637  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_2_STATUS
				     
 1638  50                    1	    PUSH AX 
 1639  53                    1	    PUSH BX 
 163A  51                    1	    PUSH CX 
 163B  52                    1	    PUSH DX 
 163C  55                    1	    PUSH BP 
 163D  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 1641  D1 E9                 1	        SHR CX, 1 
 1643  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-97


 1647  D1 EA                 1	        SHR DX, 1 
 1649  BD 0000               1	        MOV BP , 0 
 164C  03 EA                 1	        ADD BP, DX 
 164E  03 E9                 1	        ADD BP, CX 
 1650  83 ED 03              1	        SUB BP ,3 
 1653  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 1656  03 C1                 1	        ADD AX, CX 
 1658  8B 1E 0071 R          1	        MOV BX, STARTPOS_X_GHOST3 
 165C  03 DA                 1	        ADD BX, DX 
 165E  3B C3                 1	        CMP AX,BX 
 1660  7C 09                 1	        JL ??0096 
 1662  2B C3                 1	        SUB AX ,BX 
 1664  3B C5                 1	        CMP AX, BP 
 1666  77 30                 1	        JA ??0098 
 1668  EB 07 90              1	        JMP ??0097 
 166B                        1	        ??0096: 
 166B  2B D8                 1	            SUB BX, AX 
 166D  3B DD                 1	            CMP BX, BP 
 166F  77 27                 1	            JA ??0098 
 1671                        1	        ??0097: 
 1671  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 1674  03 C1                 1	        ADD AX, CX 
 1676  8B 1E 0073 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 167A  03 DA                 1	        ADD BX, DX 
 167C  3B C3                 1	        CMP AX, BX 
 167E  7C 09                 1	        JL ??0099 
 1680  2B C3                 1	        SUB AX,BX 
 1682  3B C5                 1	        CMP AX, BP 
 1684  77 12                 1	        JA ??0098 
 1686  EB 07 90              1	        JMP ??009A 
 1689                        1	        ??0099: 
 1689  2B D8                 1	            SUB BX, AX 
 168B  3B DD                 1	            CMP BX, BP 
 168D  77 09                 1	            JA ??0098 
 168F                        1	        ??009A: 
 168F  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 1695  EB 07 90              1	        JMP ??009B 
 1698                        1	    ??0098: 
 1698  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 169E                        1	    ??009B: 
 169E  5D                    1	    POP BP 
 169F  5A                    1	    POP DX 
 16A0  59                    1	    POP CX 
 16A1  5B                    1	    POP BX 
 16A2  58                    1	    POP AX 
 16A3  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 16A8  75 48			      JNE GHOST3_LIVES2
				      ;POWER-UPS
				      ;( 
 16AA  83 3E 0079 R 00		      CMP POWERUP_GHOST3,0
 16AF  74 02			      JZ HP2_LIMIT3
 16B1  75 0F			      JNZ SPEED2_INCREASE3
				      ;)
 16B3				      HP2_LIMIT3:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-98


				      ;(
 16B3  83 3E 001D R 0A		      CMP TANK_HP_2,10
 16B8  74 2C			      JZ T2_KILL_G3
 16BA  83 06 001D R 01		      ADD TANK_HP_2,1
 16BF  EB 25 90			      JMP T2_KILL_G3
				      ;)
				
 16C2				      SPEED2_INCREASE3:
				      ;(
 16C2  83 3E 0079 R 01		      CMP POWERUP_GHOST3,1
 16C7  74 0B			      JZ SPEED2_LIMIT3
 16C9  75 00			      JNZ INCREASE2_DAMAGE3
				      ;)
 16CB				      INCREASE2_DAMAGE3:
				      ;(
				         
 16CB  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 16D1  EB 13 90			          JMP T2_KILL_G3
				      ;)
 16D4				      SPEED2_LIMIT3:
				      ;(
 16D4  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 16D9  7D 0B			               JNL T2_KILL_G3
 16DB  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 16DE  01 06 004D R		               ADD BULLET_2_SPEED,AX
 16E2  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 16E6				      T2_KILL_G3:
 16E6  C7 06 0075 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 16EC  81 2E 0073 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 16F2				   GHOST3_LIVES2:   
 16F2  5A			   POP DX
 16F3  59			   POP CX
 16F4  5B			   POP BX
 16F5  58			   POP AX
 16F6  C3			   RET
				;}   
 16F7				CHECK_HIT_BUL2_GHOST3 ENDP
				;----------------------------------------------
				-------------------------------------------
				;Detects The collision of The two bullets 
				;----------------------------------------------
				-------------------------------------------
 16F7				BULLETS_HIT PROC
				;{
 16F7  50			   PUSH AX
 16F8  53			   PUSH BX
 16F9  51			   PUSH CX
 16FA  52			   PUSH DX
				      ;DETECT THE COLLISION BETWEEN BOTH BULLET
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-99


				S
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, BULLET_2_POSITION
				_X,BULLET_2_POSITION_Y,BULLETSIZE, BULLET_1_STA
				TUS
 16FB  50                    1	    PUSH AX 
 16FC  53                    1	    PUSH BX 
 16FD  51                    1	    PUSH CX 
 16FE  52                    1	    PUSH DX 
 16FF  55                    1	    PUSH BP 
 1700  8B 0E 0094 R          1	        MOV CX, BULLETSIZE 
 1704  D1 E9                 1	        SHR CX, 1 
 1706  8B 16 0094 R          1	        MOV DX, BULLETSIZE 
 170A  D1 EA                 1	        SHR DX, 1 
 170C  BD 0000               1	        MOV BP , 0 
 170F  03 EA                 1	        ADD BP, DX 
 1711  03 E9                 1	        ADD BP, CX 
 1713  83 ED 03              1	        SUB BP ,3 
 1716  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 1719  03 C1                 1	        ADD AX, CX 
 171B  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 171F  03 DA                 1	        ADD BX, DX 
 1721  3B C3                 1	        CMP AX,BX 
 1723  7C 09                 1	        JL ??009C 
 1725  2B C3                 1	        SUB AX ,BX 
 1727  3B C5                 1	        CMP AX, BP 
 1729  77 30                 1	        JA ??009E 
 172B  EB 07 90              1	        JMP ??009D 
 172E                        1	        ??009C: 
 172E  2B D8                 1	            SUB BX, AX 
 1730  3B DD                 1	            CMP BX, BP 
 1732  77 27                 1	            JA ??009E 
 1734                        1	        ??009D: 
 1734  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1737  03 C1                 1	        ADD AX, CX 
 1739  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
 173D  03 DA                 1	        ADD BX, DX 
 173F  3B C3                 1	        CMP AX, BX 
 1741  7C 09                 1	        JL ??009F 
 1743  2B C3                 1	        SUB AX,BX 
 1745  3B C5                 1	        CMP AX, BP 
 1747  77 12                 1	        JA ??009E 
 1749  EB 07 90              1	        JMP ??00A0 
 174C                        1	        ??009F: 
 174C  2B D8                 1	            SUB BX, AX 
 174E  3B DD                 1	            CMP BX, BP 
 1750  77 09                 1	            JA ??009E 
 1752                        1	        ??00A0: 
 1752  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1758  EB 07 90              1	        JMP ??00A1 
 175B                        1	    ??009E: 
 175B  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 1761                        1	    ??00A1: 
 1761  5D                    1	    POP BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-100


 1762  5A                    1	    POP DX 
 1763  59                    1	    POP CX 
 1764  5B                    1	    POP BX 
 1765  58                    1	    POP AX 
 1766  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 176B  75 06			      JNE NOT_HITTING
				      ;MAKE THE OTHER BULLET DISAPPEAR ALSO
 176D  C7 06 0049 R 0000	      MOV BULLET_2_STATUS, 0
 1773				   NOT_HITTING:
 1773  5A			   POP DX
 1774  59			   POP CX
 1775  5B			   POP BX
 1776  58			   POP AX
 1777  C3			   RET
				;}
 1778				BULLETS_HIT ENDP
				;----------------------------------------------
				-----------------------------------------
				;   _____  _    _   ____    _____  _______     
				       _______         _   _  _  __
				;  / ____|| |  | | / __ \  / ____||__   __|   _
				__    |__   __| /\    | \ | || |/ /
				; | |  __ | |__| || |  | || (___     | |     ( 
				_ )      | |   /  \   |  \| || ' / 
				; | | |_ ||  __  || |  | | \___ \    | |     / 
				_ \/\    | |  / /\ \  | . ` ||  <  
				; | |__| || |  | || |__| | ____) |   | |    | (
				_>  <    | | / ____ \ | |\  || . \ 
				;  \_____||_|  |_| \____/ |_____/    |_|     \_
				__/\/    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				-----------------------------------------
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 1778				CHECK_HIT_GHOST1_TANK1 PROC
 1778  50			   PUSH AX
 1779  53			   PUSH BX
 177A  51			   PUSH CX
 177B  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 177C  50                    1	    PUSH AX 
 177D  53                    1	    PUSH BX 
 177E  51                    1	    PUSH CX 
 177F  52                    1	    PUSH DX 
 1780  55                    1	    PUSH BP 
 1781  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 1785  D1 E9                 1	        SHR CX, 1 
 1787  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-101


 178B  D1 EA                 1	        SHR DX, 1 
 178D  BD 0000               1	        MOV BP , 0 
 1790  03 EA                 1	        ADD BP, DX 
 1792  03 E9                 1	        ADD BP, CX 
 1794  83 ED 03              1	        SUB BP ,3 
 1797  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 179A  03 C1                 1	        ADD AX, CX 
 179C  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 17A0  03 DA                 1	        ADD BX, DX 
 17A2  3B C3                 1	        CMP AX,BX 
 17A4  7C 09                 1	        JL ??00A2 
 17A6  2B C3                 1	        SUB AX ,BX 
 17A8  3B C5                 1	        CMP AX, BP 
 17AA  77 30                 1	        JA ??00A4 
 17AC  EB 07 90              1	        JMP ??00A3 
 17AF                        1	        ??00A2: 
 17AF  2B D8                 1	            SUB BX, AX 
 17B1  3B DD                 1	            CMP BX, BP 
 17B3  77 27                 1	            JA ??00A4 
 17B5                        1	        ??00A3: 
 17B5  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 17B8  03 C1                 1	        ADD AX, CX 
 17BA  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 17BE  03 DA                 1	        ADD BX, DX 
 17C0  3B C3                 1	        CMP AX, BX 
 17C2  7C 09                 1	        JL ??00A5 
 17C4  2B C3                 1	        SUB AX,BX 
 17C6  3B C5                 1	        CMP AX, BP 
 17C8  77 12                 1	        JA ??00A4 
 17CA  EB 07 90              1	        JMP ??00A6 
 17CD                        1	        ??00A5: 
 17CD  2B D8                 1	            SUB BX, AX 
 17CF  3B DD                 1	            CMP BX, BP 
 17D1  77 09                 1	            JA ??00A4 
 17D3                        1	        ??00A6: 
 17D3  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 17D9  EB 07 90              1	        JMP ??00A7 
 17DC                        1	    ??00A4: 
 17DC  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 17E2                        1	    ??00A7: 
 17E2  5D                    1	    POP BP 
 17E3  5A                    1	    POP DX 
 17E4  59                    1	    POP CX 
 17E5  5B                    1	    POP BX 
 17E6  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 17E7  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 17EC  75 1B			         JNE TANK1_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 17EE  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC
 17F4  83 3E 000D R 01		         CMP TANK_HP_1,1                     ;C
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-102


				HECK IF THE TANK LIFE POINTS IS STILL ABOVE 1
 17F9  75 09			         JNZ DECREASE_HP1_G1
 17FB  C7 06 009C R 0001	         MOV WINNER ,1                       ;I
				F IT IS THE LAST LIFE THIS PLAYER WILL LOSE
 1801  E8 1D05 R		         CALL PLAYER_LOST 
 1804				      DECREASE_HP1_G1:
 1804  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 1809				   TANK1_SAFE1:   
 1809  5A			   POP DX
 180A  5B			   POP BX
 180B  59			   POP CX
 180C  5A			   POP DX
 180D  C3			   RET
 180E				CHECK_HIT_GHOST1_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 180E				CHECK_HIT_GHOST2_TANK1 PROC
 180E  50			   PUSH AX
 180F  53			   PUSH BX
 1810  51			   PUSH CX
 1811  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 1812  50                    1	    PUSH AX 
 1813  53                    1	    PUSH BX 
 1814  51                    1	    PUSH CX 
 1815  52                    1	    PUSH DX 
 1816  55                    1	    PUSH BP 
 1817  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 181B  D1 E9                 1	        SHR CX, 1 
 181D  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 1821  D1 EA                 1	        SHR DX, 1 
 1823  BD 0000               1	        MOV BP , 0 
 1826  03 EA                 1	        ADD BP, DX 
 1828  03 E9                 1	        ADD BP, CX 
 182A  83 ED 03              1	        SUB BP ,3 
 182D  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 1830  03 C1                 1	        ADD AX, CX 
 1832  8B 1E 0062 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1836  03 DA                 1	        ADD BX, DX 
 1838  3B C3                 1	        CMP AX,BX 
 183A  7C 09                 1	        JL ??00A8 
 183C  2B C3                 1	        SUB AX ,BX 
 183E  3B C5                 1	        CMP AX, BP 
 1840  77 30                 1	        JA ??00AA 
 1842  EB 07 90              1	        JMP ??00A9 
 1845                        1	        ??00A8: 
 1845  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-103


 1847  3B DD                 1	            CMP BX, BP 
 1849  77 27                 1	            JA ??00AA 
 184B                        1	        ??00A9: 
 184B  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 184E  03 C1                 1	        ADD AX, CX 
 1850  8B 1E 0064 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1854  03 DA                 1	        ADD BX, DX 
 1856  3B C3                 1	        CMP AX, BX 
 1858  7C 09                 1	        JL ??00AB 
 185A  2B C3                 1	        SUB AX,BX 
 185C  3B C5                 1	        CMP AX, BP 
 185E  77 12                 1	        JA ??00AA 
 1860  EB 07 90              1	        JMP ??00AC 
 1863                        1	        ??00AB: 
 1863  2B D8                 1	            SUB BX, AX 
 1865  3B DD                 1	            CMP BX, BP 
 1867  77 09                 1	            JA ??00AA 
 1869                        1	        ??00AC: 
 1869  C7 06 0066 R 0000     1	        MOV EXISTS_GHOST2, 0 
 186F  EB 07 90              1	        JMP ??00AD 
 1872                        1	    ??00AA: 
 1872  C7 06 0066 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1878                        1	    ??00AD: 
 1878  5D                    1	    POP BP 
 1879  5A                    1	    POP DX 
 187A  59                    1	    POP CX 
 187B  5B                    1	    POP BX 
 187C  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 187D  83 3E 0066 R 00		         CMP EXISTS_GHOST2,0
 1882  75 1B			         JNE TANK1_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1884  81 2E 0064 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC
 188A  83 3E 000D R 01		         CMP TANK_HP_1,1
 188F  75 09			         JNZ DECREASE_HP1_G2
 1891  C7 06 009C R 0002	         MOV WINNER,2
 1897  E8 1D05 R		         CALL PLAYER_LOST
				
 189A				      DECREASE_HP1_G2:
 189A  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 189F				   TANK1_SAFE2:   
 189F  5A			   POP DX
 18A0  5B			   POP BX
 18A1  59			   POP CX
 18A2  5A			   POP DX
 18A3  C3			   RET
 18A4				CHECK_HIT_GHOST2_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-104


				;CHECK IF GHOST3 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 18A4				CHECK_HIT_GHOST3_TANK1 PROC
 18A4  50			   PUSH AX
 18A5  53			   PUSH BX
 18A6  51			   PUSH CX
 18A7  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 18A8  50                    1	    PUSH AX 
 18A9  53                    1	    PUSH BX 
 18AA  51                    1	    PUSH CX 
 18AB  52                    1	    PUSH DX 
 18AC  55                    1	    PUSH BP 
 18AD  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 18B1  D1 E9                 1	        SHR CX, 1 
 18B3  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 18B7  D1 EA                 1	        SHR DX, 1 
 18B9  BD 0000               1	        MOV BP , 0 
 18BC  03 EA                 1	        ADD BP, DX 
 18BE  03 E9                 1	        ADD BP, CX 
 18C0  83 ED 03              1	        SUB BP ,3 
 18C3  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 18C6  03 C1                 1	        ADD AX, CX 
 18C8  8B 1E 0071 R          1	        MOV BX, STARTPOS_X_GHOST3 
 18CC  03 DA                 1	        ADD BX, DX 
 18CE  3B C3                 1	        CMP AX,BX 
 18D0  7C 09                 1	        JL ??00AE 
 18D2  2B C3                 1	        SUB AX ,BX 
 18D4  3B C5                 1	        CMP AX, BP 
 18D6  77 30                 1	        JA ??00B0 
 18D8  EB 07 90              1	        JMP ??00AF 
 18DB                        1	        ??00AE: 
 18DB  2B D8                 1	            SUB BX, AX 
 18DD  3B DD                 1	            CMP BX, BP 
 18DF  77 27                 1	            JA ??00B0 
 18E1                        1	        ??00AF: 
 18E1  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 18E4  03 C1                 1	        ADD AX, CX 
 18E6  8B 1E 0073 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 18EA  03 DA                 1	        ADD BX, DX 
 18EC  3B C3                 1	        CMP AX, BX 
 18EE  7C 09                 1	        JL ??00B1 
 18F0  2B C3                 1	        SUB AX,BX 
 18F2  3B C5                 1	        CMP AX, BP 
 18F4  77 12                 1	        JA ??00B0 
 18F6  EB 07 90              1	        JMP ??00B2 
 18F9                        1	        ??00B1: 
 18F9  2B D8                 1	            SUB BX, AX 
 18FB  3B DD                 1	            CMP BX, BP 
 18FD  77 09                 1	            JA ??00B0 
 18FF                        1	        ??00B2: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-105


 18FF  C7 06 0075 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1905  EB 07 90              1	        JMP ??00B3 
 1908                        1	    ??00B0: 
 1908  C7 06 0075 R 0001     1	    MOV EXISTS_GHOST3, 1 
 190E                        1	    ??00B3: 
 190E  5D                    1	    POP BP 
 190F  5A                    1	    POP DX 
 1910  59                    1	    POP CX 
 1911  5B                    1	    POP BX 
 1912  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1913  83 3E 0075 R 00		         CMP EXISTS_GHOST3,0
 1918  75 1B			         JNE TANK1_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 191A  81 2E 0073 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC
 1920  83 3E 000D R 01		         CMP TANK_HP_1,1
 1925  75 09			         JNZ DECREASE_HP1_G3
 1927  C7 06 009C R 0002	         MOV WINNER,2
 192D  E8 1D05 R		         CALL PLAYER_LOST
				        
 1930				      DECREASE_HP1_G3:
 1930  83 2E 000D R 01		         SUB TANK_HP_1,1
				        
				      ;}   
 1935				   TANK1_SAFE3:   
 1935  5A			   POP DX
 1936  5B			   POP BX
 1937  59			   POP CX
 1938  5A			   POP DX
 1939  C3			   RET
 193A				CHECK_HIT_GHOST3_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 193A				CHECK_HIT_GHOST1_TANK2 PROC
 193A  50			   PUSH AX
 193B  53			   PUSH BX
 193C  51			   PUSH CX
 193D  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 193E  50                    1	    PUSH AX 
 193F  53                    1	    PUSH BX 
 1940  51                    1	    PUSH CX 
 1941  52                    1	    PUSH DX 
 1942  55                    1	    PUSH BP 
 1943  8B 0E 008E R          1	        MOV CX, TANKSIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-106


 1947  D1 E9                 1	        SHR CX, 1 
 1949  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 194D  D1 EA                 1	        SHR DX, 1 
 194F  BD 0000               1	        MOV BP , 0 
 1952  03 EA                 1	        ADD BP, DX 
 1954  03 E9                 1	        ADD BP, CX 
 1956  83 ED 03              1	        SUB BP ,3 
 1959  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 195C  03 C1                 1	        ADD AX, CX 
 195E  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 1962  03 DA                 1	        ADD BX, DX 
 1964  3B C3                 1	        CMP AX,BX 
 1966  7C 09                 1	        JL ??00B4 
 1968  2B C3                 1	        SUB AX ,BX 
 196A  3B C5                 1	        CMP AX, BP 
 196C  77 30                 1	        JA ??00B6 
 196E  EB 07 90              1	        JMP ??00B5 
 1971                        1	        ??00B4: 
 1971  2B D8                 1	            SUB BX, AX 
 1973  3B DD                 1	            CMP BX, BP 
 1975  77 27                 1	            JA ??00B6 
 1977                        1	        ??00B5: 
 1977  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 197A  03 C1                 1	        ADD AX, CX 
 197C  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1980  03 DA                 1	        ADD BX, DX 
 1982  3B C3                 1	        CMP AX, BX 
 1984  7C 09                 1	        JL ??00B7 
 1986  2B C3                 1	        SUB AX,BX 
 1988  3B C5                 1	        CMP AX, BP 
 198A  77 12                 1	        JA ??00B6 
 198C  EB 07 90              1	        JMP ??00B8 
 198F                        1	        ??00B7: 
 198F  2B D8                 1	            SUB BX, AX 
 1991  3B DD                 1	            CMP BX, BP 
 1993  77 09                 1	            JA ??00B6 
 1995                        1	        ??00B8: 
 1995  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 199B  EB 07 90              1	        JMP ??00B9 
 199E                        1	    ??00B6: 
 199E  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 19A4                        1	    ??00B9: 
 19A4  5D                    1	    POP BP 
 19A5  5A                    1	    POP DX 
 19A6  59                    1	    POP CX 
 19A7  5B                    1	    POP BX 
 19A8  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 19A9  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 19AE  75 1B			         JNE TANK2_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 19B0  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-107


				IFFERENT PROC
 19B6  83 3E 001D R 01		         CMP TANK_HP_2,1
 19BB  75 09			         JNZ DECREASE_HP2_G1
 19BD  C7 06 009C R 0001	         MOV WINNER,1
 19C3  E8 1D05 R		         CALL PLAYER_LOST
				        
 19C6				      DECREASE_HP2_G1:
 19C6  83 2E 001D R 01		        SUB TANK_HP_2,1
				
				      ;}   
 19CB				   TANK2_SAFE1:   
 19CB  5A			   POP DX
 19CC  5B			   POP BX
 19CD  59			   POP CX
 19CE  5A			   POP DX
 19CF  C3			   RET
 19D0				CHECK_HIT_GHOST1_TANK2 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 19D0				CHECK_HIT_GHOST2_TANK2 PROC
 19D0  50			   PUSH AX
 19D1  53			   PUSH BX
 19D2  51			   PUSH CX
 19D3  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 19D4  50                    1	    PUSH AX 
 19D5  53                    1	    PUSH BX 
 19D6  51                    1	    PUSH CX 
 19D7  52                    1	    PUSH DX 
 19D8  55                    1	    PUSH BP 
 19D9  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 19DD  D1 E9                 1	        SHR CX, 1 
 19DF  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 19E3  D1 EA                 1	        SHR DX, 1 
 19E5  BD 0000               1	        MOV BP , 0 
 19E8  03 EA                 1	        ADD BP, DX 
 19EA  03 E9                 1	        ADD BP, CX 
 19EC  83 ED 03              1	        SUB BP ,3 
 19EF  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 19F2  03 C1                 1	        ADD AX, CX 
 19F4  8B 1E 0062 R          1	        MOV BX, STARTPOS_X_GHOST2 
 19F8  03 DA                 1	        ADD BX, DX 
 19FA  3B C3                 1	        CMP AX,BX 
 19FC  7C 09                 1	        JL ??00BA 
 19FE  2B C3                 1	        SUB AX ,BX 
 1A00  3B C5                 1	        CMP AX, BP 
 1A02  77 30                 1	        JA ??00BC 
 1A04  EB 07 90              1	        JMP ??00BB 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-108


 1A07                        1	        ??00BA: 
 1A07  2B D8                 1	            SUB BX, AX 
 1A09  3B DD                 1	            CMP BX, BP 
 1A0B  77 27                 1	            JA ??00BC 
 1A0D                        1	        ??00BB: 
 1A0D  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1A10  03 C1                 1	        ADD AX, CX 
 1A12  8B 1E 0064 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1A16  03 DA                 1	        ADD BX, DX 
 1A18  3B C3                 1	        CMP AX, BX 
 1A1A  7C 09                 1	        JL ??00BD 
 1A1C  2B C3                 1	        SUB AX,BX 
 1A1E  3B C5                 1	        CMP AX, BP 
 1A20  77 12                 1	        JA ??00BC 
 1A22  EB 07 90              1	        JMP ??00BE 
 1A25                        1	        ??00BD: 
 1A25  2B D8                 1	            SUB BX, AX 
 1A27  3B DD                 1	            CMP BX, BP 
 1A29  77 09                 1	            JA ??00BC 
 1A2B                        1	        ??00BE: 
 1A2B  C7 06 0066 R 0000     1	        MOV EXISTS_GHOST2, 0 
 1A31  EB 07 90              1	        JMP ??00BF 
 1A34                        1	    ??00BC: 
 1A34  C7 06 0066 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1A3A                        1	    ??00BF: 
 1A3A  5D                    1	    POP BP 
 1A3B  5A                    1	    POP DX 
 1A3C  59                    1	    POP CX 
 1A3D  5B                    1	    POP BX 
 1A3E  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1A3F  83 3E 0066 R 00		         CMP EXISTS_GHOST2,0
 1A44  75 1B			         JNE TANK2_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1A46  81 2E 0064 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC
 1A4C  83 3E 001D R 01		           CMP TANK_HP_2,1
 1A51  75 09			           JNZ DECREASE_HP2_G2
 1A53  C7 06 009C R 0001	           MOV WINNER,1
 1A59  E8 1D05 R		           CALL PLAYER_LOST
				         
 1A5C				      DECREASE_HP2_G2:
 1A5C  83 2E 001D R 01		        SUB TANK_HP_2,1
				        
				      ;}   
 1A61				   TANK2_SAFE2:   
 1A61  5A			   POP DX
 1A62  5B			   POP BX
 1A63  59			   POP CX
 1A64  5A			   POP DX
 1A65  C3			   RET
 1A66				CHECK_HIT_GHOST2_TANK2 ENDP
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-109


				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST3 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 1A66				CHECK_HIT_GHOST3_TANK2 PROC
 1A66  50			   PUSH AX
 1A67  53			   PUSH BX
 1A68  51			   PUSH CX
 1A69  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 1A6A  50                    1	    PUSH AX 
 1A6B  53                    1	    PUSH BX 
 1A6C  51                    1	    PUSH CX 
 1A6D  52                    1	    PUSH DX 
 1A6E  55                    1	    PUSH BP 
 1A6F  8B 0E 008E R          1	        MOV CX, TANKSIZE 
 1A73  D1 E9                 1	        SHR CX, 1 
 1A75  8B 16 0092 R          1	        MOV DX, GHOSTSIZE 
 1A79  D1 EA                 1	        SHR DX, 1 
 1A7B  BD 0000               1	        MOV BP , 0 
 1A7E  03 EA                 1	        ADD BP, DX 
 1A80  03 E9                 1	        ADD BP, CX 
 1A82  83 ED 03              1	        SUB BP ,3 
 1A85  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1A88  03 C1                 1	        ADD AX, CX 
 1A8A  8B 1E 0071 R          1	        MOV BX, STARTPOS_X_GHOST3 
 1A8E  03 DA                 1	        ADD BX, DX 
 1A90  3B C3                 1	        CMP AX,BX 
 1A92  7C 09                 1	        JL ??00C0 
 1A94  2B C3                 1	        SUB AX ,BX 
 1A96  3B C5                 1	        CMP AX, BP 
 1A98  77 30                 1	        JA ??00C2 
 1A9A  EB 07 90              1	        JMP ??00C1 
 1A9D                        1	        ??00C0: 
 1A9D  2B D8                 1	            SUB BX, AX 
 1A9F  3B DD                 1	            CMP BX, BP 
 1AA1  77 27                 1	            JA ??00C2 
 1AA3                        1	        ??00C1: 
 1AA3  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1AA6  03 C1                 1	        ADD AX, CX 
 1AA8  8B 1E 0073 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 1AAC  03 DA                 1	        ADD BX, DX 
 1AAE  3B C3                 1	        CMP AX, BX 
 1AB0  7C 09                 1	        JL ??00C3 
 1AB2  2B C3                 1	        SUB AX,BX 
 1AB4  3B C5                 1	        CMP AX, BP 
 1AB6  77 12                 1	        JA ??00C2 
 1AB8  EB 07 90              1	        JMP ??00C4 
 1ABB                        1	        ??00C3: 
 1ABB  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-110


 1ABD  3B DD                 1	            CMP BX, BP 
 1ABF  77 09                 1	            JA ??00C2 
 1AC1                        1	        ??00C4: 
 1AC1  C7 06 0075 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1AC7  EB 07 90              1	        JMP ??00C5 
 1ACA                        1	    ??00C2: 
 1ACA  C7 06 0075 R 0001     1	    MOV EXISTS_GHOST3, 1 
 1AD0                        1	    ??00C5: 
 1AD0  5D                    1	    POP BP 
 1AD1  5A                    1	    POP DX 
 1AD2  59                    1	    POP CX 
 1AD3  5B                    1	    POP BX 
 1AD4  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1AD5  83 3E 0075 R 00		         CMP EXISTS_GHOST3,0
 1ADA  75 1B			         JNE TANK2_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1ADC  81 2E 0073 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC
				      
 1AE2  83 3E 001D R 01		         CMP TANK_HP_2,1
 1AE7  75 09			         JNZ DECREASE_HP2_G3
 1AE9  C7 06 009C R 0001	         MOV WINNER,1
 1AEF  E8 1D05 R		         CALL PLAYER_LOST
				        
 1AF2				      DECREASE_HP2_G3:
 1AF2  83 2E 001D R 01		         SUB TANK_HP_2,1
				         
				      ;}   
 1AF7				   TANK2_SAFE3:   
 1AF7  5A			   POP DX
 1AF8  5B			   POP BX
 1AF9  59			   POP CX
 1AFA  5A			   POP DX
 1AFB  C3			   RET
 1AFC				CHECK_HIT_GHOST3_TANK2 ENDP
				;----------------------------------------------
				-------
				;  _    _  ______            _      _______  _ 
				   _    
				; | |  | ||  ____|    /\    | |    |__   __|| |
				  | | 
				; | |__| || |__      /  \   | |       | |   | |
				__| |  
				; |  __  ||  __|    / /\ \  | |       | |   |  
				__  |  
				; | |  | || |____  / ____ \ | |____   | |   | |
				  | |  
				; |_|  |_||______|/_/    \_\|______|  |_|   |_|
				  |_|  
				;----------------------------------------------
				------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-111


 1AFC				DRAW_HEALTH_BAR_1 PROC
				;{   
 1AFC  50			   PUSH AX
 1AFD  53			   PUSH BX
 1AFE  51			   PUSH CX
 1AFF  52			   PUSH DX
				  
 1B00  8B 0E 000D R		   MOV CX,TANK_HP_1                   
 1B04  C7 06 0025 R 0005	   MOV HEARTS_1_START_POSITION_X,5
				
 1B0A				RED_PLAYER1:                                   
				   ;FOR PLAYER1 DRAW THE RED HEARTS FIRST
				   ;(
 1B0A  BE 0000 E			MOV SI, OFFSET RED_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B0D  51                    1	   PUSH CX 
 1B0E  53                    1	   PUSH BX 
 1B0F  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B11  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B15  8B 2E 0096 R          1	   MOV BP, HEARTSIZE 
 1B19  8A 3C                 1	   MOV BH, [SI] 
 1B1B                        1	   ??00C7:;{ FOR(BP = 50; BD > 0; BP--) 
 1B1B  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B1F  8B 3E 0096 R          1	      MOV DI, HEARTSIZE 
 1B23                        1	      ??00C6:;{ FOR(DX = 50; DX > 0; DX--) 
 1B23  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B24  3A F8                 1	         CMP BH ,AL 
 1B26  74 04                 1	         JE ??00C8 
 1B28  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B2A  CD 10                 1	         INT     10H 
 1B2C                        1	         ??00C8: 
 1B2C  41                    1	         INC     CX         ; NEXT X POSITION 
 1B2D  4F                    1	         DEC     DI 
 1B2E  75 F3                 1	         JNZ     ??00C6 
 1B30  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B31  4D                    1	      DEC     BP 
 1B32  75 E7                 1	      JNZ     ??00C7 
 1B34  5B                    1	      POP BX 
 1B35  59                    1	      POP CX 
 1B36  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20            
				   ;ADD 20 -HEART WIDTH- TO THE X POSITION
 1B3B  E2 CD			   LOOP RED_PLAYER1
				   ;)
				
 1B3D  B9 000A			   MOV CX,10
 1B40  2B 0E 000D R		   SUB CX,TANK_HP_1
 1B44  74 33			   JZ RETURN_HEALTH1                           
				  ;IF HP=10 NO WHITE HEARTS SO RETURN 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-112


					 
 1B46				WHITE_PLAYER1:                                 
				  ;DRAW WHITE HEARTS IF IT EXISTS
				   ;(
 1B46  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B49  51                    1	   PUSH CX 
 1B4A  53                    1	   PUSH BX 
 1B4B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B4D  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B51  8B 2E 0096 R          1	   MOV BP, HEARTSIZE 
 1B55  8A 3C                 1	   MOV BH, [SI] 
 1B57                        1	   ??00CA:;{ FOR(BP = 50; BD > 0; BP--) 
 1B57  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B5B  8B 3E 0096 R          1	      MOV DI, HEARTSIZE 
 1B5F                        1	      ??00C9:;{ FOR(DX = 50; DX > 0; DX--) 
 1B5F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B60  3A F8                 1	         CMP BH ,AL 
 1B62  74 04                 1	         JE ??00CB 
 1B64  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B66  CD 10                 1	         INT     10H 
 1B68                        1	         ??00CB: 
 1B68  41                    1	         INC     CX         ; NEXT X POSITION 
 1B69  4F                    1	         DEC     DI 
 1B6A  75 F3                 1	         JNZ     ??00C9 
 1B6C  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B6D  4D                    1	      DEC     BP 
 1B6E  75 E7                 1	      JNZ     ??00CA 
 1B70  5B                    1	      POP BX 
 1B71  59                    1	      POP CX 
 1B72  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20
 1B77  E2 CD			   LOOP WHITE_PLAYER1
				   ;)
				 
 1B79				 RETURN_HEALTH1:
 1B79  5A			   POP DX
 1B7A  59			   POP CX
 1B7B  5B			   POP BX
 1B7C  58			   POP AX 
 1B7D  C3			   RET
				;}
 1B7E				DRAW_HEALTH_BAR_1 ENDP
				;----------------------------------------------
				-
				;DRAW THE HEALTH BAR FOR PLAYER 2
				;----------------------------------------------
				-
 1B7E				DRAW_HEALTH_BAR_2 PROC
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-113


				;{   
 1B7E  50			   PUSH AX
 1B7F  53			   PUSH BX
 1B80  51			   PUSH CX
 1B81  52			   PUSH DX
				  
 1B82  C7 06 0029 R 01AE	   MOV HEARTS_2_START_POSITION_X,430
 1B88  B9 000A			   MOV CX,10
 1B8B  2B 0E 001D R		    SUB CX,TANK_HP_2
 1B8F  74 33			    JZ DRAW_RED
				
 1B91				WHITE_PLAYER2:                          ;FOR PL
				AYER2 DRAW THE WHITE HEARTS FIRST
				;(
 1B91  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_ST
				ART_POSITION_X, HEARTS_2_START_POSITION_Y
 1B94  51                    1	   PUSH CX 
 1B95  53                    1	   PUSH BX 
 1B96  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B98  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B9C  8B 2E 0096 R          1	   MOV BP, HEARTSIZE 
 1BA0  8A 3C                 1	   MOV BH, [SI] 
 1BA2                        1	   ??00CD:;{ FOR(BP = 50; BD > 0; BP--) 
 1BA2  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BA6  8B 3E 0096 R          1	      MOV DI, HEARTSIZE 
 1BAA                        1	      ??00CC:;{ FOR(DX = 50; DX > 0; DX--) 
 1BAA  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BAB  3A F8                 1	         CMP BH ,AL 
 1BAD  74 04                 1	         JE ??00CE 
 1BAF  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BB1  CD 10                 1	         INT     10H 
 1BB3                        1	         ??00CE: 
 1BB3  41                    1	         INC     CX         ; NEXT X POSITION 
 1BB4  4F                    1	         DEC     DI 
 1BB5  75 F3                 1	         JNZ     ??00CC 
 1BB7  42                    1	      INC     DX         ; NEXT Y POSITION 
 1BB8  4D                    1	      DEC     BP 
 1BB9  75 E7                 1	      JNZ     ??00CD 
 1BBB  5B                    1	      POP BX 
 1BBC  59                    1	      POP CX 
 1BBD  83 06 0029 R 14		   ADD HEARTS_2_START_POSITION_X,20
 1BC2  E2 CD			   LOOP WHITE_PLAYER2 
				 ;)
				
 1BC4				DRAW_RED:
				;(
 1BC4  8B 0E 001D R		   MOV CX,TANK_HP_2
 1BC8				   RED_PLAYER2:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-114


				      ;(
 1BC8  BE 0000 E		      MOV SI, OFFSET RED_HEART
				      DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_STAR
				T_POSITION_X, HEARTS_2_START_POSITION_Y
 1BCB  51                    1	   PUSH CX 
 1BCC  53                    1	   PUSH BX 
 1BCD  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1BCF  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1BD3  8B 2E 0096 R          1	   MOV BP, HEARTSIZE 
 1BD7  8A 3C                 1	   MOV BH, [SI] 
 1BD9                        1	   ??00D0:;{ FOR(BP = 50; BD > 0; BP--) 
 1BD9  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BDD  8B 3E 0096 R          1	      MOV DI, HEARTSIZE 
 1BE1                        1	      ??00CF:;{ FOR(DX = 50; DX > 0; DX--) 
 1BE1  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BE2  3A F8                 1	         CMP BH ,AL 
 1BE4  74 04                 1	         JE ??00D1 
 1BE6  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BE8  CD 10                 1	         INT     10H 
 1BEA                        1	         ??00D1: 
 1BEA  41                    1	         INC     CX         ; NEXT X POSITION 
 1BEB  4F                    1	         DEC     DI 
 1BEC  75 F3                 1	         JNZ     ??00CF 
 1BEE  42                    1	      INC     DX         ; NEXT Y POSITION 
 1BEF  4D                    1	      DEC     BP 
 1BF0  75 E7                 1	      JNZ     ??00D0 
 1BF2  5B                    1	      POP BX 
 1BF3  59                    1	      POP CX 
 1BF4  83 06 0029 R 14		      ADD HEARTS_2_START_POSITION_X,20
 1BF9  49			      DEC CX
 1BFA  75 CC			      JNZ RED_PLAYER2  
				      ;)
 1BFC  74 00			   JZ RETURN_DATA2
				;)
 1BFE				 RETURN_DATA2:
 1BFE  5A			   POP DX
 1BFF  59			   POP CX
 1C00  5B			   POP BX
 1C01  58			   POP AX 
 1C02  C3			   RET
				;}
 1C03				DRAW_HEALTH_BAR_2 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 1 
				;--------------------------------------------
 1C03				DRW_PRUP_BAR_1 PROC
				;{
 1C03  50			   PUSH AX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-115


 1C04  53			   PUSH BX
 1C05  51			   PUSH CX
 1C06  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C07  C7 06 002D R 0005	   MOV PWRUP_BAR_1_START_POSITION_X, 5
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C0D  8B 0E 0043 R		   MOV CX, BULLET_1_SPEED_POWER_NUM
 1C11  83 F9 00			   CMP CX, 0
 1C14  74 36			   JE NO_SPD_PWRUP_1
 1C16  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_1
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1C19				   SPD_PRUP_LOOP_1:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C19  51                    1	   PUSH CX 
 1C1A  53                    1	   PUSH BX 
 1C1B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C1D  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C21  8B 2E 0098 R          1	   MOV BP, PRUP_ICON_SIZE 
 1C25  8A 3C                 1	   MOV BH, [SI] 
 1C27                        1	   ??00D3:;{ FOR(BP = 50; BD > 0; BP--) 
 1C27  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C2B  8B 3E 0098 R          1	      MOV DI, PRUP_ICON_SIZE 
 1C2F                        1	      ??00D2:;{ FOR(DX = 50; DX > 0; DX--) 
 1C2F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C30  3A F8                 1	         CMP BH ,AL 
 1C32  74 04                 1	         JE ??00D4 
 1C34  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C36  CD 10                 1	         INT     10H 
 1C38                        1	         ??00D4: 
 1C38  41                    1	         INC     CX         ; NEXT X POSITION 
 1C39  4F                    1	         DEC     DI 
 1C3A  75 F3                 1	         JNZ     ??00D2 
 1C3C  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C3D  4D                    1	      DEC     BP 
 1C3E  75 E7                 1	      JNZ     ??00D3 
 1C40  5B                    1	      POP BX 
 1C41  59                    1	      POP CX 
 1C42  83 06 002D R 14		      ADD PWRUP_BAR_1_START_POSITION_X, 20
 1C47  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_1
				   ;}
 1C4A  E2 CD			   LOOP SPD_PRUP_LOOP_1
 1C4C				   NO_SPD_PWRUP_1:
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-116


				
				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
 1C4C  83 3E 0011 R 02		   CMP TANK_DMG_1, 2
 1C51  75 2C			   JNE NO_DMG_PWRUP_1
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1C53  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_1
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C56  51                    1	   PUSH CX 
 1C57  53                    1	   PUSH BX 
 1C58  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C5A  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C5E  8B 2E 0098 R          1	   MOV BP, PRUP_ICON_SIZE 
 1C62  8A 3C                 1	   MOV BH, [SI] 
 1C64                        1	   ??00D6:;{ FOR(BP = 50; BD > 0; BP--) 
 1C64  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C68  8B 3E 0098 R          1	      MOV DI, PRUP_ICON_SIZE 
 1C6C                        1	      ??00D5:;{ FOR(DX = 50; DX > 0; DX--) 
 1C6C  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C6D  3A F8                 1	         CMP BH ,AL 
 1C6F  74 04                 1	         JE ??00D7 
 1C71  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C73  CD 10                 1	         INT     10H 
 1C75                        1	         ??00D7: 
 1C75  41                    1	         INC     CX         ; NEXT X POSITION 
 1C76  4F                    1	         DEC     DI 
 1C77  75 F3                 1	         JNZ     ??00D5 
 1C79  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C7A  4D                    1	      DEC     BP 
 1C7B  75 E7                 1	      JNZ     ??00D6 
 1C7D  5B                    1	      POP BX 
 1C7E  59                    1	      POP CX 
				   ;}   
 1C7F				   NO_DMG_PWRUP_1:
 1C7F  5A			   POP DX
 1C80  59			   POP CX
 1C81  5B			   POP BX
 1C82  58			   POP AX
 1C83  C3			   RET
				;}
 1C84				DRW_PRUP_BAR_1 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 2 
				;--------------------------------------------
 1C84				DRW_PRUP_BAR_2 PROC
				;{
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-117


 1C84  50			   PUSH AX
 1C85  53			   PUSH BX
 1C86  51			   PUSH CX
 1C87  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C88  C7 06 0031 R 01AE	   MOV PWRUP_BAR_2_START_POSITION_X, 430
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C8E  8B 0E 004F R		   MOV CX, BULLET_2_SPEED_POWER_NUM
 1C92  83 F9 00			   CMP CX, 0
 1C95  74 36			   JE NO_SPD_PWRUP_2
 1C97  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_2
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1C9A				   SPD_PRUP_LOOP_2:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1C9A  51                    1	   PUSH CX 
 1C9B  53                    1	   PUSH BX 
 1C9C  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C9E  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CA2  8B 2E 0098 R          1	   MOV BP, PRUP_ICON_SIZE 
 1CA6  8A 3C                 1	   MOV BH, [SI] 
 1CA8                        1	   ??00D9:;{ FOR(BP = 50; BD > 0; BP--) 
 1CA8  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CAC  8B 3E 0098 R          1	      MOV DI, PRUP_ICON_SIZE 
 1CB0                        1	      ??00D8:;{ FOR(DX = 50; DX > 0; DX--) 
 1CB0  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CB1  3A F8                 1	         CMP BH ,AL 
 1CB3  74 04                 1	         JE ??00DA 
 1CB5  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1CB7  CD 10                 1	         INT     10H 
 1CB9                        1	         ??00DA: 
 1CB9  41                    1	         INC     CX         ; NEXT X POSITION 
 1CBA  4F                    1	         DEC     DI 
 1CBB  75 F3                 1	         JNZ     ??00D8 
 1CBD  42                    1	      INC     DX         ; NEXT Y POSITION 
 1CBE  4D                    1	      DEC     BP 
 1CBF  75 E7                 1	      JNZ     ??00D9 
 1CC1  5B                    1	      POP BX 
 1CC2  59                    1	      POP CX 
 1CC3  83 06 0031 R 14		      ADD PWRUP_BAR_2_START_POSITION_X, 20
 1CC8  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_2
				   ;}
 1CCB  E2 CD			   LOOP SPD_PRUP_LOOP_2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-118


 1CCD				   NO_SPD_PWRUP_2:
				
				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
 1CCD  83 3E 0021 R 02		   CMP TANK_DMG_2, 2
 1CD2  75 2C			   JNE NO_DMG_PWRUP_2
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1CD4  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_2
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1CD7  51                    1	   PUSH CX 
 1CD8  53                    1	   PUSH BX 
 1CD9  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1CDB  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CDF  8B 2E 0098 R          1	   MOV BP, PRUP_ICON_SIZE 
 1CE3  8A 3C                 1	   MOV BH, [SI] 
 1CE5                        1	   ??00DC:;{ FOR(BP = 50; BD > 0; BP--) 
 1CE5  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CE9  8B 3E 0098 R          1	      MOV DI, PRUP_ICON_SIZE 
 1CED                        1	      ??00DB:;{ FOR(DX = 50; DX > 0; DX--) 
 1CED  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CEE  3A F8                 1	         CMP BH ,AL 
 1CF0  74 04                 1	         JE ??00DD 
 1CF2  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1CF4  CD 10                 1	         INT     10H 
 1CF6                        1	         ??00DD: 
 1CF6  41                    1	         INC     CX         ; NEXT X POSITION 
 1CF7  4F                    1	         DEC     DI 
 1CF8  75 F3                 1	         JNZ     ??00DB 
 1CFA  42                    1	      INC     DX         ; NEXT Y POSITION 
 1CFB  4D                    1	      DEC     BP 
 1CFC  75 E7                 1	      JNZ     ??00DC 
 1CFE  5B                    1	      POP BX 
 1CFF  59                    1	      POP CX 
				   ;}   
 1D00				   NO_DMG_PWRUP_2:
 1D00  5A			   POP DX
 1D01  59			   POP CX
 1D02  5B			   POP BX
 1D03  58			   POP AX
 1D04  C3			   RET
				;}
 1D05				DRW_PRUP_BAR_2 ENDP
				
				;---------------------------
				; LOSSER 
				;---------------------------
 1D05				PLAYER_LOST PROC 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-119


				
 1D05  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 1D08  BB 0100			         MOV    BX, 100H
 1D0B  CD 10			         INT    10H
				YWN 40,40,150,220,04                ;DRAW YOU W
				ON WITH RED COLOR  
 1D0D  50                    1	PUSH AX 
 1D0E  51                    1	PUSH CX 
 1D0F  52                    1	PUSH DX 
 1D10  53                    1	PUSH BX 
 1D11  56                    1	PUSH SI 
 1D12  57                    1	PUSH DI 
 1D13  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1D16  B9 0096               1	    MOV CX,150 ; X = 400 
 1D19  B0 04                 1	    MOV AL,04 
 1D1B  B4 0C                 1	    MOV AH,0CH 
 1D1D                        1	    ??00DE: 
 1D1D                        1	        ??00DF: 
 1D1D  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1D21  77 0D                 1	                JA ??00E0 
 1D23  CD 10                 1	                INT 10H 
 1D25  83 C1 1E              1	                ADD CX, 40 - 10 
 1D28  CD 10                 1	                INT 10H 
 1D2A  83 E9 1E              1	                SUB CX,40 - 10 
 1D2D  EB 0F 90              1	                JMP ??00E1 
 1D30                        1	                ??00E0: 
 1D30  83 C1 14              1	                ADD CX,40 / 2 
 1D33  83 E9 05              1	                SUB CX,5 
 1D36  CD 10                 1	                INT 10H 
 1D38  83 C1 05              1	                ADD CX,5 
 1D3B  83 E9 14              1	                SUB CX,40 / 2 
 1D3E                        1	         ??00E1: 
 1D3E  83 C1 32              1	                ADD CX,40 + 10 
 1D41  CD 10                 1	                INT 10H 
 1D43  83 C1 1E              1	                ADD CX,40 -10 
 1D46  CD 10                 1	                INT 10H 
 1D48  83 C1 14              1	            ADD CX,20 
 1D4B  CD 10                 1	            INT 10H 
 1D4D  83 C1 1E              1	            ADD CX,40 -10 
 1D50  CD 10                 1	            INT 10H 
 1D52  83 C1 1E              1	            ADD CX,30 
 1D55  CD 10                 1	            INT 10H 
 1D57  83 C1 14              1	            ADD CX,40/2 
 1D5A  83 E9 05              1	            SUB CX,5 
 1D5D  CD 10                 1	            INT 10H 
 1D5F  83 E9 14              1	            SUB CX,40/2 
 1D62  83 C1 05              1	            ADD CX,5 
 1D65  83 C1 1E              1	            ADD CX,40 -10 
 1D68  CD 10                 1	            INT 10H 
 1D6A  83 C1 14              1	            ADD CX,20 
 1D6D  CD 10                 1	            INT 10H 
 1D6F  83 C1 1E              1	            ADD CX,40 -10 
 1D72  CD 10                 1	            INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-120


 1D74  83 C1 14              1	                 ADD CX,20 
 1D77  CD 10                 1	                 INT 10H 
 1D79  83 C1 21              1	                 ADD CX,40 - 7 
 1D7C  CD 10                 1	                 INT 10H 
 1D7E  81 E9 0125            1	         SUB CX,6*40 + 53 
 1D82  42                    1	        INC DX 
 1D83  81 FA 0104            1	        CMP DX,220 + 40 
 1D87  75 94                 1	        JNZ ??00DF 
 1D89  BA 00DC               1	    MOV DX,220 
 1D8C  41                    1	    INC CX 
 1D8D  81 F9 00A0            1	    CMP CX,150 + 10 
 1D91  75 8A                 1	    JNZ ??00DE 
 1D93  B9 0096               1	    MOV CX,150 
 1D96  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1D99                        1	    ??00E2: 
 1D99                        1	        ??00E4: 
 1D99  CD 10                 1	            INT 10H 
 1D9B  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1D9E  83 C1 32              1	            ADD CX, 40 + 10 
 1DA1  CD 10                 1	            INT 10H 
 1DA3  83 EA 1E              1	            SUB DX, 40 - 10 
 1DA6  CD 10                 1	            INT 10H 
 1DA8  83 C2 1E              1	            ADD DX,40 -10 
 1DAB  83 C1 32              1	            ADD CX,40 + 10 
 1DAE  CD 10                 1	            INT 10H 
 1DB0  83 C1 3C              1	            ADD CX,40 + 20 
 1DB3  CD 10                 1	            INT 10H 
 1DB5  83 C1 32              1	            ADD CX,40 + 10 
 1DB8  CD 10                 1	            INT 10H 
 1DBA  83 EA 1E              1	            SUB DX,40 -10 
 1DBD  CD 10                 1	            INT 10H 
 1DBF  81 E9 00D2            1	            SUB CX,4*40+50 
 1DC3  83 C2 14              1	            ADD DX,40/2 
 1DC6  41                    1	        INC CX 
 1DC7  81 F9 00BE            1	        CMP CX,150 + 40 
 1DCB  75 CC                 1	        JNZ ??00E4 
 1DCD  B9 0096               1	    MOV CX,150 
 1DD0  42                    1	    INC DX 
 1DD1  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1DD5  75 C2                 1	    JNZ ??00E2 
 1DD7  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1DDA  BA 00DC               1	    MOV DX,220 
 1DDD  BE 00DC               1	    MOV SI,220 
 1DE0                        1	    ??00E3: 
 1DE0                        1	        ??00E5: 
 1DE0  CD 10                 1	            INT 10H 
 1DE2  41                    1	            INC CX 
 1DE3  42                    1	            INC DX 
 1DE4  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1DE8  75 F6                 1	        JNZ ??00E5 
 1DEA  83 C6 01              1	            ADD SI,1 
 1DED  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1DF0  8B D6                 1	            MOV DX,SI 
 1DF2  81 FA 00EA            1	            CMP DX,220 + 14 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-121


 1DF6  75 E8                 1	    JNZ ??00E3 
 1DF8  5F                    1	POP DI 
 1DF9  5E                    1	POP SI 
 1DFA  5B                    1	POP BX 
 1DFB  5A                    1	POP DX 
 1DFC  59                    1	POP CX 
 1DFD  58                    1	POP AX 
 1DFE  83 3E 009C R 01		CMP WINNER,1 
 1E03  75 2D			JNZ PLAYER2_WON
				;(                                  
 1E05  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER1
				   DRAW_OBJECT TANKSIZE ,SI,280,100    ;DRAW TA
				NK 1 IF PLAYER 1 IS THE WINNER
 1E08  51                    1	   PUSH CX 
 1E09  53                    1	   PUSH BX 
 1E0A  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1E0C  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1E0F  8B 2E 008E R          1	   MOV BP, TANKSIZE 
 1E13  8A 3C                 1	   MOV BH, [SI] 
 1E15                        1	   ??00E7:;{ FOR(BP = 50; BD > 0; BP--) 
 1E15  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1E18  8B 3E 008E R          1	      MOV DI, TANKSIZE 
 1E1C                        1	      ??00E6:;{ FOR(DX = 50; DX > 0; DX--) 
 1E1C  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1E1D  3A F8                 1	         CMP BH ,AL 
 1E1F  74 04                 1	         JE ??00E8 
 1E21  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1E23  CD 10                 1	         INT     10H 
 1E25                        1	         ??00E8: 
 1E25  41                    1	         INC     CX         ; NEXT X POSITION 
 1E26  4F                    1	         DEC     DI 
 1E27  75 F3                 1	         JNZ     ??00E6 
 1E29  42                    1	      INC     DX         ; NEXT Y POSITION 
 1E2A  4D                    1	      DEC     BP 
 1E2B  75 E8                 1	      JNZ     ??00E7 
 1E2D  5B                    1	      POP BX 
 1E2E  59                    1	      POP CX 
 1E2F  E9 1F4D R		   JMP PRESS_TO_MENU
				;)
 1E32				PLAYER2_WON:
				;(
				   YWN 40,40,150,220,01              ;DRAW YOU 
				WON WITH BLUE COLOR -OVEERWRITE THE RED ONE- 
 1E32  50                    1	PUSH AX 
 1E33  51                    1	PUSH CX 
 1E34  52                    1	PUSH DX 
 1E35  53                    1	PUSH BX 
 1E36  56                    1	PUSH SI 
 1E37  57                    1	PUSH DI 
 1E38  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1E3B  B9 0096               1	    MOV CX,150 ; X = 400 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-122


 1E3E  B0 01                 1	    MOV AL,01 
 1E40  B4 0C                 1	    MOV AH,0CH 
 1E42                        1	    ??00E9: 
 1E42                        1	        ??00EA: 
 1E42  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1E46  77 0D                 1	                JA ??00EB 
 1E48  CD 10                 1	                INT 10H 
 1E4A  83 C1 1E              1	                ADD CX, 40 - 10 
 1E4D  CD 10                 1	                INT 10H 
 1E4F  83 E9 1E              1	                SUB CX,40 - 10 
 1E52  EB 0F 90              1	                JMP ??00EC 
 1E55                        1	                ??00EB: 
 1E55  83 C1 14              1	                ADD CX,40 / 2 
 1E58  83 E9 05              1	                SUB CX,5 
 1E5B  CD 10                 1	                INT 10H 
 1E5D  83 C1 05              1	                ADD CX,5 
 1E60  83 E9 14              1	                SUB CX,40 / 2 
 1E63                        1	         ??00EC: 
 1E63  83 C1 32              1	                ADD CX,40 + 10 
 1E66  CD 10                 1	                INT 10H 
 1E68  83 C1 1E              1	                ADD CX,40 -10 
 1E6B  CD 10                 1	                INT 10H 
 1E6D  83 C1 14              1	            ADD CX,20 
 1E70  CD 10                 1	            INT 10H 
 1E72  83 C1 1E              1	            ADD CX,40 -10 
 1E75  CD 10                 1	            INT 10H 
 1E77  83 C1 1E              1	            ADD CX,30 
 1E7A  CD 10                 1	            INT 10H 
 1E7C  83 C1 14              1	            ADD CX,40/2 
 1E7F  83 E9 05              1	            SUB CX,5 
 1E82  CD 10                 1	            INT 10H 
 1E84  83 E9 14              1	            SUB CX,40/2 
 1E87  83 C1 05              1	            ADD CX,5 
 1E8A  83 C1 1E              1	            ADD CX,40 -10 
 1E8D  CD 10                 1	            INT 10H 
 1E8F  83 C1 14              1	            ADD CX,20 
 1E92  CD 10                 1	            INT 10H 
 1E94  83 C1 1E              1	            ADD CX,40 -10 
 1E97  CD 10                 1	            INT 10H 
 1E99  83 C1 14              1	                 ADD CX,20 
 1E9C  CD 10                 1	                 INT 10H 
 1E9E  83 C1 21              1	                 ADD CX,40 - 7 
 1EA1  CD 10                 1	                 INT 10H 
 1EA3  81 E9 0125            1	         SUB CX,6*40 + 53 
 1EA7  42                    1	        INC DX 
 1EA8  81 FA 0104            1	        CMP DX,220 + 40 
 1EAC  75 94                 1	        JNZ ??00EA 
 1EAE  BA 00DC               1	    MOV DX,220 
 1EB1  41                    1	    INC CX 
 1EB2  81 F9 00A0            1	    CMP CX,150 + 10 
 1EB6  75 8A                 1	    JNZ ??00E9 
 1EB8  B9 0096               1	    MOV CX,150 
 1EBB  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1EBE                        1	    ??00ED: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-123


 1EBE                        1	        ??00EF: 
 1EBE  CD 10                 1	            INT 10H 
 1EC0  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1EC3  83 C1 32              1	            ADD CX, 40 + 10 
 1EC6  CD 10                 1	            INT 10H 
 1EC8  83 EA 1E              1	            SUB DX, 40 - 10 
 1ECB  CD 10                 1	            INT 10H 
 1ECD  83 C2 1E              1	            ADD DX,40 -10 
 1ED0  83 C1 32              1	            ADD CX,40 + 10 
 1ED3  CD 10                 1	            INT 10H 
 1ED5  83 C1 3C              1	            ADD CX,40 + 20 
 1ED8  CD 10                 1	            INT 10H 
 1EDA  83 C1 32              1	            ADD CX,40 + 10 
 1EDD  CD 10                 1	            INT 10H 
 1EDF  83 EA 1E              1	            SUB DX,40 -10 
 1EE2  CD 10                 1	            INT 10H 
 1EE4  81 E9 00D2            1	            SUB CX,4*40+50 
 1EE8  83 C2 14              1	            ADD DX,40/2 
 1EEB  41                    1	        INC CX 
 1EEC  81 F9 00BE            1	        CMP CX,150 + 40 
 1EF0  75 CC                 1	        JNZ ??00EF 
 1EF2  B9 0096               1	    MOV CX,150 
 1EF5  42                    1	    INC DX 
 1EF6  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1EFA  75 C2                 1	    JNZ ??00ED 
 1EFC  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1EFF  BA 00DC               1	    MOV DX,220 
 1F02  BE 00DC               1	    MOV SI,220 
 1F05                        1	    ??00EE: 
 1F05                        1	        ??00F0: 
 1F05  CD 10                 1	            INT 10H 
 1F07  41                    1	            INC CX 
 1F08  42                    1	            INC DX 
 1F09  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1F0D  75 F6                 1	        JNZ ??00F0 
 1F0F  83 C6 01              1	            ADD SI,1 
 1F12  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1F15  8B D6                 1	            MOV DX,SI 
 1F17  81 FA 00EA            1	            CMP DX,220 + 14 
 1F1B  75 E8                 1	    JNZ ??00EE 
 1F1D  5F                    1	POP DI 
 1F1E  5E                    1	POP SI 
 1F1F  5B                    1	POP BX 
 1F20  5A                    1	POP DX 
 1F21  59                    1	POP CX 
 1F22  58                    1	POP AX 
 1F23  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER2
				   DRAW_OBJECT TANKSIZE ,SI,280,100 
 1F26  51                    1	   PUSH CX 
 1F27  53                    1	   PUSH BX 
 1F28  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1F2A  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1F2D  8B 2E 008E R          1	   MOV BP, TANKSIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-124


 1F31  8A 3C                 1	   MOV BH, [SI] 
 1F33                        1	   ??00F2:;{ FOR(BP = 50; BD > 0; BP--) 
 1F33  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1F36  8B 3E 008E R          1	      MOV DI, TANKSIZE 
 1F3A                        1	      ??00F1:;{ FOR(DX = 50; DX > 0; DX--) 
 1F3A  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1F3B  3A F8                 1	         CMP BH ,AL 
 1F3D  74 04                 1	         JE ??00F3 
 1F3F  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1F41  CD 10                 1	         INT     10H 
 1F43                        1	         ??00F3: 
 1F43  41                    1	         INC     CX         ; NEXT X POSITION 
 1F44  4F                    1	         DEC     DI 
 1F45  75 F3                 1	         JNZ     ??00F1 
 1F47  42                    1	      INC     DX         ; NEXT Y POSITION 
 1F48  4D                    1	      DEC     BP 
 1F49  75 E8                 1	      JNZ     ??00F2 
 1F4B  5B                    1	      POP BX 
 1F4C  59                    1	      POP CX 
				;)
				 
 1F4D				PRESS_TO_MENU:
 1F4D  B4 00			      MOV AH,0                        ;GET KEY 
				PRESSED FOR ENDING THE GAME
 1F4F  CD 16					INT 16H
				     
 1F51  B4 4C			      MOV    AH,4CH
 1F53  CD 21			      INT    21H
 1F55				PLAYER_LOST ENDP
				;----------------------------------------------
				----------------------------------------
				;   _____  _   _  _______  ______  _____    ___
				___             _____  ______
				;  |_   _|| \ | ||__    __||  ____||  __ \  |  
				____|   /\      / ____||  ____|
				;    | |  |  \| |   | |   | |__   | |__) | | |_
				_     /  \    | |     | |__ 
				;    | |  | . ` |   | |   |  __|  |  _  /  |  _
				_|   / /\ \   | |     |  __|
				;   _| |_ | |\  |   | |   | |____ | | \ \  | | 
				    / ____ \  | |____ | |____ 
				;  |_____||_| \_|   |_|   |______||_|  \_\ |_| 
				   /_/    \_\  \_____||______|
				;----------------------------------------------
				--------------------------------------
 1F55				  MAIN_MENU PROC
				   ;{ OPEN VIDEO MODE
 1F55  B8 4F02			         MOV    AX, 4F02H 
 1F58  BB 0105			         MOV    BX, 105H      
 1F5B  CD 10			         INT    10H   
				   ;}
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-125


				   
				   ;{DRAWWING THE INTERFACE
				         MENU
 1F5D  B8 4F02               1	                        MOV     AX, 4F02H 
 1F60  BB 0105               1	                        MOV     BX, 105H 
 1F63  CD 10                 1	                        INT     10H 
 1F65  B7 00                 1	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE 
 1F67  BA 0000               1	                    MOV     DX, 0     ; Y TO ST
				ART 
 1F6A  B9 0000               1	                    MOV     CX, 0 
 1F6D  B0 07                 1	                    MOV     AL, 7 
 1F6F  B4 0C                 1	                    MOV     AH, 0CH 
 1F71                        1	                           ??00F4: 
 1F71                        1	                                          ??00F
				5: 
 1F71  CD 10                 1	                                               
				             INT     10H 
 1F73  41                    1	                                               
				             INC     CX 
 1F74  81 F9 0400            1	                                               
				             CMP     CX, 1024 
 1F78  75 F7                 1	                                               
				             JNZ     ??00F5 
 1F7A  B9 0000               1	                                    MOV     CX,
				0 
 1F7D  42                    1	                                    INC     DX 
				        ; NEXT Y 
 1F7E  81 FA 030C            1	                                    CMP     DX,
				 780 
 1F82  75 ED                 1	                                    JNZ     ??0
				0F4 
 1F84  B8 0600               1	                    MOV     AX, 0600H 
 1F87  B7 00                 1	                    MOV     BH, 0 
 1F89  B9 0000               1	                    MOV     CX, 0 
 1F8C  BA 184F               1	                    MOV     DX, 184FH 
 1F8F  CD 10                 1	                    INT     10H 
 1F91  B4 02                 1	                    MOV     AH, 2 
 1F93  BA 1B34               1	                    MOV     DX, 1B34H 
 1F96  CD 10                 1	                    INT     10H 
 1F98  8D 36 00A2 R          1	                LEA     SI, MENUITEM1 
 1F9C                        1	                ??00F6: 
 1F9C  B4 09                 1	                        MOV     AH, 9 
 1F9E  B7 00                 1	                        MOV     BH, 0 
 1FA0  8A 04                 1	                        MOV     AL, [SI] 
 1FA2  B9 0001               1	                        MOV     CX, 1 
 1FA5  B3 16                 1	                        MOV     BL, 016H 
 1FA7  CD 10                 1	                        INT     10H 
 1FA9  FE C2                 1	                        INC     DL 
 1FAB  B4 02                 1	                        MOV     AH, 2 
 1FAD  CD 10                 1	                        INT     10H 
 1FAF  46                    1	                        INC     SI 
 1FB0  8A 04                 1	                        MOV     AL, [SI] 
 1FB2  3C 24                 1	                        CMP     AL, '$' 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-126


 1FB4  75 E6                 1	                        JNZ     ??00F6 
 1FB6  B4 02                 1	                        MOV     AH, 2 
 1FB8  BA 1D34               1	                        MOV     DX, 1D34H 
 1FBB  CD 10                 1	                        INT     10H 
 1FBD  8D 36 00BD R          1	                    LEA     SI, MENUITEM2 
 1FC1                        1	                    ??00F7: 
 1FC1  B4 09                 1	                        MOV     AH, 9 
 1FC3  B7 00                 1	                        MOV     BH, 0 
 1FC5  8A 04                 1	                        MOV     AL, [SI] 
 1FC7  B9 0001               1	                        MOV     CX, 1 
 1FCA  B3 16                 1	                        MOV     BL, 016H 
 1FCC  CD 10                 1	                        INT     10H 
 1FCE  FE C2                 1	                        INC     DL 
 1FD0  B4 02                 1	                        MOV     AH, 2 
 1FD2  CD 10                 1	                        INT     10H 
 1FD4  46                    1	                        INC     SI 
 1FD5  8A 04                 1	                        MOV     AL, [SI] 
 1FD7  3C 24                 1	                        CMP     AL, '$' 
 1FD9  75 E6                 1	                        JNZ     ??00F7 
 1FDB  B4 02                 1	                        MOV     AH, 2 
 1FDD  BA 1933               1	                        MOV     DX, 1933H 
 1FE0  CD 10                 1	                        INT     10H 
 1FE2  8D 36 00D8 R          1	                    LEA     SI, MENUITEM3 
 1FE6                        1	                    ??00F8: 
 1FE6  B4 09                 1	                        MOV     AH, 9 
 1FE8  B7 00                 1	                        MOV     BH, 0 
 1FEA  8A 04                 1	                        MOV     AL, [SI] 
 1FEC  B9 0001               1	                        MOV     CX, 1 
 1FEF  B3 16                 1	                        MOV     BL, 016H 
 1FF1  CD 10                 1	                        INT     10H 
 1FF3  FE C2                 1	                        INC     DL 
 1FF5  B4 02                 1	                        MOV     AH, 2 
 1FF7  CD 10                 1	                        INT     10H 
 1FF9  46                    1	                        INC     SI 
 1FFA  8A 04                 1	                        MOV     AL, [SI] 
 1FFC  3C 24                 1	                        CMP     AL, '$' 
 1FFE  75 E6                 1	                        JNZ     ??00F8 
				         GHOSTWORD
 2000  BA 00FA               1	    MOV DX,250 ; Y = 250 
 2003  B9 0190               1	    MOV CX,400 ; X = 400 
 2006  B0 04                 1	    MOV AL,04 
 2008  B4 0C                 1	    MOV AH,0CH 
 200A                        1	    ??00F9: 
 200A                        1	        ??00FA: 
 200A  CD 10                 1	         INT 10H 
 200C  83 C1 1E              1	         ADD CX,30 
 200F  81 FA 010E            1	                CMP DX,270 
 2013  77 05                 1	                JA ??00FF 
 2015  CD 10                 1	                INT 10H 
 2017  EB 09 90              1	                JMP ??00FB 
 201A  81 FA 0122            1	                ??00FF: CMP DX,290 
 201E  72 02                 1	                JB ??00FB 
 2020  CD 10                 1	                INT 10H 
 2022                        1	        ??00FB: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-127


 2022  83 C1 14              1	            ADD CX,20 
 2025  CD 10                 1	            INT 10H 
 2027  83 C1 1E              1	            ADD CX,30 
 202A  CD 10                 1	            INT 10H 
 202C  83 C1 14              1	            ADD CX,20 
 202F  CD 10                 1	            INT 10H 
 2031  83 C1 1E              1	            ADD CX,30 
 2034  CD 10                 1	            INT 10H 
 2036  83 C1 14              1	         ADD CX,20 
 2039  81 FA 0113            1	                CMP DX,275 
 203D  77 05                 1	                JA ??0100 
 203F  CD 10                 1	                INT 10H 
 2041  EB 09 90              1	                JMP ??00FC 
 2044                        1	                ??0100: 
 2044  83 C1 1E              1	                ADD CX,30 
 2047  CD 10                 1	                INT 10H 
 2049  83 E9 1E              1	                SUB CX,30 
 204C                        1	         ??00FC: 
 204C  83 C1 41              1	                ADD CX,65 
 204F  CD 10                 1	                INT 10H 
 2051  81 E9 00D7            1	        SUB CX,215 
 2055  42                    1	        INC DX 
 2056  81 FA 0136            1	        CMP DX,310 
 205A  75 AE                 1	        JNZ ??00FA 
 205C  BA 00FA               1	    MOV DX,250 
 205F  41                    1	    INC CX 
 2060  81 F9 019A            1	    CMP CX,410 
 2064  75 A4                 1	    JNZ ??00F9 
 2066  B9 01A4               1	        MOV CX,420 
 2069  BA 0118               1	        MOV DX,280 
 206C                        1	        ??0102: 
 206C                        1	            ??0101: 
 206C  CD 10                 1	                INT 10H 
 206E  41                    1	                INC CX 
 206F  81 F9 01B8            1	                CMP CX,440 
 2073  75 F7                 1	            JNZ ??0101 
 2075  B9 01A4               1	        MOV CX,420 
 2078  42                    1	        INC DX 
 2079  81 FA 0122            1	        CMP DX,290 
 207D  75 ED                 1	        JNZ ??0102 
 207F  B9 0190               1	    MOV CX,400 
 2082  BA 00FA               1	    MOV DX,250 
 2085                        1	    ??00FD: 
 2085                        1	        ??00FE: 
 2085  CD 10                 1	            INT 10H 
 2087  83 C2 32              1	            ADD DX,50 
 208A  CD 10                 1	            INT 10H 
 208C  83 EA 32              1	            SUB DX,50 
 208F  83 C1 32              1	            ADD CX,50 
 2092  83 C2 19              1	            ADD DX,25 
 2095  CD 10                 1	            INT 10H 
 2097  83 EA 19              1	            SUB DX,25 
 209A  83 E9 32              1	            SUB CX,50 
 209D  83 C1 64              1	            ADD CX,100 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-128


 20A0  CD 10                 1	            INT 10H 
 20A2  83 C2 32              1	            ADD DX,50 
 20A5  CD 10                 1	            INT 10H 
 20A7  83 EA 32              1	            SUB DX,50 
 20AA  83 C1 32              1	            ADD CX,50 
 20AD  CD 10                 1	            INT 10H 
 20AF  83 C2 19              1	            ADD DX,25 
 20B2  CD 10                 1	            INT 10H 
 20B4  83 EA 19              1	            SUB DX,25 
 20B7  83 C2 32              1	            ADD DX,50 
 20BA  CD 10                 1	            INT 10H 
 20BC  83 EA 32              1	            SUB DX,50 
 20BF  83 C1 32              1	            ADD CX,50 
 20C2  CD 10                 1	            INT 10H 
 20C4  81 E9 00C8            1	        SUB CX,200 
 20C8  41                    1	        INC CX 
 20C9  81 F9 01B8            1	        CMP CX,440 
 20CD  75 B6                 1	        JNZ ??00FE 
 20CF  B9 0190               1	    MOV CX,400 
 20D2  42                    1	    INC DX 
 20D3  81 FA 0104            1	    CMP DX,260 
 20D7  75 AC                 1	    JNZ ??00FD 
				         BUSTERWORD
 20D9  BA 0140               1	    MOV DX,320 ; Y = 320 
 20DC  B9 017C               1	    MOV CX,380 ; X = 380 
 20DF  B0 01                 1	    MOV AL,01 
 20E1  B4 0C                 1	    MOV AH,0CH 
 20E3                        1	    ??0103: 
 20E3                        1	        ??0104: 
 20E3  CD 10                 1	         INT 10H 
 20E5  83 C1 1E              1	         ADD CX,30 
 20E8  81 FA 0159            1	                CMP DX,345 
 20EC  77 05                 1	                JA ??0109 
 20EE  CD 10                 1	                INT 10H 
 20F0  EB 09 90              1	                JMP ??0105 
 20F3  81 FA 0163            1	                ??0109: CMP DX,355 
 20F7  72 02                 1	                JB ??0105 
 20F9  CD 10                 1	                INT 10H 
 20FB                        1	        ??0105: 
 20FB  83 C1 14              1	            ADD CX,20 
 20FE  CD 10                 1	            INT 10H 
 2100  83 C1 1E              1	            ADD CX,30 
 2103  CD 10                 1	            INT 10H 
 2105  83 C1 14              1	         ADD CX,20 
 2108  81 FA 0159            1	                CMP DX,345 
 210C  77 05                 1	                JA ??010A 
 210E  CD 10                 1	                INT 10H 
 2110  EB 09 90              1	                JMP ??0106 
 2113                        1	                ??010A: 
 2113  83 C1 1E              1	                ADD CX,30 
 2116  CD 10                 1	                INT 10H 
 2118  83 E9 1E              1	                SUB CX,30 
 211B                        1	         ??0106: 
 211B  83 C1 41              1	                ADD CX,65 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-129


 211E  CD 10                 1	                INT 10H 
 2120  83 C1 23              1	            ADD CX,35 
 2123  CD 10                 1	            INT 10H 
 2125  83 C1 32              1	            ADD CX,50 
 2128  CD 10                 1	            INT 10H 
 212A  83 C1 1E              1	            ADD CX,30 
 212D  81 FA 0159            1	                    CMP DX,345 
 2131  77 05                 1	                    JA ??010C 
 2133  CD 10                 1	                    INT 10H 
 2135  EB 09 90              1	                    JMP ??010B 
 2138  81 FA 0163            1	                    ??010C: CMP DX,355 
 213C  72 02                 1	                    JB ??010B 
 213E  CD 10                 1	                    INT 10H 
 2140                        1	        ??010B: 
 2140  81 E9 0118            1	        SUB CX,280 
 2144  42                    1	        INC DX 
 2145  81 FA 017C            1	        CMP DX,380 
 2149  75 98                 1	        JNZ ??0104 
 214B  BA 0140               1	    MOV DX,320 
 214E  41                    1	    INC CX 
 214F  81 F9 0186            1	    CMP CX,390 
 2153  75 8E                 1	    JNZ ??0103 
 2155  BA 0140               1	    MOV DX,320 
 2158  B9 017C               1	    MOV CX,380 
 215B                        1	    ??0107: 
 215B                        1	        ??0108: 
 215B  CD 10                 1	            INT 10H 
 215D  83 C2 14              1	            ADD DX,20 
 2160  81 F9 019F            1	                CMP CX,415 
 2164  77 05                 1	                JA ??010F 
 2166  CD 10                 1	                INT 10H 
 2168  EB 11 90              1	                JMP ??0110 
 216B  81 FA 0159            1	                ??010F: CMP DX,345 
 216F  77 02                 1	                JA ??010E 
 2171  CD 10                 1	                INT 10H 
 2173  81 FA 0163            1	                ??010E: CMP DX,355 
 2177  72 02                 1	                JB ??0110 
 2179  CD 10                 1	                INT 10H 
 217B  83 C2 0A              1	                ??0110: ADD DX,10 
 217E  81 F9 019F            1	                CMP CX,415 
 2182  77 05                 1	                JA ??010D 
 2184  CD 10                 1	                INT 10H 
 2186  EB 11 90              1	                JMP ??0112 
 2189  81 FA 0159            1	                ??010D: CMP DX,345 
 218D  77 02                 1	                JA ??0111 
 218F  CD 10                 1	                INT 10H 
 2191  81 FA 0163            1	                ??0111: CMP DX,355 
 2195  72 02                 1	                JB ??0112 
 2197  CD 10                 1	                INT 10H 
 2199                        1	                ??0112: 
 2199  83 C2 14              1	                ADD DX,20 
 219C  CD 10                 1	                INT 10H 
 219E  83 EA 32              1	        SUB DX,50 
 21A1  83 C1 32              1	            ADD CX,50 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-130


 21A4  83 C2 32              1	            ADD DX,50 
 21A7  CD 10                 1	            INT 10H 
 21A9  83 E9 32              1	            SUB CX,50 
 21AC  83 EA 32              1	            SUB DX,50 
 21AF  83 C1 64              1	            ADD CX,100 
 21B2  CD 10                 1	            INT 10H 
 21B4  83 C2 19              1	            ADD DX,25 
 21B7  CD 10                 1	            INT 10H 
 21B9  83 EA 19              1	            SUB DX,25 
 21BC  83 C2 32              1	            ADD DX,50 
 21BF  CD 10                 1	            INT 10H 
 21C1  83 EA 32              1	            SUB DX,50 
 21C4  83 E9 64              1	            SUB CX,100 
 21C7  41                    1	    INC CX 
 21C8  81 F9 01A4            1	    CMP CX,420 
 21CC  75 8D                 1	    JNZ ??0108 
 21CE  B9 017C               1	    MOV CX,380 
 21D1  42                    1	    INC DX 
 21D2  81 FA 014A            1	    CMP DX,330 
 21D6  75 83                 1	    JNZ ??0107 
 21D8  BA 0140               1	    MOV DX,320 
 21DB  B9 0212               1	    MOV CX,530 
 21DE                        1	    ??0113: 
 21DE                        1	        ??0114: 
 21DE  CD 10                 1	        INT 10H 
 21E0  83 C1 32              1	            ADD CX,50 
 21E3  CD 10                 1	            INT 10H 
 21E5  83 C2 19              1	            ADD DX,25 
 21E8  CD 10                 1	            INT 10H 
 21EA  83 C2 19              1	            ADD DX,25 
 21ED  CD 10                 1	            INT 10H 
 21EF  83 E9 32              1	            SUB CX,50 
 21F2  83 EA 32              1	            SUB DX,50 
 21F5  83 C1 64              1	            ADD CX,100 
 21F8  CD 10                 1	            INT 10H 
 21FA  83 C2 14              1	            ADD DX,20 
 21FD  81 F9 0299            1	                CMP CX,665 
 2201  77 05                 1	                JA ??0115 
 2203  CD 10                 1	                INT 10H 
 2205  EB 11 90              1	                JMP ??0117 
 2208  81 FA 0159            1	                ??0115: CMP DX,345 
 220C  77 0A                 1	                JA ??0117 
 220E  CD 10                 1	                INT 10H 
 2210  81 FA 0163            1	                ??0116: CMP DX,355 
 2214  72 02                 1	                JB ??0117 
 2216  CD 10                 1	                INT 10H 
 2218  83 C2 0A              1	                ??0117: ADD DX,10 
 221B  81 F9 0299            1	                CMP CX,665 
 221F  77 05                 1	                JA ??0119 
 2221  CD 10                 1	                INT 10H 
 2223  EB 11 90              1	                JMP ??0118 
 2226  81 FA 0159            1	                ??0119: CMP DX,345 
 222A  77 02                 1	                JA ??011A 
 222C  CD 10                 1	                INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-131


 222E  81 FA 0163            1	                ??011A: CMP DX,355 
 2232  72 02                 1	                JB ??0118 
 2234  CD 10                 1	                INT 10H 
 2236                        1	                ??0118: 
 2236  83 EA 1E              1	        SUB DX,30 
 2239  83 E9 64              1	        SUB CX,100 
 223C  41                    1	        INC CX 
 223D  81 F9 023A            1	        CMP CX,570 
 2241  75 9B                 1	        JNZ ??0114 
 2243  B9 0212               1	    MOV CX,530 
 2246  42                    1	    INC DX 
 2247  81 FA 014A            1	    CMP DX,330 
 224B  75 91                 1	    JNZ ??0113 
				   ;}
				
				   ;{DRAWING THE LOGO
 224D  BE 0000 E		         MOV SI , OFFSET LOGO
				         DRAW_OBJECT LOGOSIZE, SI, LOGO_X, LOGO
				_Y
 2250  51                    1	   PUSH CX 
 2251  53                    1	   PUSH BX 
 2252  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 2254  8B 16 00A0 R          1	   MOV     DX, LOGO_Y     ; Y TO START DRAWING 
				AT 
 2258  8B 2E 009A R          1	   MOV BP, LOGOSIZE 
 225C  8A 3C                 1	   MOV BH, [SI] 
 225E                        1	   ??011C:;{ FOR(BP = 50; BD > 0; BP--) 
 225E  8B 0E 009E R          1	      MOV     CX, LOGO_X    ; X TO START 
 2262  8B 3E 009A R          1	      MOV DI, LOGOSIZE 
 2266                        1	      ??011B:;{ FOR(DX = 50; DX > 0; DX--) 
 2266  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 2267  3A F8                 1	         CMP BH ,AL 
 2269  74 04                 1	         JE ??011D 
 226B  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 226D  CD 10                 1	         INT     10H 
 226F                        1	         ??011D: 
 226F  41                    1	         INC     CX         ; NEXT X POSITION 
 2270  4F                    1	         DEC     DI 
 2271  75 F3                 1	         JNZ     ??011B 
 2273  42                    1	      INC     DX         ; NEXT Y POSITION 
 2274  4D                    1	      DEC     BP 
 2275  75 E7                 1	      JNZ     ??011C 
 2277  5B                    1	      POP BX 
 2278  59                    1	      POP CX 
				   ;}
				
 2279				   MENUEE:
				   ;{ IF(USER PRESS ANY KEY)
 2279  B4 01			         MOV    AH, 1
 227B  CD 16			         INT    16H
 227D  75 FA			         JNZ    MENUEE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Page     1-132


				   ;}
				
				   ;{TAKE INPUT AND CLEAR KEYBOARD BUFFER
 227F  B4 00			         MOV     AH, 0
 2281  CD 16			         INT     16H 
 2283  E8 0300 R		         CALL    CLEARKEYBOARDBUFFER  
				   ;}
				   
				   ;{ IF(USER PRESS ECS)
 2286  3C 1B			         CMP     AL,1BH
 2288  75 0C			         JNZ     F1LABEL
				            ;{ THIS TO HANDLE FLICKERING
 228A  B8 4F02			                  MOV    AX, 4F02H 
 228D  BB 0100			                  MOV    BX, 100H
 2290  CD 10			                  INT    10H
				            ;}
 2292  B4 4C			         MOV    AH,4CH
 2294  CD 21			         INT    21H
				   ;}
				
 2296				   F1LABEL:
				   ;{ IF(USER PRESS F1)
				   ;     CMP    AH,3BH
 2296  EB 01 90			         JMP    F2LABEL
				   ;}
 2299				   F2LABEL:
				   ;{ IF(USER PRESS F2)
 2299  80 FC 3C			         CMP    AH,3CH
 229C  75 DB			         JNZ    MENUEE
				   ;}
 229E  B4 2C			   MOV    AH, 2CH  ;GET SYSTEM TIME
 22A0  CD 21			   INT    21H
 22A2  88 36 0089 R		   MOV    PREV_SYS_SECOND, DH  ;STORE THE CURRE
				NT SECOND OF THE SYSTEM
 22A6  C3			   RET
 22A7				   MAIN_MENU ENDP
				   
				END MAIN 

Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-1


Macros:

		N a m e			Lines

BUSTERWORD . . . . . . . . . . .  	 194
DETECT_COLLISION . . . . . . . .  	  68
DRAW . . . . . . . . . . . . . .  	 208
DRAW_OBJECT  . . . . . . . . . .  	  27
GHOSTWORD  . . . . . . . . . . .  	 125
MENU . . . . . . . . . . . . . .  	  96
PRINTNUM . . . . . . . . . . . .  	  22
RANDOMIZE  . . . . . . . . . . .  	  29
WITHIN_BOUNDARIES  . . . . . . .  	  48
YWN  . . . . . . . . . . . . . .  	 142

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	00F8	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0040	PARA	STACK	'STACK'
_TEXT  . . . . . . . . . . . . .  	22A7	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

BACKTOMAINLOOP . . . . . . . . .  	L NEAR	0407	_TEXT
BACKTOMAINLOOP_1 . . . . . . . .  	L NEAR	0380	_TEXT
BITMAP_DOWNLEFT_PLAYER2  . . . .  	V BYTE	0000		External
BITMAP_DOWNRIGHT_PLAYER1 . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER1  . . . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_LEFT_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_RIGHT_PLAYER1 . . . . . .  	V BYTE	0000		External
BITMAP_UPLEFT_PLAYER2  . . . . .  	V BYTE	0000		External
BITMAP_UPRIGHT_PLAYER1 . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER1  . . . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER2  . . . . . . .  	V BYTE	0000		External
BUFFER . . . . . . . . . . . . .  	L BYTE	0008	_DATA
BULLETSIZE . . . . . . . . . . .  	L WORD	0094	_DATA
BULLETS_HIT  . . . . . . . . . .  	N PROC	16F7	_TEXT	Length = 0081
BULLET_1_MODEL . . . . . . . . .  	V BYTE	0000		External
BULLET_1_MOTION_TYPE . . . . . .  	L WORD	003F	_DATA
BULLET_1_POSITION_X  . . . . . .  	L WORD	0039	_DATA
BULLET_1_POSITION_Y  . . . . . .  	L WORD	003B	_DATA
BULLET_1_SPEED . . . . . . . . .  	L WORD	0041	_DATA
BULLET_1_SPEED_POWER_NUM . . . .  	L WORD	0043	_DATA
BULLET_1_START_POSITION_X  . . .  	L WORD	0015	_DATA
BULLET_1_START_POSITION_Y  . . .  	L WORD	0017	_DATA
BULLET_1_STATUS  . . . . . . . .  	L WORD	003D	_DATA
BULLET_2_MODEL . . . . . . . . .  	V BYTE	0000		External
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-2


BULLET_2_MOTION_TYPE . . . . . .  	L WORD	004B	_DATA
BULLET_2_POSITION_X  . . . . . .  	L WORD	0045	_DATA
BULLET_2_POSITION_Y  . . . . . .  	L WORD	0047	_DATA
BULLET_2_SPEED . . . . . . . . .  	L WORD	004D	_DATA
BULLET_2_SPEED_POWER_NUM . . . .  	L WORD	004F	_DATA
BULLET_2_START_POSITION_X  . . .  	L WORD	0035	_DATA
BULLET_2_START_POSITION_Y  . . .  	L WORD	0037	_DATA
BULLET_2_STATUS  . . . . . . . .  	L WORD	0049	_DATA
BULLET_SPEED_POWERUPS  . . . . .  	L WORD	0051	_DATA

CHECKKEY . . . . . . . . . . . .  	L NEAR	0168	_TEXT
CHECK_HIT_BUL1_GHOST1  . . . . .  	N PROC	11D1	_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST2  . . . . .  	N PROC	1294	_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST3  . . . . .  	N PROC	1357	_TEXT	Length = 00C3
CHECK_HIT_BUL1_TANK2 . . . . . .  	N PROC	113D	_TEXT	Length = 0094
CHECK_HIT_BUL2_GHOST1  . . . . .  	N PROC	14AE	_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST2  . . . . .  	N PROC	1571	_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST3  . . . . .  	N PROC	1634	_TEXT	Length = 00C3
CHECK_HIT_BUL2_TANK1 . . . . . .  	N PROC	141A	_TEXT	Length = 0094
CHECK_HIT_GHOST1_TANK1 . . . . .  	N PROC	1778	_TEXT	Length = 0096
CHECK_HIT_GHOST1_TANK2 . . . . .  	N PROC	193A	_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK1 . . . . .  	N PROC	180E	_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK2 . . . . .  	N PROC	19D0	_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK1 . . . . .  	N PROC	18A4	_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK2 . . . . .  	N PROC	1A66	_TEXT	Length = 0096
CLEARKEYBOARDBUFFER  . . . . . .  	N PROC	0300	_TEXT	Length = 0018
CN . . . . . . . . . . . . . . .  	L NEAR	024E	_TEXT
COLDD  . . . . . . . . . . . . .  	L NEAR	021D	_TEXT
COLRAW . . . . . . . . . . . . .  	L NEAR	0236	_TEXT

DECREASE_HP1_G1  . . . . . . . .  	L NEAR	1804	_TEXT
DECREASE_HP1_G2  . . . . . . . .  	L NEAR	189A	_TEXT
DECREASE_HP1_G3  . . . . . . . .  	L NEAR	1930	_TEXT
DECREASE_HP2_G1  . . . . . . . .  	L NEAR	19C6	_TEXT
DECREASE_HP2_G2  . . . . . . . .  	L NEAR	1A5C	_TEXT
DECREASE_HP2_G3  . . . . . . . .  	L NEAR	1AF2	_TEXT
DMG_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
DMG_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
DOWN1  . . . . . . . . . . . . .  	L NEAR	04B7	_TEXT
DOWN2  . . . . . . . . . . . . .  	L NEAR	05BE	_TEXT
DOWNB  . . . . . . . . . . . . .  	L NEAR	0FD9	_TEXT
DOWNB2 . . . . . . . . . . . . .  	L NEAR	1134	_TEXT
DOWNLEFT . . . . . . . . . . . .  	L NEAR	0599	_TEXT
DOWNLEFTB  . . . . . . . . . . .  	L NEAR	110F	_TEXT
DOWNLEFT_GHOST1  . . . . . . . .  	L NEAR	0B71	_TEXT
DOWNLEFT_GHOST2  . . . . . . . .  	L NEAR	0C8C	_TEXT
DOWNLEFT_GHOST3  . . . . . . . .  	L NEAR	0DA9	_TEXT
DOWNRIGHT  . . . . . . . . . . .  	L NEAR	0496	_TEXT
DOWNRIGHTB . . . . . . . . . . .  	L NEAR	0FB4	_TEXT
DOWNRIGHT_GHOST1 . . . . . . . .  	L NEAR	0B5D	_TEXT
DOWNRIGHT_GHOST2 . . . . . . . .  	L NEAR	0C78	_TEXT
DOWNRIGHT_GHOST3 . . . . . . . .  	L NEAR	0D95	_TEXT
DOWN_LEFT  . . . . . . . . . . .  	L NEAR	1123	_TEXT
DOWN_LEFT_MOVEMENT . . . . . . .  	L NEAR	1126	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-3


DOWN_RIGHT_MOVEMENT  . . . . . .  	L NEAR	0FCB	_TEXT
DOWN_RIGHT_SPEED . . . . . . . .  	L NEAR	0FC8	_TEXT
DRAW1  . . . . . . . . . . . . .  	L NEAR	0B24	_TEXT
DRAW2  . . . . . . . . . . . . .  	L NEAR	0C3F	_TEXT
DRAW3  . . . . . . . . . . . . .  	L NEAR	0D5C	_TEXT
DRAWTANK . . . . . . . . . . . .  	L NEAR	04DB	_TEXT
DRAWTANK2  . . . . . . . . . . .  	L NEAR	05E2	_TEXT
DRAW_BULLET_1  . . . . . . . . .  	N PROC	0EB4	_TEXT	Length = 00B1
DRAW_BULLET_2  . . . . . . . . .  	N PROC	1013	_TEXT	Length = 00AD
DRAW_CASE  . . . . . . . . . . .  	L NEAR	018B	_TEXT
DRAW_GHOST1  . . . . . . . . . .  	N PROC	0A91	_TEXT	Length = 00C1
DRAW_GHOST2  . . . . . . . . . .  	N PROC	0BAC	_TEXT	Length = 00C1
DRAW_GHOST3  . . . . . . . . . .  	N PROC	0CC9	_TEXT	Length = 00C1
DRAW_HEALTH_BAR_1  . . . . . . .  	N PROC	1AFC	_TEXT	Length = 0082
DRAW_HEALTH_BAR_2  . . . . . . .  	N PROC	1B7E	_TEXT	Length = 0085
DRAW_PORTALS . . . . . . . . . .  	N PROC	0DE6	_TEXT	Length = 009D
DRAW_RED . . . . . . . . . . . .  	L NEAR	1BC4	_TEXT
DRAW_TANK1 . . . . . . . . . . .  	N PROC	040C	_TEXT	Length = 00FD
DRAW_TANK2 . . . . . . . . . . .  	N PROC	0509	_TEXT	Length = 0107
DRW_PRUP_BAR_1 . . . . . . . . .  	N PROC	1C03	_TEXT	Length = 0081
DRW_PRUP_BAR_2 . . . . . . . . .  	N PROC	1C84	_TEXT	Length = 0081

ENDDRAW_GHOST1 . . . . . . . . .  	L NEAR	0B4D	_TEXT
ENDDRAW_GHOST11  . . . . . . . .  	L NEAR	0B0B	_TEXT
ENDDRAW_GHOST2 . . . . . . . . .  	L NEAR	0C68	_TEXT
ENDDRAW_GHOST21  . . . . . . . .  	L NEAR	0C26	_TEXT
ENDDRAW_GHOST3 . . . . . . . . .  	L NEAR	0D85	_TEXT
ENDDRAW_GHOST31  . . . . . . . .  	L NEAR	0D43	_TEXT
ENDMOVE_GHOST1 . . . . . . . . .  	L NEAR	0BA7	_TEXT
ENDMOVE_GHOST2 . . . . . . . . .  	L NEAR	0CC4	_TEXT
ENDMOVE_GHOST3 . . . . . . . . .  	L NEAR	0DE1	_TEXT
ENDPROGRAM . . . . . . . . . . .  	L NEAR	016E	_TEXT
ENDPROGRAM1  . . . . . . . . . .  	L NEAR	00C7	_TEXT
EXISTS_GHOST1  . . . . . . . . .  	L WORD	0057	_DATA
EXISTS_GHOST2  . . . . . . . . .  	L WORD	0066	_DATA
EXISTS_GHOST3  . . . . . . . . .  	L WORD	0075	_DATA
EXITPROG . . . . . . . . . . . .  	L NEAR	03F7	_TEXT

F1LABEL  . . . . . . . . . . . .  	L NEAR	2296	_TEXT
F2LABEL  . . . . . . . . . . . .  	L NEAR	2299	_TEXT
FIREBULLET1  . . . . . . . . . .  	L NEAR	0383	_TEXT
FIRE_BULLET2 . . . . . . . . . .  	N PROC	0FE2	_TEXT	Length = 0031
FIRE_BULLET_1  . . . . . . . . .  	N PROC	0E83	_TEXT	Length = 0031
FIRE_BULLET_2  . . . . . . . . .  	L NEAR	03ED	_TEXT

GHOST1_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_LIVES . . . . . . . . . .  	L NEAR	128F	_TEXT
GHOST1_LIVES2  . . . . . . . . .  	L NEAR	156C	_TEXT
GHOST2_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_LIVES . . . . . . . . . .  	L NEAR	1352	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-4


GHOST2_LIVES2  . . . . . . . . .  	L NEAR	162F	_TEXT
GHOST3_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_LIVES . . . . . . . . . .  	L NEAR	1415	_TEXT
GHOST3_LIVES2  . . . . . . . . .  	L NEAR	16F2	_TEXT
GHOSTSIZE  . . . . . . . . . . .  	L WORD	0092	_DATA

HEARTSIZE  . . . . . . . . . . .  	L WORD	0096	_DATA
HEARTS_1_START_POSITION_X  . . .  	L WORD	0025	_DATA
HEARTS_1_START_POSITION_Y  . . .  	L WORD	0027	_DATA
HEARTS_2_START_POSITION_X  . . .  	L WORD	0029	_DATA
HEARTS_2_START_POSITION_Y  . . .  	L WORD	002B	_DATA
HP2_LIMIT1 . . . . . . . . . . .  	L NEAR	152D	_TEXT
HP2_LIMIT2 . . . . . . . . . . .  	L NEAR	15F0	_TEXT
HP2_LIMIT3 . . . . . . . . . . .  	L NEAR	16B3	_TEXT
HP_LIMIT1  . . . . . . . . . . .  	L NEAR	1250	_TEXT
HP_LIMIT2  . . . . . . . . . . .  	L NEAR	1313	_TEXT
HP_LIMIT3  . . . . . . . . . . .  	L NEAR	13D6	_TEXT

INCREASE2_DAMAGE1  . . . . . . .  	L NEAR	1545	_TEXT
INCREASE2_DAMAGE2  . . . . . . .  	L NEAR	1608	_TEXT
INCREASE2_DAMAGE3  . . . . . . .  	L NEAR	16CB	_TEXT
INCREASE_DAMAGE1 . . . . . . . .  	L NEAR	1268	_TEXT
INCREASE_DAMAGE2 . . . . . . . .  	L NEAR	132B	_TEXT
INCREASE_DAMAGE3 . . . . . . . .  	L NEAR	13EE	_TEXT

LEFT . . . . . . . . . . . . . .  	L NEAR	0564	_TEXT
LEFTB  . . . . . . . . . . . . .  	L NEAR	1101	_TEXT
LEFTBOUND_X  . . . . . . . . . .  	L WORD	0004	_DATA
LOGO . . . . . . . . . . . . . .  	V BYTE	0000		External
LOGOSIZE . . . . . . . . . . . .  	L WORD	009A	_DATA
LOGO_X . . . . . . . . . . . . .  	L WORD	009E	_DATA
LOGO_Y . . . . . . . . . . . . .  	L WORD	00A0	_DATA
LOSER1 . . . . . . . . . . . . .  	L NEAR	14A0	_TEXT
LOSER2 . . . . . . . . . . . . .  	L NEAR	11C3	_TEXT
LOWER4MACRO  . . . . . . . . . .  	L WORD	008A	_DATA
LOWERBOUND_Y . . . . . . . . . .  	L WORD	0002	_DATA

MAIN . . . . . . . . . . . . . .  	F PROC	0000	_TEXT	Length = 0300
MAINLOOP . . . . . . . . . . . .  	L NEAR	0012	_TEXT
MAIN_MENU  . . . . . . . . . . .  	N PROC	1F55	_TEXT	Length = 0352
MENUEE . . . . . . . . . . . . .  	L NEAR	2279	_TEXT
MENUITEM1  . . . . . . . . . . .  	L BYTE	00A2	_DATA
MENUITEM2  . . . . . . . . . . .  	L BYTE	00BD	_DATA
MENUITEM3  . . . . . . . . . . .  	L BYTE	00D8	_DATA
MOTION_GHOST1  . . . . . . . . .  	L WORD	0059	_DATA
MOTION_GHOST2  . . . . . . . . .  	L WORD	0068	_DATA
MOTION_GHOST3  . . . . . . . . .  	L WORD	0077	_DATA
MOVEDOWN1  . . . . . . . . . . .  	L NEAR	033E	_TEXT
MOVEDOWN2  . . . . . . . . . . .  	L NEAR	03A8	_TEXT
MOVEUP1  . . . . . . . . . . . .  	L NEAR	0323	_TEXT
MOVEUP2  . . . . . . . . . . . .  	L NEAR	038D	_TEXT
MOVE_BULLET_1  . . . . . . . . .  	N PROC	0F65	_TEXT	Length = 007D
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-5


MOVE_BULLET_2  . . . . . . . . .  	N PROC	10C0	_TEXT	Length = 007D
MOVE_GHOST1  . . . . . . . . . .  	N PROC	0B52	_TEXT	Length = 005A
MOVE_GHOST2  . . . . . . . . . .  	N PROC	0C6D	_TEXT	Length = 005C
MOVE_GHOST3  . . . . . . . . . .  	N PROC	0D8A	_TEXT	Length = 005C
MOV_DOWNLEFT2  . . . . . . . . .  	L NEAR	07DD	_TEXT
MOV_DOWNRIGHT3 . . . . . . . . .  	L NEAR	0961	_TEXT
MOV_UPLEFT2  . . . . . . . . . .  	L NEAR	07E3	_TEXT
MOV_UPRIGHT3 . . . . . . . . . .  	L NEAR	0967	_TEXT

NOGHOST1 . . . . . . . . . . . .  	L NEAR	0E1A	_TEXT
NOGHOST2 . . . . . . . . . . . .  	L NEAR	0E4E	_TEXT
NOGHOST3 . . . . . . . . . . . .  	L NEAR	0E82	_TEXT
NOGHOSTWAVE  . . . . . . . . . .  	L NEAR	007B	_TEXT
NOHIT1 . . . . . . . . . . . . .  	L NEAR	11CC	_TEXT
NOHIT2 . . . . . . . . . . . . .  	L NEAR	14A9	_TEXT
NOTIMECHANGE . . . . . . . . . .  	L NEAR	007B	_TEXT
NOT_HITTING  . . . . . . . . . .  	L NEAR	1773	_TEXT
NO_DMG_PWRUP_1 . . . . . . . . .  	L NEAR	1C7F	_TEXT
NO_DMG_PWRUP_2 . . . . . . . . .  	L NEAR	1D00	_TEXT
NO_SPD_PWRUP_1 . . . . . . . . .  	L NEAR	1C4C	_TEXT
NO_SPD_PWRUP_2 . . . . . . . . .  	L NEAR	1CCD	_TEXT

ORIENTATION_PLAYER1  . . . . . .  	L WORD	0013	_DATA
ORIENTATION_PLAYER2  . . . . . .  	L WORD	0023	_DATA
ORIENT_DOWN1 . . . . . . . . . .  	L NEAR	0370	_TEXT
ORIENT_DOWN2 . . . . . . . . . .  	L NEAR	03DA	_TEXT
ORIENT_UP1 . . . . . . . . . . .  	L NEAR	035D	_TEXT
ORIENT_UP2 . . . . . . . . . . .  	L NEAR	03C7	_TEXT

PLAYER1_WON  . . . . . . . . . .  	L NEAR	0182	_TEXT
PLAYER2_WON  . . . . . . . . . .  	L NEAR	1E32	_TEXT
PLAYER_LOST  . . . . . . . . . .  	N PROC	1D05	_TEXT	Length = 0250
PORTAL . . . . . . . . . . . . .  	V BYTE	0000		External
PORTAL_SIZE  . . . . . . . . . .  	L WORD	0090	_DATA
POWERUP_GHOST1 . . . . . . . . .  	L WORD	005B	_DATA
POWERUP_GHOST2 . . . . . . . . .  	L WORD	006A	_DATA
POWERUP_GHOST3 . . . . . . . . .  	L WORD	0079	_DATA
PRESS_TO_MENU  . . . . . . . . .  	L NEAR	1F4D	_TEXT
PREV_SYS_SECOND  . . . . . . . .  	L BYTE	0089	_DATA
PRUP_ICON_SIZE . . . . . . . . .  	L WORD	0098	_DATA
PWRUP_BAR_1_START_POSITION_X . .  	L WORD	002D	_DATA
PWRUP_BAR_1_START_POSITION_Y . .  	L WORD	002F	_DATA
PWRUP_BAR_2_START_POSITION_X . .  	L WORD	0031	_DATA
PWRUP_BAR_2_START_POSITION_Y . .  	L WORD	0033	_DATA

RANDOMIZE_GHOST1 . . . . . . . .  	N PROC	0610	_TEXT	Length = 0179
RANDOMIZE_GHOST2 . . . . . . . .  	N PROC	0789	_TEXT	Length = 0184
RANDOMIZE_GHOST3 . . . . . . . .  	N PROC	090D	_TEXT	Length = 0184
RANDSEED . . . . . . . . . . . .  	L WORD	0087	_DATA
RED_HEART  . . . . . . . . . . .  	V BYTE	0000		External
RED_PLAYER1  . . . . . . . . . .  	L NEAR	1B0A	_TEXT
RED_PLAYER2  . . . . . . . . . .  	L NEAR	1BC8	_TEXT
RESULT . . . . . . . . . . . . .  	L NEAR	0188	_TEXT
RETURN_DATA2 . . . . . . . . . .  	L NEAR	1BFE	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-6


RETURN_HEALTH1 . . . . . . . . .  	L NEAR	1B79	_TEXT
RET_DRW_BUL_1  . . . . . . . . .  	L NEAR	0F60	_TEXT
RET_DRW_BUL_11 . . . . . . . . .  	L NEAR	0F2E	_TEXT
RET_DRW_BUL_2  . . . . . . . . .  	L NEAR	10BB	_TEXT
RET_DRW_BUL_22 . . . . . . . . .  	L NEAR	108D	_TEXT
RET_FIRE_BUL_1 . . . . . . . . .  	L NEAR	0EAF	_TEXT
RET_FIRE_BUL_2 . . . . . . . . .  	L NEAR	100E	_TEXT
RET_MOV_BUL_1  . . . . . . . . .  	L NEAR	0FDD	_TEXT
RET_MOV_BUL_2  . . . . . . . . .  	L NEAR	1138	_TEXT
RIGHT  . . . . . . . . . . . . .  	L NEAR	0465	_TEXT
RIGHTB . . . . . . . . . . . . .  	L NEAR	0FA6	_TEXT
RIGHTBOUND_X . . . . . . . . . .  	L WORD	0006	_DATA

SKIP1  . . . . . . . . . . . . .  	L NEAR	00CA	_TEXT
SKIP_BUL1_CHECKS1  . . . . . . .  	L NEAR	00F2	_TEXT
SKIP_BUL1_CHECKS2  . . . . . . .  	L NEAR	00FC	_TEXT
SKIP_BUL1_CHECKS3  . . . . . . .  	L NEAR	0106	_TEXT
SKIP_BUL1_CHECKS4  . . . . . . .  	L NEAR	0110	_TEXT
SKIP_BUL2_CHECKS1  . . . . . . .  	L NEAR	011A	_TEXT
SKIP_BUL2_CHECKS2  . . . . . . .  	L NEAR	0124	_TEXT
SKIP_BUL2_CHECKS3  . . . . . . .  	L NEAR	012E	_TEXT
SKIP_BUL2_CHECKS4  . . . . . . .  	L NEAR	0138	_TEXT
SKIP_GHOST1_CHECK1 . . . . . . .  	L NEAR	0092	_TEXT
SKIP_GHOST1_CHECK2 . . . . . . .  	L NEAR	00B0	_TEXT
SKIP_GHOST2_CHECK1 . . . . . . .  	L NEAR	009C	_TEXT
SKIP_GHOST2_CHECK2 . . . . . . .  	L NEAR	00BA	_TEXT
SKIP_GHOST3_CHECK1 . . . . . . .  	L NEAR	00A6	_TEXT
SKIP_GHOST3_CHECK3 . . . . . . .  	L NEAR	00C4	_TEXT
SKIP_HITTING_CHECK . . . . . . .  	L NEAR	014F	_TEXT
SPD_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_LOOP_1  . . . . . . . .  	L NEAR	1C19	_TEXT
SPD_PRUP_LOOP_2  . . . . . . . .  	L NEAR	1C9A	_TEXT
SPEED2_INCREASE1 . . . . . . . .  	L NEAR	153C	_TEXT
SPEED2_INCREASE2 . . . . . . . .  	L NEAR	15FF	_TEXT
SPEED2_INCREASE3 . . . . . . . .  	L NEAR	16C2	_TEXT
SPEED2_LIMIT1  . . . . . . . . .  	L NEAR	154E	_TEXT
SPEED2_LIMIT2  . . . . . . . . .  	L NEAR	1611	_TEXT
SPEED2_LIMIT3  . . . . . . . . .  	L NEAR	16D4	_TEXT
SPEED_INCREASE1  . . . . . . . .  	L NEAR	125F	_TEXT
SPEED_INCREASE2  . . . . . . . .  	L NEAR	1322	_TEXT
SPEED_INCREASE3  . . . . . . . .  	L NEAR	13E5	_TEXT
SPEED_LIMIT1 . . . . . . . . . .  	L NEAR	1271	_TEXT
SPEED_LIMIT2 . . . . . . . . . .  	L NEAR	1334	_TEXT
SPEED_LIMIT3 . . . . . . . . . .  	L NEAR	13F7	_TEXT
STARTPOS_X_GHOST1  . . . . . . .  	L WORD	0053	_DATA
STARTPOS_X_GHOST2  . . . . . . .  	L WORD	0062	_DATA
STARTPOS_X_GHOST3  . . . . . . .  	L WORD	0071	_DATA
STARTPOS_X_PLAYER1 . . . . . . .  	L WORD	0009	_DATA
STARTPOS_X_PLAYER2 . . . . . . .  	L WORD	0019	_DATA
STARTPOS_X_PORTAL1 . . . . . . .  	L WORD	005D	_DATA
STARTPOS_X_PORTAL2 . . . . . . .  	L WORD	006C	_DATA
STARTPOS_X_PORTAL3 . . . . . . .  	L WORD	007B	_DATA
STARTPOS_Y_GHOST1  . . . . . . .  	L WORD	0055	_DATA
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-7


STARTPOS_Y_GHOST2  . . . . . . .  	L WORD	0064	_DATA
STARTPOS_Y_GHOST3  . . . . . . .  	L WORD	0073	_DATA
STARTPOS_Y_PLAYER1 . . . . . . .  	L WORD	000B	_DATA
STARTPOS_Y_PLAYER2 . . . . . . .  	L WORD	001B	_DATA
STARTPOS_Y_PORTAL1 . . . . . . .  	L WORD	005F	_DATA
STARTPOS_Y_PORTAL2 . . . . . . .  	L WORD	006E	_DATA
STARTPOS_Y_PORTAL3 . . . . . . .  	L WORD	007D	_DATA

T1_KILL_G1 . . . . . . . . . . .  	L NEAR	1283	_TEXT
T1_KILL_G2 . . . . . . . . . . .  	L NEAR	1346	_TEXT
T1_KILL_G3 . . . . . . . . . . .  	L NEAR	1409	_TEXT
T2_KILL_G1 . . . . . . . . . . .  	L NEAR	1560	_TEXT
T2_KILL_G2 . . . . . . . . . . .  	L NEAR	1623	_TEXT
T2_KILL_G3 . . . . . . . . . . .  	L NEAR	16E6	_TEXT
TANK1_SAFE1  . . . . . . . . . .  	L NEAR	1809	_TEXT
TANK1_SAFE2  . . . . . . . . . .  	L NEAR	189F	_TEXT
TANK1_SAFE3  . . . . . . . . . .  	L NEAR	1935	_TEXT
TANK2_SAFE1  . . . . . . . . . .  	L NEAR	19CB	_TEXT
TANK2_SAFE2  . . . . . . . . . .  	L NEAR	1A61	_TEXT
TANK2_SAFE3  . . . . . . . . . .  	L NEAR	1AF7	_TEXT
TANKSIZE . . . . . . . . . . . .  	L WORD	008E	_DATA
TANK_DMG_1 . . . . . . . . . . .  	L WORD	0011	_DATA
TANK_DMG_2 . . . . . . . . . . .  	L WORD	0021	_DATA
TANK_HP_1  . . . . . . . . . . .  	L WORD	000D	_DATA
TANK_HP_2  . . . . . . . . . . .  	L WORD	001D	_DATA
TANK_SPEED_1 . . . . . . . . . .  	L WORD	000F	_DATA
TANK_SPEED_2 . . . . . . . . . .  	L WORD	001F	_DATA
TIME . . . . . . . . . . . . . .  	L WORD	0081	_DATA
TIME_DECIMAL . . . . . . . . . .  	L BYTE	0083	_DATA	Length = 0004
TYPE_GHOST1  . . . . . . . . . .  	L BYTE	0061	_DATA
TYPE_GHOST2  . . . . . . . . . .  	L BYTE	0070	_DATA
TYPE_GHOST3  . . . . . . . . . .  	L WORD	007F	_DATA

UPLEFT . . . . . . . . . . . . .  	L NEAR	053F	_TEXT
UPLEFTB  . . . . . . . . . . . .  	L NEAR	10DC	_TEXT
UPLEFT_GHOST1  . . . . . . . . .  	L NEAR	0B97	_TEXT
UPLEFT_GHOST2  . . . . . . . . .  	L NEAR	0CB2	_TEXT
UPLEFT_GHOST3  . . . . . . . . .  	L NEAR	0DCF	_TEXT
UPPER4MACRO  . . . . . . . . . .  	L WORD	008C	_DATA
UPPERBOUND_Y . . . . . . . . . .  	L WORD	0000	_DATA
UPRIGHT  . . . . . . . . . . . .  	L NEAR	0442	_TEXT
UPRIGHTB . . . . . . . . . . . .  	L NEAR	0F81	_TEXT
UPRIGHT_GHOST1 . . . . . . . . .  	L NEAR	0B84	_TEXT
UPRIGHT_GHOST2 . . . . . . . . .  	L NEAR	0C9F	_TEXT
UPRIGHT_GHOST3 . . . . . . . . .  	L NEAR	0DBC	_TEXT
UP_LEFT  . . . . . . . . . . . .  	L NEAR	10F0	_TEXT
UP_LEFT_MOVEMENT . . . . . . . .  	L NEAR	10F3	_TEXT
UP_RIGHT_MOVEMENT  . . . . . . .  	L NEAR	0F98	_TEXT
UP_RIGHT_SPEED . . . . . . . . .  	L NEAR	0F95	_TEXT
USERINPUT  . . . . . . . . . . .  	N PROC	0318	_TEXT	Length = 00F4

WHITE_HEART  . . . . . . . . . .  	V BYTE	0000		External
WHITE_PLAYER1  . . . . . . . . .  	L NEAR	1B46	_TEXT
WHITE_PLAYER2  . . . . . . . . .  	L NEAR	1B91	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-8


WINNER . . . . . . . . . . . . .  	L WORD	009C	_DATA

??0000 . . . . . . . . . . . . .  	L NEAR	0031	_TEXT
??0001 . . . . . . . . . . . . .  	L NEAR	019B	_TEXT
??0002 . . . . . . . . . . . . .  	L NEAR	019B	_TEXT
??0004 . . . . . . . . . . . . .  	L NEAR	01A2	_TEXT
??0005 . . . . . . . . . . . . .  	L NEAR	01BC	_TEXT
??0006 . . . . . . . . . . . . .  	L NEAR	0201	_TEXT
??0007 . . . . . . . . . . . . .  	L NEAR	01BC	_TEXT
??0008 . . . . . . . . . . . . .  	L NEAR	0201	_TEXT
??0009 . . . . . . . . . . . . .  	L NEAR	01E0	_TEXT
??000A . . . . . . . . . . . . .  	L NEAR	01E0	_TEXT
??000C . . . . . . . . . . . . .  	L NEAR	021D	_TEXT
??000D . . . . . . . . . . . . .  	L NEAR	0246	_TEXT
??000E . . . . . . . . . . . . .  	L NEAR	0236	_TEXT
??000F . . . . . . . . . . . . .  	L NEAR	028B	_TEXT
??0010 . . . . . . . . . . . . .  	L NEAR	028B	_TEXT
??0011 . . . . . . . . . . . . .  	L NEAR	029B	_TEXT
??0012 . . . . . . . . . . . . .  	L NEAR	02AB	_TEXT
??0013 . . . . . . . . . . . . .  	L NEAR	02C9	_TEXT
??0014 . . . . . . . . . . . . .  	L NEAR	02C1	_TEXT
??0015 . . . . . . . . . . . . .  	L NEAR	02A3	_TEXT
??0016 . . . . . . . . . . . . .  	L NEAR	02B9	_TEXT
??0017 . . . . . . . . . . . . .  	L NEAR	04F1	_TEXT
??0018 . . . . . . . . . . . . .  	L NEAR	04E9	_TEXT
??0019 . . . . . . . . . . . . .  	L NEAR	04FA	_TEXT
??001A . . . . . . . . . . . . .  	L NEAR	05F8	_TEXT
??001B . . . . . . . . . . . . .  	L NEAR	05F0	_TEXT
??001C . . . . . . . . . . . . .  	L NEAR	0601	_TEXT
??001D . . . . . . . . . . . . .  	L NEAR	0636	_TEXT
??001E . . . . . . . . . . . . .  	L NEAR	0649	_TEXT
??001F . . . . . . . . . . . . .  	L NEAR	0670	_TEXT
??0020 . . . . . . . . . . . . .  	L NEAR	0683	_TEXT
??0021 . . . . . . . . . . . . .  	L NEAR	06AA	_TEXT
??0022 . . . . . . . . . . . . .  	L NEAR	06BD	_TEXT
??0023 . . . . . . . . . . . . .  	L NEAR	06FC	_TEXT
??0024 . . . . . . . . . . . . .  	L NEAR	0711	_TEXT
??0025 . . . . . . . . . . . . .  	L NEAR	0751	_TEXT
??0026 . . . . . . . . . . . . .  	L NEAR	0766	_TEXT
??0027 . . . . . . . . . . . . .  	L NEAR	07AF	_TEXT
??0028 . . . . . . . . . . . . .  	L NEAR	07C2	_TEXT
??0029 . . . . . . . . . . . . .  	L NEAR	07FF	_TEXT
??002A . . . . . . . . . . . . .  	L NEAR	0812	_TEXT
??002B . . . . . . . . . . . . .  	L NEAR	0839	_TEXT
??002C . . . . . . . . . . . . .  	L NEAR	084C	_TEXT
??002D . . . . . . . . . . . . .  	L NEAR	0882	_TEXT
??002E . . . . . . . . . . . . .  	L NEAR	0897	_TEXT
??002F . . . . . . . . . . . . .  	L NEAR	08D5	_TEXT
??0030 . . . . . . . . . . . . .  	L NEAR	08EA	_TEXT
??0031 . . . . . . . . . . . . .  	L NEAR	0933	_TEXT
??0032 . . . . . . . . . . . . .  	L NEAR	0946	_TEXT
??0033 . . . . . . . . . . . . .  	L NEAR	0983	_TEXT
??0034 . . . . . . . . . . . . .  	L NEAR	0996	_TEXT
??0035 . . . . . . . . . . . . .  	L NEAR	09BD	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-9


??0036 . . . . . . . . . . . . .  	L NEAR	09D0	_TEXT
??0037 . . . . . . . . . . . . .  	L NEAR	0A06	_TEXT
??0038 . . . . . . . . . . . . .  	L NEAR	0A1B	_TEXT
??0039 . . . . . . . . . . . . .  	L NEAR	0A59	_TEXT
??003A . . . . . . . . . . . . .  	L NEAR	0A6E	_TEXT
??003B . . . . . . . . . . . . .  	L NEAR	0AA6	_TEXT
??003C . . . . . . . . . . . . .  	L NEAR	0ABB	_TEXT
??003D . . . . . . . . . . . . .  	L NEAR	0AED	_TEXT
??003E . . . . . . . . . . . . .  	L NEAR	0AD4	_TEXT
??003F . . . . . . . . . . . . .  	L NEAR	0B02	_TEXT
??0040 . . . . . . . . . . . . .  	L NEAR	0B3A	_TEXT
??0041 . . . . . . . . . . . . .  	L NEAR	0B32	_TEXT
??0042 . . . . . . . . . . . . .  	L NEAR	0B43	_TEXT
??0043 . . . . . . . . . . . . .  	L NEAR	0BC1	_TEXT
??0044 . . . . . . . . . . . . .  	L NEAR	0BD6	_TEXT
??0045 . . . . . . . . . . . . .  	L NEAR	0C08	_TEXT
??0046 . . . . . . . . . . . . .  	L NEAR	0BEF	_TEXT
??0047 . . . . . . . . . . . . .  	L NEAR	0C1D	_TEXT
??0048 . . . . . . . . . . . . .  	L NEAR	0C55	_TEXT
??0049 . . . . . . . . . . . . .  	L NEAR	0C4D	_TEXT
??004A . . . . . . . . . . . . .  	L NEAR	0C5E	_TEXT
??004B . . . . . . . . . . . . .  	L NEAR	0CDE	_TEXT
??004C . . . . . . . . . . . . .  	L NEAR	0CF3	_TEXT
??004D . . . . . . . . . . . . .  	L NEAR	0D25	_TEXT
??004E . . . . . . . . . . . . .  	L NEAR	0D0C	_TEXT
??004F . . . . . . . . . . . . .  	L NEAR	0D3A	_TEXT
??0050 . . . . . . . . . . . . .  	L NEAR	0D72	_TEXT
??0051 . . . . . . . . . . . . .  	L NEAR	0D6A	_TEXT
??0052 . . . . . . . . . . . . .  	L NEAR	0D7B	_TEXT
??0053 . . . . . . . . . . . . .  	L NEAR	0E07	_TEXT
??0054 . . . . . . . . . . . . .  	L NEAR	0DFF	_TEXT
??0055 . . . . . . . . . . . . .  	L NEAR	0E10	_TEXT
??0056 . . . . . . . . . . . . .  	L NEAR	0E3B	_TEXT
??0057 . . . . . . . . . . . . .  	L NEAR	0E33	_TEXT
??0058 . . . . . . . . . . . . .  	L NEAR	0E44	_TEXT
??0059 . . . . . . . . . . . . .  	L NEAR	0E6F	_TEXT
??005A . . . . . . . . . . . . .  	L NEAR	0E67	_TEXT
??005B . . . . . . . . . . . . .  	L NEAR	0E78	_TEXT
??005C . . . . . . . . . . . . .  	L NEAR	0EC9	_TEXT
??005D . . . . . . . . . . . . .  	L NEAR	0EDE	_TEXT
??005E . . . . . . . . . . . . .  	L NEAR	0F10	_TEXT
??005F . . . . . . . . . . . . .  	L NEAR	0EF7	_TEXT
??0060 . . . . . . . . . . . . .  	L NEAR	0F25	_TEXT
??0061 . . . . . . . . . . . . .  	L NEAR	0F4D	_TEXT
??0062 . . . . . . . . . . . . .  	L NEAR	0F45	_TEXT
??0063 . . . . . . . . . . . . .  	L NEAR	0F56	_TEXT
??0064 . . . . . . . . . . . . .  	L NEAR	1028	_TEXT
??0065 . . . . . . . . . . . . .  	L NEAR	103D	_TEXT
??0066 . . . . . . . . . . . . .  	L NEAR	106F	_TEXT
??0067 . . . . . . . . . . . . .  	L NEAR	1056	_TEXT
??0068 . . . . . . . . . . . . .  	L NEAR	1084	_TEXT
??0069 . . . . . . . . . . . . .  	L NEAR	10A8	_TEXT
??006A . . . . . . . . . . . . .  	L NEAR	10A0	_TEXT
??006B . . . . . . . . . . . . .  	L NEAR	10B1	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-10


??006C . . . . . . . . . . . . .  	L NEAR	1174	_TEXT
??006D . . . . . . . . . . . . .  	L NEAR	117A	_TEXT
??006E . . . . . . . . . . . . .  	L NEAR	11A1	_TEXT
??006F . . . . . . . . . . . . .  	L NEAR	1192	_TEXT
??0070 . . . . . . . . . . . . .  	L NEAR	1198	_TEXT
??0071 . . . . . . . . . . . . .  	L NEAR	11A7	_TEXT
??0072 . . . . . . . . . . . . .  	L NEAR	1208	_TEXT
??0073 . . . . . . . . . . . . .  	L NEAR	120E	_TEXT
??0074 . . . . . . . . . . . . .  	L NEAR	1235	_TEXT
??0075 . . . . . . . . . . . . .  	L NEAR	1226	_TEXT
??0076 . . . . . . . . . . . . .  	L NEAR	122C	_TEXT
??0077 . . . . . . . . . . . . .  	L NEAR	123B	_TEXT
??0078 . . . . . . . . . . . . .  	L NEAR	12CB	_TEXT
??0079 . . . . . . . . . . . . .  	L NEAR	12D1	_TEXT
??007A . . . . . . . . . . . . .  	L NEAR	12F8	_TEXT
??007B . . . . . . . . . . . . .  	L NEAR	12E9	_TEXT
??007C . . . . . . . . . . . . .  	L NEAR	12EF	_TEXT
??007D . . . . . . . . . . . . .  	L NEAR	12FE	_TEXT
??007E . . . . . . . . . . . . .  	L NEAR	138E	_TEXT
??007F . . . . . . . . . . . . .  	L NEAR	1394	_TEXT
??0080 . . . . . . . . . . . . .  	L NEAR	13BB	_TEXT
??0081 . . . . . . . . . . . . .  	L NEAR	13AC	_TEXT
??0082 . . . . . . . . . . . . .  	L NEAR	13B2	_TEXT
??0083 . . . . . . . . . . . . .  	L NEAR	13C1	_TEXT
??0084 . . . . . . . . . . . . .  	L NEAR	1451	_TEXT
??0085 . . . . . . . . . . . . .  	L NEAR	1457	_TEXT
??0086 . . . . . . . . . . . . .  	L NEAR	147E	_TEXT
??0087 . . . . . . . . . . . . .  	L NEAR	146F	_TEXT
??0088 . . . . . . . . . . . . .  	L NEAR	1475	_TEXT
??0089 . . . . . . . . . . . . .  	L NEAR	1484	_TEXT
??008A . . . . . . . . . . . . .  	L NEAR	14E5	_TEXT
??008B . . . . . . . . . . . . .  	L NEAR	14EB	_TEXT
??008C . . . . . . . . . . . . .  	L NEAR	1512	_TEXT
??008D . . . . . . . . . . . . .  	L NEAR	1503	_TEXT
??008E . . . . . . . . . . . . .  	L NEAR	1509	_TEXT
??008F . . . . . . . . . . . . .  	L NEAR	1518	_TEXT
??0090 . . . . . . . . . . . . .  	L NEAR	15A8	_TEXT
??0091 . . . . . . . . . . . . .  	L NEAR	15AE	_TEXT
??0092 . . . . . . . . . . . . .  	L NEAR	15D5	_TEXT
??0093 . . . . . . . . . . . . .  	L NEAR	15C6	_TEXT
??0094 . . . . . . . . . . . . .  	L NEAR	15CC	_TEXT
??0095 . . . . . . . . . . . . .  	L NEAR	15DB	_TEXT
??0096 . . . . . . . . . . . . .  	L NEAR	166B	_TEXT
??0097 . . . . . . . . . . . . .  	L NEAR	1671	_TEXT
??0098 . . . . . . . . . . . . .  	L NEAR	1698	_TEXT
??0099 . . . . . . . . . . . . .  	L NEAR	1689	_TEXT
??009A . . . . . . . . . . . . .  	L NEAR	168F	_TEXT
??009B . . . . . . . . . . . . .  	L NEAR	169E	_TEXT
??009C . . . . . . . . . . . . .  	L NEAR	172E	_TEXT
??009D . . . . . . . . . . . . .  	L NEAR	1734	_TEXT
??009E . . . . . . . . . . . . .  	L NEAR	175B	_TEXT
??009F . . . . . . . . . . . . .  	L NEAR	174C	_TEXT
??00A0 . . . . . . . . . . . . .  	L NEAR	1752	_TEXT
??00A1 . . . . . . . . . . . . .  	L NEAR	1761	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-11


??00A2 . . . . . . . . . . . . .  	L NEAR	17AF	_TEXT
??00A3 . . . . . . . . . . . . .  	L NEAR	17B5	_TEXT
??00A4 . . . . . . . . . . . . .  	L NEAR	17DC	_TEXT
??00A5 . . . . . . . . . . . . .  	L NEAR	17CD	_TEXT
??00A6 . . . . . . . . . . . . .  	L NEAR	17D3	_TEXT
??00A7 . . . . . . . . . . . . .  	L NEAR	17E2	_TEXT
??00A8 . . . . . . . . . . . . .  	L NEAR	1845	_TEXT
??00A9 . . . . . . . . . . . . .  	L NEAR	184B	_TEXT
??00AA . . . . . . . . . . . . .  	L NEAR	1872	_TEXT
??00AB . . . . . . . . . . . . .  	L NEAR	1863	_TEXT
??00AC . . . . . . . . . . . . .  	L NEAR	1869	_TEXT
??00AD . . . . . . . . . . . . .  	L NEAR	1878	_TEXT
??00AE . . . . . . . . . . . . .  	L NEAR	18DB	_TEXT
??00AF . . . . . . . . . . . . .  	L NEAR	18E1	_TEXT
??00B0 . . . . . . . . . . . . .  	L NEAR	1908	_TEXT
??00B1 . . . . . . . . . . . . .  	L NEAR	18F9	_TEXT
??00B2 . . . . . . . . . . . . .  	L NEAR	18FF	_TEXT
??00B3 . . . . . . . . . . . . .  	L NEAR	190E	_TEXT
??00B4 . . . . . . . . . . . . .  	L NEAR	1971	_TEXT
??00B5 . . . . . . . . . . . . .  	L NEAR	1977	_TEXT
??00B6 . . . . . . . . . . . . .  	L NEAR	199E	_TEXT
??00B7 . . . . . . . . . . . . .  	L NEAR	198F	_TEXT
??00B8 . . . . . . . . . . . . .  	L NEAR	1995	_TEXT
??00B9 . . . . . . . . . . . . .  	L NEAR	19A4	_TEXT
??00BA . . . . . . . . . . . . .  	L NEAR	1A07	_TEXT
??00BB . . . . . . . . . . . . .  	L NEAR	1A0D	_TEXT
??00BC . . . . . . . . . . . . .  	L NEAR	1A34	_TEXT
??00BD . . . . . . . . . . . . .  	L NEAR	1A25	_TEXT
??00BE . . . . . . . . . . . . .  	L NEAR	1A2B	_TEXT
??00BF . . . . . . . . . . . . .  	L NEAR	1A3A	_TEXT
??00C0 . . . . . . . . . . . . .  	L NEAR	1A9D	_TEXT
??00C1 . . . . . . . . . . . . .  	L NEAR	1AA3	_TEXT
??00C2 . . . . . . . . . . . . .  	L NEAR	1ACA	_TEXT
??00C3 . . . . . . . . . . . . .  	L NEAR	1ABB	_TEXT
??00C4 . . . . . . . . . . . . .  	L NEAR	1AC1	_TEXT
??00C5 . . . . . . . . . . . . .  	L NEAR	1AD0	_TEXT
??00C6 . . . . . . . . . . . . .  	L NEAR	1B23	_TEXT
??00C7 . . . . . . . . . . . . .  	L NEAR	1B1B	_TEXT
??00C8 . . . . . . . . . . . . .  	L NEAR	1B2C	_TEXT
??00C9 . . . . . . . . . . . . .  	L NEAR	1B5F	_TEXT
??00CA . . . . . . . . . . . . .  	L NEAR	1B57	_TEXT
??00CB . . . . . . . . . . . . .  	L NEAR	1B68	_TEXT
??00CC . . . . . . . . . . . . .  	L NEAR	1BAA	_TEXT
??00CD . . . . . . . . . . . . .  	L NEAR	1BA2	_TEXT
??00CE . . . . . . . . . . . . .  	L NEAR	1BB3	_TEXT
??00CF . . . . . . . . . . . . .  	L NEAR	1BE1	_TEXT
??00D0 . . . . . . . . . . . . .  	L NEAR	1BD9	_TEXT
??00D1 . . . . . . . . . . . . .  	L NEAR	1BEA	_TEXT
??00D2 . . . . . . . . . . . . .  	L NEAR	1C2F	_TEXT
??00D3 . . . . . . . . . . . . .  	L NEAR	1C27	_TEXT
??00D4 . . . . . . . . . . . . .  	L NEAR	1C38	_TEXT
??00D5 . . . . . . . . . . . . .  	L NEAR	1C6C	_TEXT
??00D6 . . . . . . . . . . . . .  	L NEAR	1C64	_TEXT
??00D7 . . . . . . . . . . . . .  	L NEAR	1C75	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-12


??00D8 . . . . . . . . . . . . .  	L NEAR	1CB0	_TEXT
??00D9 . . . . . . . . . . . . .  	L NEAR	1CA8	_TEXT
??00DA . . . . . . . . . . . . .  	L NEAR	1CB9	_TEXT
??00DB . . . . . . . . . . . . .  	L NEAR	1CED	_TEXT
??00DC . . . . . . . . . . . . .  	L NEAR	1CE5	_TEXT
??00DD . . . . . . . . . . . . .  	L NEAR	1CF6	_TEXT
??00DE . . . . . . . . . . . . .  	L NEAR	1D1D	_TEXT
??00DF . . . . . . . . . . . . .  	L NEAR	1D1D	_TEXT
??00E0 . . . . . . . . . . . . .  	L NEAR	1D30	_TEXT
??00E1 . . . . . . . . . . . . .  	L NEAR	1D3E	_TEXT
??00E2 . . . . . . . . . . . . .  	L NEAR	1D99	_TEXT
??00E3 . . . . . . . . . . . . .  	L NEAR	1DE0	_TEXT
??00E4 . . . . . . . . . . . . .  	L NEAR	1D99	_TEXT
??00E5 . . . . . . . . . . . . .  	L NEAR	1DE0	_TEXT
??00E6 . . . . . . . . . . . . .  	L NEAR	1E1C	_TEXT
??00E7 . . . . . . . . . . . . .  	L NEAR	1E15	_TEXT
??00E8 . . . . . . . . . . . . .  	L NEAR	1E25	_TEXT
??00E9 . . . . . . . . . . . . .  	L NEAR	1E42	_TEXT
??00EA . . . . . . . . . . . . .  	L NEAR	1E42	_TEXT
??00EB . . . . . . . . . . . . .  	L NEAR	1E55	_TEXT
??00EC . . . . . . . . . . . . .  	L NEAR	1E63	_TEXT
??00ED . . . . . . . . . . . . .  	L NEAR	1EBE	_TEXT
??00EE . . . . . . . . . . . . .  	L NEAR	1F05	_TEXT
??00EF . . . . . . . . . . . . .  	L NEAR	1EBE	_TEXT
??00F0 . . . . . . . . . . . . .  	L NEAR	1F05	_TEXT
??00F1 . . . . . . . . . . . . .  	L NEAR	1F3A	_TEXT
??00F2 . . . . . . . . . . . . .  	L NEAR	1F33	_TEXT
??00F3 . . . . . . . . . . . . .  	L NEAR	1F43	_TEXT
??00F4 . . . . . . . . . . . . .  	L NEAR	1F71	_TEXT
??00F5 . . . . . . . . . . . . .  	L NEAR	1F71	_TEXT
??00F6 . . . . . . . . . . . . .  	L NEAR	1F9C	_TEXT
??00F7 . . . . . . . . . . . . .  	L NEAR	1FC1	_TEXT
??00F8 . . . . . . . . . . . . .  	L NEAR	1FE6	_TEXT
??00F9 . . . . . . . . . . . . .  	L NEAR	200A	_TEXT
??00FA . . . . . . . . . . . . .  	L NEAR	200A	_TEXT
??00FB . . . . . . . . . . . . .  	L NEAR	2022	_TEXT
??00FC . . . . . . . . . . . . .  	L NEAR	204C	_TEXT
??00FD . . . . . . . . . . . . .  	L NEAR	2085	_TEXT
??00FE . . . . . . . . . . . . .  	L NEAR	2085	_TEXT
??00FF . . . . . . . . . . . . .  	L NEAR	201A	_TEXT
??0100 . . . . . . . . . . . . .  	L NEAR	2044	_TEXT
??0101 . . . . . . . . . . . . .  	L NEAR	206C	_TEXT
??0102 . . . . . . . . . . . . .  	L NEAR	206C	_TEXT
??0103 . . . . . . . . . . . . .  	L NEAR	20E3	_TEXT
??0104 . . . . . . . . . . . . .  	L NEAR	20E3	_TEXT
??0105 . . . . . . . . . . . . .  	L NEAR	20FB	_TEXT
??0106 . . . . . . . . . . . . .  	L NEAR	211B	_TEXT
??0107 . . . . . . . . . . . . .  	L NEAR	215B	_TEXT
??0108 . . . . . . . . . . . . .  	L NEAR	215B	_TEXT
??0109 . . . . . . . . . . . . .  	L NEAR	20F3	_TEXT
??010A . . . . . . . . . . . . .  	L NEAR	2113	_TEXT
??010B . . . . . . . . . . . . .  	L NEAR	2140	_TEXT
??010C . . . . . . . . . . . . .  	L NEAR	2138	_TEXT
??010D . . . . . . . . . . . . .  	L NEAR	2189	_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 17:56:57
                                                             Symbols-13


??010E . . . . . . . . . . . . .  	L NEAR	2173	_TEXT
??010F . . . . . . . . . . . . .  	L NEAR	216B	_TEXT
??0110 . . . . . . . . . . . . .  	L NEAR	217B	_TEXT
??0111 . . . . . . . . . . . . .  	L NEAR	2191	_TEXT
??0112 . . . . . . . . . . . . .  	L NEAR	2199	_TEXT
??0113 . . . . . . . . . . . . .  	L NEAR	21DE	_TEXT
??0114 . . . . . . . . . . . . .  	L NEAR	21DE	_TEXT
??0115 . . . . . . . . . . . . .  	L NEAR	2208	_TEXT
??0116 . . . . . . . . . . . . .  	L NEAR	2210	_TEXT
??0117 . . . . . . . . . . . . .  	L NEAR	2218	_TEXT
??0118 . . . . . . . . . . . . .  	L NEAR	2236	_TEXT
??0119 . . . . . . . . . . . . .  	L NEAR	2226	_TEXT
??011A . . . . . . . . . . . . .  	L NEAR	222E	_TEXT
??011B . . . . . . . . . . . . .  	L NEAR	2266	_TEXT
??011C . . . . . . . . . . . . .  	L NEAR	225E	_TEXT
??011D . . . . . . . . . . . . .  	L NEAR	226F	_TEXT
@CODE  . . . . . . . . . . . . .  	TEXT  _TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  0		
@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@DATASIZE  . . . . . . . . . . .  	TEXT  1		
@FILENAME  . . . . . . . . . . .  	TEXT  main		
@VERSION . . . . . . . . . . . .  	TEXT  510		


   3676 Source  Lines
   6867 Total   Lines
    644 Symbols

  46912 + 348921 Bytes symbol space free

     14 Warning Errors
      0 Severe  Errors
