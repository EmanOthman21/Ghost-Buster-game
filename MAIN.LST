Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-1


				EXTRN BITMAP_LEFT_PLAYER2 : BYTE 
				EXTRN BITMAP_UPLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER2 : BYTE
				EXTRN BITMAP_DOWNLEFT_PLAYER2 : BYTE
				EXTRN BITMAP_DOWN_PLAYER2 : BYTE
				EXTRN BITMAP_UP_PLAYER1 : BYTE
				EXTRN BITMAP_DOWN_PLAYER1 : BYTE
				EXTRN BITMAP_RIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_DOWNRIGHT_PLAYER1 : BYTE
				EXTRN BITMAP_UPRIGHT_PLAYER1 : BYTE
				
				EXTRN GHOST1_0 : BYTE
				EXTRN GHOST1_1 : BYTE
				EXTRN GHOST1_2 : BYTE
				EXTRN GHOST2_0 : BYTE
				EXTRN GHOST2_1 : BYTE
				EXTRN GHOST2_2 : BYTE
				EXTRN GHOST3_0 : BYTE
				EXTRN GHOST3_1 : BYTE
				EXTRN GHOST3_2 : BYTE
				
				EXTRN PORTAL : BYTE
				
				EXTRN Bullet_1_Model : BYTE
				EXTRN BULLET_2_MODEL : BYTE
				
				EXTRN RED_HEART : BYTE
				EXTRN WHITE_HEART : BYTE
				
				EXTRN DMG_PRUP_1 : BYTE
				EXTRN DMG_PRUP_2 : BYTE
				EXTRN SPD_PRUP_1 : BYTE
				EXTRN SPD_PRUP_2 : BYTE
				
				EXTRN LOGO : BYTE
				
				INCLUDE RANDOM.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO TO GET RANDOM NUMBER WITHIN A PROVIDED
				 RANGE 
			     C	;----------------------------------------------
				-------------------------------
			     C	RANDOMIZE MACRO LOWER, UPPER, NUMBER, SEED 
			     C	LOCAL SET, NODIVISION
			     C	   PUSH     AX
			     C	   PUSH     BX
			     C	   PUSH     CX
			     C	   PUSH     DX
			     C	
			     C	   MOV     AX, 25173          ; LCG MULTIPLIER 
			     C	   MUL     WORD PTR SEED      ;DX:AX = LCG MULT
				IPLIER * SEED
			     C	   ADD     AX, 13849          ; ADD LCG INCREME
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-2


				NT VALUE
			     C	   ; MODULO 65536, AX = (MULTIPLIER*SEED+INCREM
				ENT) MOD 65536
			     C	   CMP     SEED, AX
			     C	   JNE     SET
			     C	   MOV     AH, 0
			     C	   INT     1AH
			     C	   MOV     SEED, DX    ; SEED WITH THE SYSTEM T
				IME
			     C	   
			     C	   SET:
			     C	   MOV     SEED, AX          ; UPDATE SEED = RE
				TURN VALUE
			     C	
			     C	   SUB      DX, DX
			     C	   MOV      CX, UPPER
			     C	   INC      CX
			     C	   SUB      CX, LOWER 
			     C	   CMP CX, 0 
			     C	   JE NODIVISION
			     C	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER)
			     C	   NODIVISION:
			     C	   ADD      DX, LOWER
			     C	   MOV      NUMBER, DX
			     C	
			     C	   POP      DX
			     C	   POP      CX
			     C	   POP      BX
			     C	   POP      AX
			     C	ENDM RANDOMIZE
				INCLUDE PRINTNUM.INC
			     C	
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to print any number providing the hexa
				decimal representation 
			     C	;----------------------------------------------
				-------------------------------
			     C	
			     C	PRINTNUM MACRO BINARY, DECIMAL
			     C	   LOCAL BACK 
			     C	   mov DECIMAL, '0'
			     C	   mov DECIMAL + 1, '0'
			     C	   MOV BX, 10            
			     C	   MOV SI, OFFSET DECIMAL
			     C	   ADD SI, 3
			     C	   DEC SI
			     C	   MOV AX, BINARY
			     C	   BACK:
			     C	      SUB DX, DX
			     C	      DIV BX
			     C	      OR DL, 30H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-3


			     C	      MOV [SI], DL
			     C	      DEC SI
			     C	      CMP AX, 0
			     C	      JA BACK 
			     C	    
			     C	   MOV AH, 2
			     C	   MOV DH, 1    ;Y POSITION FOR PRINTING
			     C	   MOV DL, 35    ;X POSITION FOR PRINTING
			     C	   INT 10H
			     C	    
			     C	   MOV AH, 9H      ;PRINT THE NUMBER
			     C	   MOV DX, OFFSET DECIMAL   
			     C	   INT 21H
			     C	    
			     C	ENDM PRINTNUM 
				INCLUDE BUNDRY.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  MACRO CHECK IF THE SHAPE IS WITHIN BOUNDARIE
				S 
			     C	;----------------------------------------------
				-------------------------------
			     C	WITHIN_BOUNDARIES MACRO STARTPOSX, STARTPOSY, S
				IZE, RESULT
			     C	   LOCAL UPPER_CHECK, LOWERCHECK, LEFTCHECK, RI
				GHTCHECK, WITHINRANGE
			     C	   PUSH AX
			     C	   PUSH BX
			     C	   PUSH CX
			     C	   PUSH DX
			     C	
			     C	
			     C	   MOV RESULT, 1           ;FIRST ASSUME THAT T
				HE SHAPE IS WITHIN BOUNDARIES
			     C	   UPPER_CHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ABOVE
			     C	      MOV CX, STARTPOSY
			     C	      MOV BX, UPPERBOUND_Y
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE LOWERCHECK
			     C	      MOV RESULT, 0   
			     C	   ;}
			     C	   
			     C	   LOWERCHECK:
			     C	   ;{CHECK FOR BOUNDARIES BELOW
			     C	      MOV CX, STARTPOSY
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, LOWERBOUND_Y
			     C	      SUB BX, CX
			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE RIGHTCHECK
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-4


			     C	      MOV RESULT, 0
			     C	   ;}  
			     C	
			     C	   RIGHTCHECK:
			     C	   ;{CHECK FOR BOUNDARIES ON THE RIGHT
			     C	      MOV CX, STARTPOSX
			     C	      ADD CX, SIZE    ;GET THE Y COORDINATE OF 
				THE LOWEST POINT OF THE TANK
			     C	      MOV BX, RIGHTBOUND_X
			     C	      SUB BX, CX
			     C	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY
			     C	      JGE LEFTCHECK
			     C	      MOV RESULT, 0
			     C	   ;} 
			     C	
			     C	   LEFTCHECK:
			     C	   ;{ CHECK FOR THE BOUNDARIES ON THE LEFT
			     C	      MOV CX, STARTPOSX
			     C	      MOV BX, LEFTBOUND_X
			     C	      SUB CX, BX
			     C	      CMP CX, 0  
			     C	      JGE WITHINRANGE
			     C	      MOV RESULT, 0   
			     C	   ;} 
			     C	
			     C	   WITHINRANGE:
			     C	   POP DX
			     C	   POP CX
			     C	   POP BX
			     C	   POP AX
			     C	ENDM WITHIN_BOUNDARIES 
				INCLUDE DWOBJ.INC
			     C	;----------------------------------------------
				-------------------------------
			     C	;  macro to draw any needed object(square) prov
				iding the length of the side,
			     C	;  a register containing the offset of the colo
				rs in the ds, starting x and y
			     C	;----------------------------------------------
				-------------------------------
			     C	DRAW_OBJECT MACRO SIZE, BITMAP, X, Y
			     C	LOCAL INNERLOOP, OUTERLOOP, DONT_DRAW
			     C	;{
			     C	   PUSH CX
			     C	   PUSH BX
			     C	   MOV SI, BITMAP  ;TAKE THE RIGHT BITMAP FROM 
				A REGISTER CONTAINING THE OFFSET
			     C	   MOV     DX, Y     ; Y TO START DRAWING AT
			     C	   MOV BP, SIZE
			     C	   MOV BH, [SI]
			     C	   
			     C	
			     C	   OUTERLOOP:;{ FOR(BP = 50; BD > 0; BP--)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-5


			     C	      MOV     CX, X    ; X TO START 
			     C	      MOV DI, SIZE
			     C	      INNERLOOP:;{ FOR(DX = 50; DX > 0; DX--)
			     C	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL
			     C	         CMP BH ,AL
			     C	         JE DONT_DRAW
			     C	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL
			     C	         INT     10H
			     C	         DONT_DRAW:
			     C	         INC     CX         ; NEXT X POSITION
			     C	         DEC     DI
			     C	         JNZ     INNERLOOP
			     C	         ;}
			     C	      INC     DX         ; NEXT Y POSITION
			     C	      DEC     BP
			     C	      JNZ     OUTERLOOP
			     C		  
			     C	      POP BX
			     C	      POP CX
			     C	;} 
			     C	ENDM DRAW_OBJECT
				INCLUDE MENU.INC
			     C	MENU MACRO 
			     C	LOCAL OUTERLOOP, INNERLOOP, PRINT1, PRINT2, PRI
				NT3
			     C	                    ;{ OPEN VEDIO MODE
			     C	                        MOV     AX, 4F02H
			     C	                        MOV     BX, 105H
			     C	                        INT     10H
			     C	                    ;}
			     C	
			     C	
			     C	                ;{ DRAWING BACKGROUND
			     C	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE
			     C	                    MOV     DX, 0     ; Y TO ST
				ART
			     C	                    MOV     CX, 0
			     C	                    MOV     AL, 7
			     C	                    MOV     AH, 0CH
			     C	                           OUTERLOOP: 
			     C	                                          INNER
				LOOP: 
			     C	                                               
				             INT     10H
			     C	                                               
				             INC     CX
			     C	                                               
				             CMP     CX, 1024
			     C	                                               
				             JNZ     INNERLOOP
			     C	                                          ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-6


			     C	                                    MOV     CX,
				0
			     C	                                    INC     DX 
				        ; NEXT Y
			     C	                                    CMP     DX,
				 780
			     C	                                    JNZ     OUT
				ERLOOP
			     C	                ;}
			     C	                ;{ CLEAR THE PAGE
			     C	                    MOV     AX, 0600H
			     C	                    MOV     BH, 0
			     C	                    MOV     CX, 0
			     C	                    MOV     DX, 184FH
			     C	                    INT     10H
			     C	                ;}
			     C	                ;{ CURSUR = (34H,1AH)
			     C	                    MOV     AH, 2
			     C	                    MOV     DX, 1B34H
			     C	                    INT     10H
			     C	                ;}
			     C	                LEA     SI, MENUITEM1
			     C	                PRINT1:
			     C	                    ;{ PRINTING MENUETIME1
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT1
			     C	                    ;}
			     C	                    ;{ CURSUR = (1BH,34H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1D34H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM2
			     C	                    PRINT2:
			     C	                    ;{ PRINTING MENUETIME2
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-7


			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT2 
			     C	                    ;}
			     C	                    ;{ CURSUR = (33H,19H)
			     C	                        MOV     AH, 2
			     C	                        MOV     DX, 1933H
			     C	                        INT     10H
			     C	                    ;}
			     C	                    LEA     SI, MENUITEM3
			     C	                    PRINT3:
			     C	                    ;{ PRINTING MENUETIME3
			     C	                        MOV     AH, 9
			     C	                        MOV     BH, 0
			     C	                        MOV     AL, [SI]
			     C	                        MOV     CX, 1
			     C	                        MOV     BL, 016H
			     C	                        INT     10H
			     C	                        INC     DL
			     C	                        MOV     AH, 2
			     C	                        INT     10H
			     C	                        INC     SI
			     C	                        MOV     AL, [SI]
			     C	                        CMP     AL, '$'
			     C	                        JNZ     PRINT3
			     C	                    ;}
			     C	ENDM MENU
				INCLUDE GHOST.INC
			     C	GHOSTWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, GMODC
				, GMODR
			     C	;GHOSTBUSTERS
			     C	;{ THIS BLOCK DRAW GHOST WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,250 ; Y = 250
			     C	    MOV CX,400 ; X = 400
			     C	
			     C	    MOV AL,04
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'G'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(G) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,270
			     C	                JA D
			     C	                INT 10H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-8


			     C	                JMP CON
			     C	                D: CMP DX,290 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'H'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;} 
			     C	        ;{ VERTICAL LINS OF 'O'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	         ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,275
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;} 
			     C	        SUB CX,215 
			     C	        INC DX
			     C	        CMP DX,310
			     C	        JNZ COL
			     C	    MOV DX,250      
			     C	    INC CX
			     C	    CMP CX,410
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ;{ MODIFICATION TO 'G'
			     C	        MOV CX,420
			     C	        MOV DX,280
			     C	        GMODR:
			     C	            GMODC:
			     C	                INT 10H
			     C	                INC CX
			     C	                CMP CX,440
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-9


			     C	            JNZ GMODC
			     C	        MOV CX,420
			     C	        INC DX
			     C	        CMP DX,290
			     C	        JNZ GMODR    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,400
			     C	    MOV DX,250
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        
			     C	        ;{ HORIZONTAL LINS OF 'H'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            ADD DX,25
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{ HORIZONTAL LINS OF 'O'
			     C	            SUB DX,25
			     C	            SUB CX,50
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'T'
			     C	            SUB DX,50
			     C	            ADD CX,50
			     C	            INT 10H
			     C	        ;}
			     C	        SUB CX,200
			     C	        INC CX
			     C	        CMP CX,440
			     C	        JNZ RW
			     C	    MOV CX,400
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-10


			     C	    INC DX
			     C	    CMP DX,260
			     C	    JNZ CLM
			     C	;}
			     C	ENDM GHOSTWORD
				INCLUDE BUSTERS.INC
			     C	BUSTERWORD MACRO
			     C	LOCAL ROW, COL, CON, CON2, CLM, RW, D, C, CN, R
				, L, CON3, T, CON4, CON5, CON6, CLMM, ROOW, K, 
				CON7, CON8, CON9, F, CON10
			     C	;{ THIS BLOCK DRAW BUSTER WORD 
			     C	    ;INITAL POINT
			     C	    MOV DX,320 ; Y = 320
			     C	    MOV CX,380 ; X = 380
			     C	
			     C	    MOV AL,01
			     C	    MOV AH,0CH
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF BUSTER W
				ORD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ VERTICAL LINS OF 'B'
			     C	         INT 10H 
			     C	         ADD CX,30
			     C	            ;{ IF(B) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA D
			     C	                INT 10H
			     C	                JMP CON
			     C	                D: CMP DX,355 
			     C	                JB CON
			     C	                INT 10H
			     C	            ;}
			     C	        ;}   
			     C	        CON:
			     C	        ;{ VERTICAL LINS OF 'U'
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,30
			     C	            INT 10H
			     C	        ;}
			     C	        ;{ VERTICAL LINS OF 'S' 
			     C	         ADD CX,20
			     C	            ;{ IF(S) WE HANDLE IT'S VERTICAL LI
				NES 
			     C	                CMP DX,345
			     C	                JA C
			     C	                INT 10H
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,30
			     C	                INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-11


			     C	                SUB CX,30
			     C	            ;}
			     C	         CON2:
			     C	            ;{ VERTICAL LINS OF 'T' 
			     C	                ADD CX,65
			     C	                INT 10H
			     C	            ;}
			     C	        ;} 
			     C	 
			     C	        ;{ VERTICAL LINS OF 'E'
			     C	            ADD CX,35
			     C	            INT 10H
			     C	         ;}
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD CX,30
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,345
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,355 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
			     C	        CN:
			     C	        SUB CX,280 
			     C	        INC DX
			     C	        CMP DX,380
			     C	        JNZ COL
			     C	    MOV DX,320      
			     C	    INC CX
			     C	    CMP CX,390
			     C	    JNZ ROW    
			     C	    ;}
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV DX,320
			     C	    MOV CX,380
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'B'
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(B) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,415
			     C	                JA T
			     C	                INT 10H
			     C	                JMP CON4
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-12


			     C	                T: CMP DX,345 
			     C	                JA CON3
			     C	                INT 10H
			     C	                CON3: CMP DX,355
			     C	                JB CON4
			     C	                INT 10H
			     C	                CON4: ADD DX,10
			     C	                CMP CX,415
			     C	                JA L
			     C	                INT 10H
			     C	                JMP CON6
			     C	                L: CMP DX,345 
			     C	                JA CON5
			     C	                INT 10H
			     C	                CON5: CMP DX,355
			     C	                JB CON6
			     C	                INT 10H
			     C	                CON6:
			     C	                ADD DX,20
			     C	                INT 10H 
			     C	            ;}
			     C	        SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'U'
			     C	            ADD CX,50
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{ HORIZONTAL LINS OF 'S'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB DX,25
			     C	            ADD DX,50
			     C	            INT 10H
			     C	            SUB DX,50
			     C	            SUB CX,100
			     C	        ;}
			     C	    INC CX
			     C	    CMP CX,420
			     C	    JNZ RW
			     C	    MOV CX,380
			     C	    INC DX
			     C	    CMP DX,330
			     C	    JNZ CLM
			     C	;}
			     C	    MOV DX,320
			     C	    MOV CX,530
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMM: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-13


			     C	        ROOW:
			     C	        INT 10H
			     C	        ;{ HORIZONTAL LINS OF 'E'
			     C	            ADD CX,50
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            ADD DX,25
			     C	            INT 10H
			     C	            SUB CX,50
			     C	            SUB DX,50
			     C	        ;}
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD CX,100
			     C	            INT 10H
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,665
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,345 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,355
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,665
			     C	                JA F
			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,345 
			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,355
			     C	                JB CON9
			     C	                INT 10H
			     C	                CON9: 
			     C	            ;}
			     C	        SUB DX,30
			     C	        SUB CX,100
			     C	        ;}
			     C	
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,570
			     C	        JNZ ROOW
			     C	    MOV CX,530
			     C	    INC DX
			     C	    CMP DX,330
			     C	    JNZ CLMM
			     C	;}    
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-14


			     C	ENDM BUSTERWORD
				INCLUDE YWON.INC
			     C	YWN MACRO WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN
			     C	
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	       ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                CMP DX,STARTY + HEGITH / 2
			     C	                JA C
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	                SUB CX,WDTH - 10
			     C	                JMP CON2
			     C	                C: 
			     C	                ADD CX,WDTH / 2
			     C	                SUB CX,5
			     C	                INT 10H 
			     C	                ADD CX,5
			     C	                SUB CX,WDTH / 2
			     C	            ;}
			     C	
			     C	
			     C	         CON2:
			     C	         ;{     
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD CX,WDTH -10
			     C	                INT 10H
			     C	         
			     C	         ;}
			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-15


			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	         ;{
			     C	            ADD CX,30
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	         ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	         ;}
			     C	
			     C	
			     C	          ;{
			     C	                 ADD CX,20
			     C	                 INT 10H
			     C	                 ADD CX,WDTH - 7
			     C	                 INT 10H         
			     C	           ;}
			     C	         SUB CX,6*WDTH + 53
			     C	           
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
			     C	    JNZ ROW    
			     C	    ;}
			     C	
			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY + HEGITH / 2
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD DX,HEGITH / 2 - 10
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-16


			     C	            ADD CX, WDTH + 10
			     C	            INT 10H
			     C	            SUB DX, HEGITH - 10
			     C	            INT 10H
			     C	            ADD DX,HEGITH -10
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,WDTH + 20
			     C	            INT 10H
			     C	        ;}
			     C	        ;{
			     C	            ADD CX,WDTH + 10
			     C	            INT 10H
			     C	            SUB DX,HEGITH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            SUB CX,4*WDTH+50
			     C	            ADD DX,HEGITH/2
			     C	        ;}
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY + HEGITH / 2 + 10
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + 5* WDTH + 70 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + 6* WDTH + 57
			     C	        JNZ RWN
			     C	            ADD SI,1
			     C	            MOV CX,STARTX + 5* WDTH + 70
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-17


			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM YWN
				INCLUDE DRAW.INC
			     C	DRAW MACRO  WDTH,HEGITH,STARTX,STARTY,COLOR
			     C	LOCAL ROW, COL,C, CON2,CLM,CLMN,RW,RWN,CLMD,RWD
				,CLMDD,ROWDD,R,ROWRAW,ROWRAWW,CLMRAWW,K,CON8,CO
				N9,CON10,CON7,F
			     C	PUSH AX
			     C	PUSH CX
			     C	PUSH DX
			     C	PUSH BX
			     C	PUSH SI
			     C	PUSH DI
			     C	
			     C	
			     C	
			     C	   
			     C	          ;INITAL POINT
			     C	      ;INITAL POINT
			     C	    MOV DX,STARTY ; Y = 250
			     C	    MOV CX,STARTX ; X = 400
			     C	
			     C	    MOV AL,COLOR
			     C	    MOV AH,0CH
			     C	  
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROW: 
			     C	        COL:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	                ADD CX, WDTH - 10
			     C	                INT 10H
			     C	            ;}
			     C	         CON2:
			     C	         SUB CX,WDTH - 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COL
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + 10
			     C	    JNZ ROW    
			     C	    ;}
			     C	
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-18


			     C	
			     C	    ; BACK TO INTAIL POINT TO DRAW HORIZONTAL 
			     C	    MOV CX,STARTX
			     C	    MOV DX,STARTY 
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLM: 
			     C	        RW:
			     C	        ;{ HORIZONTAL LINS OF 'G'
			     C	            INT 10H
			     C	            ADD DX,HEGITH - 10
			     C	            INT 10H
			     C	        ;}
			     C	            SUB DX, HEGITH - 10
			     C	        INC CX
			     C	        CMP CX,STARTX + WDTH
			     C	        JNZ RW
			     C	    MOV CX,STARTX
			     C	    INC DX
			     C	    CMP DX,STARTY +  10 
			     C	    JNZ CLM
			     C	; }
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY
			     C	    MOV SI,STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMD: 
			     C	        RWD:
			     C	        ;{ HORIZONTAL LINS OF 'N'
			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            INC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWD
			     C	            ADD SI,1
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + 14
			     C	    JNZ CLMD
			     C	;}
			     C	
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + HEGITH
			     C	    MOV SI,STARTY + HEGITH
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 GHOST WORD
			     C	    CLMN: 
			     C	        RWN:
			     C	        ;{ HORIZONTAL LINS OF 'N'
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-19


			     C	            INT 10H
			     C	        ;}
			     C	            INC CX
			     C	            DEC DX
			     C	            CMP CX,STARTX + WDTH + 5
			     C	        JNZ RWN
			     C	            DEC SI
			     C	            MOV CX,STARTX + WDTH 
			     C	            MOV DX,SI
			     C	            CMP DX,STARTY + HEGITH -  14
			     C	    JNZ CLMN
			     C	;}
			     C	
			     C	    MOV CX,STARTX + WDTH 
			     C	    MOV DX,STARTY + 10
			     C	
			     C	    ;{ THIS DRAW ALL VERTICAL LINES OF GHOST WO
				RD
			     C	    ROWDD: 
			     C	        COLDD:
			     C	        ;{ IF(S) WE HANDLE IT'S VERTICAL LINES 
			     C	                INT 10H
			     C	            ;}
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH - 10
			     C	        JNZ COLDD
			     C	    MOV DX,STARTY +10      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 5
			     C	    JNZ ROWDD  
			     C	    ;}
			     C	    
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	
			     C	    ROWRAW: 
			     C	        COLRAW:
			     C	         ;{ VERTICAL LINS OF 'R'
			     C	            INT 10H
			     C	            ADD CX,WDTH - 10
			     C	                ;{ IF(R) WE HANDLE IT'S VERTICA
				L LINES 
			     C	                    CMP DX,STARTY +25
			     C	                    JA R
			     C	                    INT 10H
			     C	                    JMP CN
			     C	                    R: CMP DX,STARTY + 30 
			     C	                    JB CN
			     C	                    INT 10H
			     C	                ;}
			     C	         ;}
			     C	        CN:
			     C	        ;{
			     C	            ADD CX,20
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-20


			     C	            INT 10H
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	
			     C	        ;{
			     C	            ADD CX,20
			     C	            INT 10H
			     C	            ADD CX,WDTH/2
			     C	            SUB CX,5
			     C	            INT 10H
			     C	            SUB CX,WDTH/2
			     C	            ADD CX,5
			     C	            ADD CX,WDTH -10
			     C	            INT 10H
			     C	        ;}
			     C	         SUB CX, 3*WDTH + 10
			     C	        INC DX
			     C	        CMP DX,STARTY + HEGITH
			     C	        JNZ COLRAW
			     C	    MOV DX,STARTY      
			     C	    INC CX
			     C	    CMP CX,STARTX + WDTH + 25 
			     C	    JNZ ROWRAW    
			     C	    ;}
			     C	
			     C	
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    MOV DX, STARTY
			     C	    ;{ THIS BLOCK JUST DRAW HORIZONTAL LINES OF
				 BUSTER WORD
			     C	    CLMRAWW: 
			     C	        ROWRAWW:
			     C	        INT 10H
			     C	        ;{HORIZONTAL LINS OF 'R'
			     C	            ADD DX,20
			     C	            ;{ IF(R) WE HANDLE IT'S HORIZONTAL 
				LINES 
			     C	                CMP CX,STARTX + 2 * WDTH + 10
			     C	                JA K
			     C	                INT 10H
			     C	                JMP CON8
			     C	                K: CMP DX,STARTY + 25 
			     C	                JA CON8
			     C	                INT 10H
			     C	                CON7: CMP DX,STARTY + 35
			     C	                JB CON8
			     C	                INT 10H
			     C	                CON8: ADD DX,10
			     C	                CMP CX,STARTX + 2*WDTH + 10
			     C	                JA F
			     C	                INT 10H
			     C	                JMP CON9
			     C	                F: CMP DX,STARTY + 25  
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-21


			     C	                JA CON10
			     C	                INT 10H
			     C	                CON10: CMP DX,STARTY + 35
			     C	                JB CON9
			     C	                INT 10H
			     C	                
			     C	            ;}
			     C	            CON9:
			     C	            SUB DX,30
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 
			     C	                INT 10H
			     C	                ADD DX,HEGITH/2 -10
			     C	            ;} 
			     C	            ;{
			     C	                ADD CX,WDTH + 10
			     C	                INT 10H
			     C	                SUB CX,2*WDTH + 20
			     C	                SUB DX,HEGITH -10
			     C	            ;}
			     C	
			     C	        INC CX
			     C	        CMP CX,STARTX + 2* WDTH + 15
			     C	        JNZ ROWRAWW
			     C	    MOV CX,STARTX + WDTH + 15
			     C	    INC DX
			     C	    CMP DX,STARTY + 10
			     C	    JNZ CLMRAWW
			     C	;}  
			     C	
			     C	POP DI
			     C	POP SI
			     C	POP BX
			     C	POP DX
			     C	POP CX
			     C	POP AX
			     C	
			     C	ENDM DRAW
				INCLUDE DCOL.INC
			     C	;----------------------------------------------
				-----------------------------------------------
				--------------
			     C	;  MACRO CHECK IF THE COLLISION OF TWO SQUARE G
				RIDS GIVEN THEIR SIZE AND UPPER LEFT VERTIX (ST
				ART POSITION)
			     C	;  COLLISION_STATUS = 0 IF THERE IS A COLLISION
				 ELSE IT IS EQUAL TO ONE 
			     C	;----------------------------------------------
				-----------------------------------------------
				--------------
			     C	DETECT_COLLISION MACRO STARTPOS_1X, STARTPOS_1Y
				, SIZE_1, STARTPOS_2X, STARTPOS_2Y, SIZE_2, COL
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-22


				LISION_STATUS
			     C	    LOCAL COMMUTATEX, SKIP_COMMUTATEX, NO_COLLI
				SION, COMMUTEY, SKIP_COMMUTATEY, END_DETECT_COL
				L
			     C	    PUSH AX
			     C	    PUSH BX
			     C	    PUSH CX
			     C	    PUSH DX
			     C	    PUSH BP
			     C	        ;DIVIDE THE FIRST SIZE BY 2
			     C	        MOV CX, SIZE_1
			     C	        SHR CX, 1
			     C	        ;DIVIDE THE SECOND SIZE BY 2
			     C	        MOV DX, SIZE_2
			     C	        SHR DX, 1
			     C	        ;GET THE SUPPOSED DISTANCE BETWEEN THEI
				R CENTERS
			     C	        MOV BP , 0
			     C	        ADD BP, DX
			     C	        ADD BP, CX
			     C	        ;INORDER TO MAKE SURE THE TWO SQUARES A
				RE COLLIDING NOT ONLY PASSING BY
			     C	        SUB BP ,3 
			     C	        ;GET THE ACTUAL DISTANCE BETWEEN THEIR 
				CENTERS
			     C	        ;GET THE CENTER X COORDINATE OF BOTH
			     C	        MOV AX, STARTPOS_1X
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2X
			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO X COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
				ERS IN X
			     C	        CMP AX,BX
			     C	        JL COMMUTATEX
			     C	        SUB AX ,BX
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEX
			     C	        COMMUTATEX: 
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEX:
			     C	        ;MAKE SIMILAR CHECKS TO THE ABOVE BUT I
				N Y COORDINATES
			     C	        MOV AX, STARTPOS_1Y
			     C	        ADD AX, CX
			     C	        MOV BX, STARTPOS_2Y
			     C	        ADD BX, DX
			     C	        ;SUBTRACT THE TWO Y COORDINATES TO GET 
				THE ACTUAL ABSOLUTE DISTANCE BETWEEN THEIR CENT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-23


				ERS IN Y
			     C	        CMP AX, BX
			     C	        JL COMMUTEY
			     C	        SUB AX,BX
			     C	        ;COMPARE WITH THE REQUIRED DISTANCE FOR
				 COLLISION
			     C	        CMP AX, BP
			     C	        JA NO_COLLISION
			     C	        JMP SKIP_COMMUTATEY
			     C	        COMMUTEY:
			     C	        ;{
			     C	            SUB BX, AX
			     C	            CMP BX, BP
			     C	            JA NO_COLLISION
			     C	        ;}    
			     C	        SKIP_COMMUTATEY:
			     C	        ;THEN THE TWO SQUARES COLLIDE
			     C	        MOV COLLISION_STATUS, 0
			     C	        JMP END_DETECT_COLL
			     C	
			     C	    NO_COLLISION:
			     C	    MOV COLLISION_STATUS, 1    
			     C	    END_DETECT_COLL:   
			     C	    POP BP
			     C	    POP DX
			     C	    POP CX
			     C	    POP BX
			     C	    POP AX
			     C	ENDM DETECT_COLLISION
				 .MODEL   LARGE;TINY   :DATA+CODE = 64KB    
				            ;SMALL  :DATA = 64KB AND CODE = 64K
				B
				            ;MEDIUM :DATA = 64KB BUT NO CODE RE
				STRICTION
				            ;COMPACT:CODE = 64KB BUT NO DATA RE
				STRICTION
				            ;LARGE  :SINGLE SET OF DATA CAN NOT
				 EXCEED 64KB
				            ;HUGE   :NO RESTRICTION
				;----------------------------------------------
				--------
				.STACK 64   ;64 BYTES FOR STACK      
				;----------------------------------------------
				--------                    
				.DATA                           
 0000  0037			UPPERBOUND_Y DW 55   ;THOSE BOUNDARY VALUES ARE
				 BASED ON 640*400 VIDEO MODE
 0002  0168			LOWERBOUND_Y DW 360
 0004  0000			LEFTBOUND_X DW 0
 0006  0280			RIGHTBOUND_X DW 640
				
 0008  00			BUFFER DB 0                    
 0009  0032			STARTPOS_X_PLAYER1 DW 50
 000B  0096			STARTPOS_Y_PLAYER1 DW 150
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-24


 000D  000A			TANK_HP_1 DW 10
 000F  0003			TANK_SPEED_1 DW 3
 0011  0001			TANK_DMG_1 DW 1                   ;DMG == DAMAG
				E OR STRENGTH                   
 0013  0002			ORIENTATION_PLAYER1 DW 2          ; (0 UP, 1 UP
				RIGHT, 2 RIGHT, 3 DOWNRIGHT, 4 DOWN)
				
 0015  0064			BULLET_1_START_POSITION_X DW 100  ;THE END POIN
				T OF TANK 1 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0017  00AF			BULLET_1_START_POSITION_Y DW 175
				
 0019  0226			STARTPOS_X_PLAYER2 DW 550
 001B  0096			STARTPOS_Y_PLAYER2 DW 150
 001D  000A			TANK_HP_2 DW 10
 001F  0003			TANK_SPEED_2 DW 3
 0021  0001			TANK_DMG_2 DW 1           ;DMG == DAMAGE OR STR
				ENGTH                     
 0023  0002			ORIENTATION_PLAYER2 DW 2  ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
				
 0025  0005			HEARTS_1_START_POSITION_X DW 5
 0027  000A			HEARTS_1_START_POSITION_Y DW 10
				
 0029  01AE			HEARTS_2_START_POSITION_X DW 430
 002B  000A			HEARTS_2_START_POSITION_Y DW 10
				
 002D  0005			PWRUP_BAR_1_START_POSITION_X DW 5
 002F  0020			PWRUP_BAR_1_START_POSITION_Y DW 32
				
 0031  01AE			PWRUP_BAR_2_START_POSITION_X DW 430
 0033  0020			PWRUP_BAR_2_START_POSITION_Y DW 32
				
 0035  0226			BULLET_2_START_POSITION_X DW 550  ;THE END POIN
				T OF TANK 2 CANON SPECIFIED ACCORDING TO THE TA
				NK POS AND ORIENTATION
 0037  00AF			BULLET_2_START_POSITION_Y DW 175
				
 0039  0064			BULLET_1_POSITION_X DW 100 ;THE POSITION OF THE
				 BULLET 1 AT ANY TIME AFTER IT IS FIRED
 003B  00AF			BULLET_1_POSITION_Y DW 175
 003D  0000			BULLET_1_STATUS DW 0  ;BULLET 1 EXISTS OR NOT 0
				 -> NOT EXISTING
 003F  0002			BULLET_1_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 0041  000A			BULLET_1_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 0043  0000			BULLET_1_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER1 INCREASE HIS BULLET SPEED 
				
 0045  0226			BULLET_2_POSITION_X DW 550 ;THE POSITION OF THE
				 BULLET 2 AT ANY TIME AFTER IT IS FIRED
 0047  00AF			BULLET_2_POSITION_Y DW 175
 0049  0000			BULLET_2_STATUS DW 0  ;BULLET 2 EXISTS OR NOT 0
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-25


				 -> NOT EXISTING
 004B  0002			BULLET_2_MOTION_TYPE DW 2 ; (0 UP, 1 UPLEFT, 2 
				LEFT, 3 DOWNLEFT, 4 DOWN)
 004D  000A			BULLET_2_SPEED DW 10 ;INITIAL BULLET SPEED WITH
				OUT ANY POWERUPS
 004F  0000			BULLET_2_SPEED_POWER_NUM DW 0 ;TO KEEP TRACK HO
				W MANY TIMES PLAYER2 INCREASE HIS BULLET SPEED 
				
 0051  0002			BULLET_SPEED_POWERUPS DW 2 ;EVERY SPEED POWERUP
				 THE SPEED WILL INCREASE BY 2 (BUT HAVE LIMIT 3
				 TIMES AT MOST)
				
				
 0053  0000			STARTPOS_X_GHOST1 DW ?
 0055  0000			STARTPOS_Y_GHOST1 DW ?
 0057  0000			EXISTS_GHOST1 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0059  0000			MOTION_GHOST1 DW 0   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 005B  0000			POWERUP_GHOST1 DW 0  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE 
 005D  0000			STARTPOS_X_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 005F  0000			STARTPOS_Y_PORTAL1 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0061  0000			TYPE_GHOST1 DW 0     ; TO CHOOSE ONE OF THREE S
				HAPES OF GHOSTS  (0, 1, 2)
				
				
 0063  0000			STARTPOS_X_GHOST2 DW ?
 0065  0000			STARTPOS_Y_GHOST2 DW ?
 0067  0000			EXISTS_GHOST2 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0069  0001			MOTION_GHOST2 DW 1   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 006B  0001			POWERUP_GHOST2 DW 1  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
 006D  0000			STARTPOS_X_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 006F  0000			STARTPOS_Y_PORTAL2 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 0071  0000			TYPE_GHOST2 DW 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
 0073  0000			STARTPOS_X_GHOST3 DW ?
 0075  0000			STARTPOS_Y_GHOST3 DW ?
 0077  0000			EXISTS_GHOST3 DW 0   ; 0 DOESN'T EXIST 1 EXISTS
 0079  0002			MOTION_GHOST3 DW 2   ; 0 INC X AND Y, 1 INC Y D
				EC X , 2 INC X DEC Y, 3 DEC X AND Y
 007B  0002			POWERUP_GHOST3 DW 2  ; 0 INCREASE HP, 1 INCREAS
				E SPEED, 2 INCREASE DAMAGE
 007D  0000			STARTPOS_X_PORTAL3 DW ? ;LOCATION OF THE GHOST 
				PORTAL
 007F  0000			STARTPOS_Y_PORTAL3 DW ? ;LOCATION OF THE GHOST 
				PORTAL
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-26


 0081  0000			TYPE_GHOST3 DW 0     ;TO CHOOSE ONE OF THREE SH
				PAES OF GHOSTS  (0, 1, 2)
				
				
				
 0083  0078			TIME DW 120           ; TIMER TERMINATES THE GA
				ME WHEN ZERO
 0085  0004[			TIME_DECIMAL DB 4 DUP('$')    ;FOR DECIMAL REPR
				ESENTAION OF TIME ON SCREEN
	   24			
			 ]	
				
 0089  6255			RANDSEED DW 25173                ;RANDSEED USED
				 FOR RANDOMIZATION
 008B  00			PREV_SYS_SECOND  DB ?
 008C  0000			LOWER4MACRO DW ?
 008E  0000			UPPER4MACRO DW ?
				
				
 0090  0032			TANKSIZE DW 50       ; SIZE OF ANY DRAWN TANK
 0092  0032			PORTAL_SIZE DW 50    ;SIZE OF THE GHOST PORTAL 
 0094  0028			GHOSTSIZE DW 40      ; SIZE OF ANY GHOST
 0096  000A			BULLETSIZE DW 10     ; SIZE OF A BULLET
 0098  0014			HEARTSIZE DW 20      ;SIZE OF A HEART
 009A  0014			PRUP_ICON_SIZE DW 20 ;SIZE OF THE POWER-UP ICON
				S 
 009C  0068			LOGOSIZE DW 104      ;SIZE OF LOGO IN THE INTER
				FACE
				
 009E  0000			WINNER DW ?          ;THE WINNNER PLAYER NUMBER
				
 00A0  01DB			LOGO_X DW 475        ;POSITION OF LOGO IN INTER
				FACE
 00A2  007D			LOGO_Y DW 125        ;POSITION OF LOGO IN INTER
				FACE
				
 00A4  50 52 45 53 53 20	MENUITEM1 DB 'PRESS F1 TO START CHATTING$'
       46 31 20 54 4F 20	
       53 54 41 52 54 20	
       43 48 41 54 54 49	
       4E 47 24			
 00BF  50 52 45 53 53 20	MENUITEM2 DB 'PRESS F2 TO START THE GAME$'
       46 32 20 54 4F 20	
       53 54 41 52 54 20	
       54 48 45 20 47 41	
       4D 45 24			
 00DA  50 52 45 53 53 20	MENUITEM3 DB 'PRESS ESC TO EXIT THE PROGRAM',10
				,13,'$'
       45 53 43 20 54 4F	
       20 45 58 49 54 20	
       54 48 45 20 50 52	
       4F 47 52 41 4D 0A	
       0D 24			
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-27


				
				;----------------------------------------------
				-----------------------------------------------
				------------
				.CODE                                          
				       
 0000				MAIN                PROC         
 0000  B8 ---- R		   MOV     AX,@DATA   
 0003  8E D8			   MOV     DS,AX
 0005  8E C0			   MOV     ES,AX      
				 
 0007  E8 1F61 R		 CALL MAIN_MENU
				 
				;{PUT INITIAL VAULE FOR THE SEED
				   
 000A  B4 00			   MOV   AH, 0
 000C  CD 1A			   INT   1AH
 000E  89 16 0089 R		   MOV   RANDSEED, DX    ; SEED WITH THE SYSTEM
				 TIME
				
				;}
 0012				   MAINLOOP:
				   ;{
 0012  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 0015  BB 0100			         MOV    BX, 100H
 0018  CD 10			         INT    10H
				
				         PRINTNUM     TIME, TIME_DECIMAL    ;ma
				cro to display time
 001A  C6 06 0085 R 30       1	   mov TIME_DECIMAL, '0' 
 001F  C6 06 0086 R 30       1	   mov TIME_DECIMAL + 1, '0' 
 0024  BB 000A               1	   MOV BX, 10 
 0027  BE 0085 R             1	   MOV SI, OFFSET TIME_DECIMAL 
 002A  83 C6 03              1	   ADD SI, 3 
 002D  4E                    1	   DEC SI 
 002E  A1 0083 R             1	   MOV AX, TIME 
 0031                        1	   ??0000: 
 0031  2B D2                 1	      SUB DX, DX 
 0033  F7 F3                 1	      DIV BX 
 0035  80 CA 30              1	      OR DL, 30H 
 0038  88 14                 1	      MOV [SI], DL 
 003A  4E                    1	      DEC SI 
 003B  3D 0000               1	      CMP AX, 0 
 003E  77 F1                 1	      JA ??0000 
 0040  B4 02                 1	   MOV AH, 2 
 0042  B6 01                 1	   MOV DH, 1    ;Y POSITION FOR PRINTING 
 0044  B2 23                 1	   MOV DL, 35    ;X POSITION FOR PRINTING 
 0046  CD 10                 1	   INT 10H 
 0048  B4 09                 1	   MOV AH, 9H      ;PRINT THE NUMBER 
 004A  BA 0085 R             1	   MOV DX, OFFSET TIME_DECIMAL 
 004D  CD 21                 1	   INT 21H 
 004F  83 3E 0083 R 00		         CMP    TIME, 0                    ;END
				 GAME AT TIME 0
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-28


 0054  74 71			         JE     ENDPROGRAM1
 0056  B4 2C			         MOV    AH, 2CH
 0058  CD 21			         INT    21H
 005A  3A 36 008B R		         CMP    DH, PREV_SYS_SECOND
 005E  74 1B			         JE     NOTIMECHANGE
 0060  83 2E 0083 R 01		         SUB    TIME, 1                    ;DEC
				REASE THE 
 0065  A1 0083 R		         MOV    AX, TIME  ;TO CHECK IF 10 DIVID
				ES TIME THEN A NEW WAVE OF GHOST APPEAR
 0068  40			         INC    AX
 0069  B3 0A			         MOV    BL, 10
 006B  F6 F3			         DIV    BL
 006D  80 FC 00			         CMP    AH, 0
 0070  75 09			         JNE    NOGHOSTWAVE
				         ;{ IF IT'S TIME FOR NEW WAVE INITIALIZ
				E THEIR POSITIONS
 0072  E8 0610 R		               CALL    RANDOMIZE_GHOST1
 0075  E8 0789 R		               CALL    RANDOMIZE_GHOST2
 0078  E8 090D R		               CALL    RANDOMIZE_GHOST3
				         ;}
				         
				
 007B				         NOTIMECHANGE:
 007B				               NOGHOSTWAVE:
 007B  88 36 008B R		                     MOV    PREV_SYS_SECOND, DH
				       ;CURRENT SECOND IS PREVIOUS FOR NEXT TIM
				E
				                     
 007F  E8 0B52 R		                     CALL   MOVE_GHOST1
 0082  E8 0C71 R		                     CALL   MOVE_GHOST2
 0085  E8 0D92 R		                     CALL   MOVE_GHOST3
				
				               ;{CHECK FOR COLLISIONS BETWEEN T
				HE GHOSTS AND TANK 1 IF THE GHOST EXISTS
 0088  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 008D  75 03			                     JNE SKIP_GHOST1_CHECK1
 008F  E8 1784 R		                        CALL CHECK_HIT_GHOST1_T
				ANK1
 0092				                     SKIP_GHOST1_CHECK1:
				
 0092  83 3E 0067 R 01		                     CMP EXISTS_GHOST2, 1
 0097  75 03			                     JNE SKIP_GHOST2_CHECK1
 0099  E8 181A R		                        CALL CHECK_HIT_GHOST2_T
				ANK1
 009C				                     SKIP_GHOST2_CHECK1:
				
 009C  83 3E 0077 R 01		                     CMP EXISTS_GHOST3, 1
 00A1  75 03			                     JNE SKIP_GHOST3_CHECK1
 00A3  E8 18B0 R		                        CALL CHECK_HIT_GHOST3_T
				ANK1
 00A6				                     SKIP_GHOST3_CHECK1:
				               ;}
				
				               ;{SIMILAR CHECKS FOR COLLISIONS 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-29


				BETWEEN THE GHOSTS AND TANK 2 IF THE GHOST EXIS
				TS
 00A6  83 3E 0057 R 01		                     CMP EXISTS_GHOST1, 1
 00AB  75 03			                     JNE SKIP_GHOST1_CHECK2
 00AD  E8 1946 R		                        CALL CHECK_HIT_GHOST1_T
				ANK2
 00B0				                     SKIP_GHOST1_CHECK2:
				
 00B0  83 3E 0067 R 01		                     CMP EXISTS_GHOST2, 1
 00B5  75 03			                     JNE SKIP_GHOST2_CHECK2
 00B7  E8 19DC R		                        CALL CHECK_HIT_GHOST2_T
				ANK2
 00BA				                     SKIP_GHOST2_CHECK2:
				
 00BA  83 3E 0077 R 01		                     CMP EXISTS_GHOST3, 1
 00BF  75 03			                     JNE SKIP_GHOST3_CHECK3
 00C1  E8 1A72 R		                        CALL CHECK_HIT_GHOST3_T
				ANK2
 00C4				                     SKIP_GHOST3_CHECK3:
				               ;}
				
				               ;{USELESS BLOCK TO HANDLE JUMP O
				UT OF RANGE
 00C4  EB 04 90			                  JMP SKIP1
 00C7  E9 016E R		                  ENDPROGRAM1: JMP ENDPROGRAM
 00CA				                  SKIP1:
				               ;}
 00CA  E8 0DF2 R		                     CALL   DRAW_PORTALS
 00CD  E8 040C R		                     CALL   DRAW_TANK1
 00D0  E8 0509 R		                     CALL   DRAW_TANK2
 00D3  E8 1B08 R							      C
				ALL   DRAW_HEALTH_BAR_1
 00D6  E8 1B8A R						      	CALL   
				DRAW_HEALTH_BAR_2
 00D9  E8 0A91 R		                     CALL   DRAW_GHOST1
 00DC  E8 0BB0 R		                     CALL   DRAW_GHOST2
 00DF  E8 0CD1 R		                     CALL   DRAW_GHOST3
 00E2  E8 0F71 R		                     CALL MOVE_BULLET_1
 00E5  E8 10CC R		                     CALL MOVE_BULLET_2
				
				               ;{BEFORE CHECKING COLLISION WE M
				UST MAKE SURE THE BULLET EXISTS IN THE FIRST PL
				ACE
				                     ;CHECK HITTING ANY GHOST
 00E8  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00ED  75 03			                     JNE SKIP_BUL1_CHECKS1
 00EF  E8 11DD R		                           CALL CHECK_HIT_BUL1_
				GHOST1
 00F2				                     SKIP_BUL1_CHECKS1:
				
 00F2  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 00F7  75 03			                     JNE SKIP_BUL1_CHECKS2
 00F9  E8 12A0 R		                           CALL CHECK_HIT_BUL1_
				GHOST2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-30


 00FC				                     SKIP_BUL1_CHECKS2:
				
 00FC  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0101  75 03			                     JNE SKIP_BUL1_CHECKS3
 0103  E8 1363 R		                           CALL CHECK_HIT_BUL1_
				GHOST3
 0106				                     SKIP_BUL1_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 0106  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 010B  75 03			                     JNE SKIP_BUL1_CHECKS4
 010D  E8 1149 R		                           CALL CHECK_HIT_BUL1_
				TANK2
 0110				                     SKIP_BUL1_CHECKS4:
				               ;}
				
				               ;{SIMILAR CHECKS FOR BULLET 2
				                     ;CHECK HITTING ANY GHOST
 0110  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0115  75 03			                     JNE SKIP_BUL2_CHECKS1
 0117  E8 14BA R		                           CALL CHECK_HIT_BUL2_
				GHOST1
 011A				                     SKIP_BUL2_CHECKS1:
				
 011A  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 011F  75 03			                     JNE SKIP_BUL2_CHECKS2
 0121  E8 157D R		                           CALL CHECK_HIT_BUL2_
				GHOST2
 0124				                     SKIP_BUL2_CHECKS2:
				
 0124  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0129  75 03			                     JNE SKIP_BUL2_CHECKS3
 012B  E8 1640 R		                           CALL CHECK_HIT_BUL2_
				GHOST3
 012E				                     SKIP_BUL2_CHECKS3:
				                     ;MAKE SURE IT STILL EXISTS
				 CHECK HITTING THE TANK
 012E  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1
 0133  75 03			                     JNE SKIP_BUL2_CHECKS4
 0135  E8 1426 R		                           CALL CHECK_HIT_BUL2_
				TANK1
 0138				                     SKIP_BUL2_CHECKS4:
				               ;}
				
				               ;{DRAW POWER-UP BARS
 0138  E8 1C0F R		                  CALL DRW_PRUP_BAR_1
 013B  E8 1C90 R		                  CALL DRW_PRUP_BAR_2
				               ;}
				               
				               ;{CHECK IF THE TWO BULLETS COLLI
				DE
 013E  83 3E 003D R 01		                     CMP BULLET_1_STATUS,1
 0143  75 0A			                     JNE SKIP_HITTING_CHECK
 0145  83 3E 0049 R 01		                     CMP BULLET_2_STATUS,1 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-31


 014A  75 03			                     JNE SKIP_HITTING_CHECK
 014C  E8 1703 R		                        CALL BULLETS_HIT
 014F				                     SKIP_HITTING_CHECK:
				               ;}
				
 014F  E8 0EC0 R		                     CALL DRAW_BULLET_1
 0152  E8 101F R		                     CALL DRAW_BULLET_2
				                    
				
				               ;{ DELAY 0.125 SECOND  WHERE DEL
				AY IN MELLISECOND IS CXDX  CX AND MSB AND DX AS
				 LSB
 0155  B9 0000			                     MOV     CX, 00H
 0158  BA C350			                     MOV     DX, 0C350H
 015B  B4 86			                     MOV     AH, 86H
 015D  CD 15			                     INT     15H
				               ;}
				               
				               ;{ IF(USER PRESS ANY KEY)
 015F  B4 01			                     MOV    AH, 1
 0161  CD 16			                     INT    16H
 0163  75 03			                     JNZ    CHECKKEY
				               ;}
 0165  E9 0012 R		                     JMP    MAINLOOP
 0168				            CHECKKEY:
				               ;{
 0168  E8 0318 R		                     CALL   USERINPUT
 016B  E9 0012 R		                     JMP    MAINLOOP
				               ;}
				
				
 016E				            ENDPROGRAM: 
				               ;{       
 016E  A1 001D R		                    MOV AX, TANK_HP_2
 0171  39 06 000D R		                    CMP TANK_HP_1,AX
 0175  74 14			                    JE DRAW_CASE
 0177  77 09			                    JA PLAYER1_WON
 0179  C7 06 009E R 0002	                    MOV WINNER,2
 017F  EB 07 90			                    JMP RESULT
				
 0182				                    PLAYER1_WON:
 0182  C7 06 009E R 0001	                    MOV WINNER,1
				
 0188				                    RESULT:
 0188  E8 1D11 R		                    CALL PLAYER_LOST
				
 018B				                  DRAW_CASE :
				                  ;(
				                    DRAW 60,60,190,190,03
 018B  50                    1	PUSH AX 
 018C  51                    1	PUSH CX 
 018D  52                    1	PUSH DX 
 018E  53                    1	PUSH BX 
 018F  56                    1	PUSH SI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-32


 0190  57                    1	PUSH DI 
 0191  BA 00BE               1	    MOV DX,190 ; Y = 250 
 0194  B9 00BE               1	    MOV CX,190 ; X = 400 
 0197  B0 03                 1	    MOV AL,03 
 0199  B4 0C                 1	    MOV AH,0CH 
 019B                        1	    ??0001: 
 019B                        1	        ??0002: 
 019B  CD 10                 1	                INT 10H 
 019D  83 C1 32              1	                ADD CX, 60 - 10 
 01A0  CD 10                 1	                INT 10H 
 01A2                        1	         ??0004: 
 01A2  83 E9 32              1	         SUB CX,60 - 10 
 01A5  42                    1	        INC DX 
 01A6  81 FA 00FA            1	        CMP DX,190 + 60 
 01AA  75 EF                 1	        JNZ ??0002 
 01AC  BA 00BE               1	    MOV DX,190 
 01AF  41                    1	    INC CX 
 01B0  81 F9 00C8            1	    CMP CX,190 + 10 
 01B4  75 E5                 1	    JNZ ??0001 
 01B6  B9 00BE               1	    MOV CX,190 
 01B9  BA 00BE               1	    MOV DX,190 
 01BC                        1	    ??0005: 
 01BC                        1	        ??0007: 
 01BC  CD 10                 1	            INT 10H 
 01BE  83 C2 32              1	            ADD DX,60 - 10 
 01C1  CD 10                 1	            INT 10H 
 01C3  83 EA 32              1	            SUB DX, 60 - 10 
 01C6  41                    1	        INC CX 
 01C7  81 F9 00FA            1	        CMP CX,190 + 60 
 01CB  75 EF                 1	        JNZ ??0007 
 01CD  B9 00BE               1	    MOV CX,190 
 01D0  42                    1	    INC DX 
 01D1  81 FA 00C8            1	    CMP DX,190 +  10 
 01D5  75 E5                 1	    JNZ ??0005 
 01D7  B9 00FA               1	    MOV CX,190 + 60 
 01DA  BA 00BE               1	    MOV DX,190 
 01DD  BE 00BE               1	    MOV SI,190 
 01E0                        1	    ??0009: 
 01E0                        1	        ??000A: 
 01E0  CD 10                 1	            INT 10H 
 01E2  41                    1	            INC CX 
 01E3  42                    1	            INC DX 
 01E4  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 01E8  75 F6                 1	        JNZ ??000A 
 01EA  83 C6 01              1	            ADD SI,1 
 01ED  B9 00FA               1	            MOV CX,190 + 60 
 01F0  8B D6                 1	            MOV DX,SI 
 01F2  81 FA 00CC            1	            CMP DX,190 + 14 
 01F6  75 E8                 1	    JNZ ??0009 
 01F8  B9 00FA               1	    MOV CX,190 + 60 
 01FB  BA 00FA               1	    MOV DX,190 + 60 
 01FE  BE 00FA               1	    MOV SI,190 + 60 
 0201                        1	    ??0006: 
 0201                        1	        ??0008: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-33


 0201  CD 10                 1	            INT 10H 
 0203  41                    1	            INC CX 
 0204  4A                    1	            DEC DX 
 0205  81 F9 00FF            1	            CMP CX,190 + 60 + 5 
 0209  75 F6                 1	        JNZ ??0008 
 020B  4E                    1	            DEC SI 
 020C  B9 00FA               1	            MOV CX,190 + 60 
 020F  8B D6                 1	            MOV DX,SI 
 0211  81 FA 00EC            1	            CMP DX,190 + 60 -  14 
 0215  75 EA                 1	    JNZ ??0006 
 0217  B9 00FA               1	    MOV CX,190 + 60 
 021A  BA 00C8               1	    MOV DX,190 + 10 
 021D                        1	    ??000C: 
 021D                        1	        COLDD: 
 021D  CD 10                 1	                INT 10H 
 021F  42                    1	        INC DX 
 0220  81 FA 00F0            1	        CMP DX,190 + 60 - 10 
 0224  75 F7                 1	        JNZ COLDD 
 0226  BA 00C8               1	    MOV DX,190 +10 
 0229  41                    1	    INC CX 
 022A  81 F9 00FF            1	    CMP CX,190 + 60 + 5 
 022E  75 ED                 1	    JNZ ??000C 
 0230  B9 0109               1	    MOV CX,190 + 60 + 15 
 0233  BA 00BE               1	    MOV DX, 190 
 0236                        1	    ??000E: 
 0236                        1	        COLRAW: 
 0236  CD 10                 1	            INT 10H 
 0238  83 C1 32              1	            ADD CX,60 - 10 
 023B  81 FA 00D7            1	                    CMP DX,190 +25 
 023F  77 05                 1	                    JA ??000D 
 0241  CD 10                 1	                    INT 10H 
 0243  EB 09 90              1	                    JMP CN 
 0246  81 FA 00DC            1	                    ??000D: CMP DX,190 + 30 
 024A  72 02                 1	                    JB CN 
 024C  CD 10                 1	                    INT 10H 
 024E                        1	        CN: 
 024E  83 C1 14              1	            ADD CX,20 
 0251  CD 10                 1	            INT 10H 
 0253  83 C1 32              1	            ADD CX,60 -10 
 0256  CD 10                 1	            INT 10H 
 0258  83 C1 14              1	            ADD CX,20 
 025B  CD 10                 1	            INT 10H 
 025D  83 C1 1E              1	            ADD CX,60/2 
 0260  83 E9 05              1	            SUB CX,5 
 0263  CD 10                 1	            INT 10H 
 0265  83 E9 1E              1	            SUB CX,60/2 
 0268  83 C1 05              1	            ADD CX,5 
 026B  83 C1 32              1	            ADD CX,60 -10 
 026E  CD 10                 1	            INT 10H 
 0270  81 E9 00BE            1	         SUB CX, 3*60 + 10 
 0274  42                    1	        INC DX 
 0275  81 FA 00FA            1	        CMP DX,190 + 60 
 0279  75 BB                 1	        JNZ COLRAW 
 027B  BA 00BE               1	    MOV DX,190 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-34


 027E  41                    1	    INC CX 
 027F  81 F9 0113            1	    CMP CX,190 + 60 + 25 
 0283  75 B1                 1	    JNZ ??000E 
 0285  B9 0109               1	    MOV CX,190 + 60 + 15 
 0288  BA 00BE               1	    MOV DX, 190 
 028B                        1	    ??0010: 
 028B                        1	        ??000F: 
 028B  CD 10                 1	        INT 10H 
 028D  83 C2 14              1	            ADD DX,20 
 0290  81 F9 0140            1	                CMP CX,190 + 2 * 60 + 10 
 0294  77 05                 1	                JA ??0011 
 0296  CD 10                 1	                INT 10H 
 0298  EB 11 90              1	                JMP ??0012 
 029B  81 FA 00D7            1	                ??0011: CMP DX,190 + 25 
 029F  77 0A                 1	                JA ??0012 
 02A1  CD 10                 1	                INT 10H 
 02A3  81 FA 00E1            1	                ??0015: CMP DX,190 + 35 
 02A7  72 02                 1	                JB ??0012 
 02A9  CD 10                 1	                INT 10H 
 02AB  83 C2 0A              1	                ??0012: ADD DX,10 
 02AE  81 F9 0140            1	                CMP CX,190 + 2*60 + 10 
 02B2  77 05                 1	                JA ??0016 
 02B4  CD 10                 1	                INT 10H 
 02B6  EB 11 90              1	                JMP ??0013 
 02B9  81 FA 00D7            1	                ??0016: CMP DX,190 + 25 
 02BD  77 02                 1	                JA ??0014 
 02BF  CD 10                 1	                INT 10H 
 02C1  81 FA 00E1            1	                ??0014: CMP DX,190 + 35 
 02C5  72 02                 1	                JB ??0013 
 02C7  CD 10                 1	                INT 10H 
 02C9                        1	            ??0013: 
 02C9  83 EA 1E              1	            SUB DX,30 
 02CC  83 C1 46              1	                ADD CX,60 + 10 
 02CF  CD 10                 1	                INT 10H 
 02D1  83 C2 1E              1	                ADD DX,60/2 
 02D4  CD 10                 1	                INT 10H 
 02D6  83 C2 14              1	                ADD DX,60/2 -10 
 02D9  83 C1 46              1	                ADD CX,60 + 10 
 02DC  CD 10                 1	                INT 10H 
 02DE  81 E9 008C            1	                SUB CX,2*60 + 20 
 02E2  83 EA 32              1	                SUB DX,60 -10 
 02E5  41                    1	        INC CX 
 02E6  81 F9 0145            1	        CMP CX,190 + 2* 60 + 15 
 02EA  75 9F                 1	        JNZ ??000F 
 02EC  B9 0109               1	    MOV CX,190 + 60 + 15 
 02EF  42                    1	    INC DX 
 02F0  81 FA 00C8            1	    CMP DX,190 + 10 
 02F4  75 95                 1	    JNZ ??0010 
 02F6  5F                    1	POP DI 
 02F7  5E                    1	POP SI 
 02F8  5B                    1	POP BX 
 02F9  5A                    1	POP DX 
 02FA  59                    1	POP CX 
 02FB  58                    1	POP AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-35


 02FC  B4 4C			                    MOV    AH,4CH
 02FE  CD 21			                    INT    21H
				                  ;)  
				               ;}
 0300				MAIN                ENDP   
				
				;----------------------------------------------
				--------------------------------------
				;  _    _   _____  ______  _____    _____  _   
				_  _____   _    _  _______  
				; | |  | | / ____||  ____||  __ \  |_   _|| \ |
				 ||  __ \ | |  | ||__   __| 
				; | |  | || (___  | |__   | |__) |   | |  |  \|
				 || |__) || |  | |   | |    
				; | |  | | \___ \ |  __|  |  _  /    | |  | . `
				 ||  ___/ | |  | |   | |    
				; | |__| | ____) || |____ | | \ \   _| |_ | |\ 
				 || |     | |__| |   | |    
				;  \____/ |_____/ |______||_|  \_\ |_____||_| \
				_||_|      \____/    |_|    
				;----------------------------------------------
				--------------------------------------         
				                                               
				                 
				                                               
				                           
				
				;----------------------------------------------
				--------------------------
				; CLEARS KEYBOARD BUFFER
				;----------------------------------------------
				----------------------------
 0300				CLEARKEYBOARDBUFFER		PROC NEAR
 0300  50				PUSH		AX
 0301  06				PUSH		ES
 0302  B8 0000				MOV		AX, 0000H
 0305  8E C0				MOV		ES, AX
 0307  26: C7 06 041A 041E		MOV		ES:[041AH], 041EH
 030E  26: C7 06 041C 041E		MOV		ES:[041CH], 041EH
								; CLEARS KEYBOA
				RD BUFFER
 0315  07				POP		ES
 0316  58				POP		AX
 0317  C3				RETN
 0318				CLEARKEYBOARDBUFFER		ENDP 
				
				;----------------------------------------------
				--------------------------
				; TAKE ACTION BASED ON USER INPUT
				;----------------------------------------------
				----------------------------
 0318				USERINPUT PROC NEAR 
				;{    
				      ;{SAVE DATA
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-36


 0318  50			         PUSH    AX
 0319  53			         PUSH    BX
 031A  51			         PUSH    CX
 031B  52			         PUSH    DX
				      ;}
				      ;{ TAKE THE USER INPUT FROM THE KEYBOARD 
				BUFFER
 031C  B4 00			         MOV    AH, 0
 031E  CD 16			         INT    16H      
 0320  E8 0300 R		         CALL   CLEARKEYBOARDBUFFER  
				      ;} 
				   
 0323				      MOVEUP1:
				      ;{
 0323  3C 77			         CMP    AL, 'w' 
 0325  75 17			         JNE    MOVEDOWN1
 0327  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 032B  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 032F  2B CB			         SUB    CX, BX
 0331  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0334  7C 4A			         JL     BACKTOMAINLOOP_1
 0336  83 2E 000B R 03		         SUB    STARTPOS_Y_PLAYER1, 3
 033B  EB 43 90			         JMP    BACKTOMAINLOOP_1     
				      ;}
				      
 033E				      MOVEDOWN1:
				      ;{
 033E  3C 73			         CMP    AL, 's' 
 0340  75 1B			         JNE    ORIENT_UP1
 0342  8B 0E 000B R		         MOV    CX, STARTPOS_Y_PLAYER1
 0346  03 0E 0090 R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 034A  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 034E  2B D9			         SUB    BX, CX
 0350  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 0353  7C 2B			         JL     BACKTOMAINLOOP_1
 0355  83 06 000B R 03		         ADD    STARTPOS_Y_PLAYER1, 3
 035A  EB 24 90			         JMP    BACKTOMAINLOOP_1 
				      ;}
				      
 035D				      ORIENT_UP1:
				      ;{
 035D  3C 71			         CMP    AL, 'q' 
 035F  75 0F			         JNE    ORIENT_DOWN1
 0361  83 3E 0013 R 00		         CMP    ORIENTATION_PLAYER1, 0
 0366  74 18			         JE     BACKTOMAINLOOP_1
 0368  83 2E 0013 R 01		         SUB    ORIENTATION_PLAYER1, 1 
 036D  EB 11 90			         JMP    BACKTOMAINLOOP_1
				      ;}
				   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-37


 0370				      ORIENT_DOWN1:
				      ;{
 0370  3C 65			         CMP    AL, 'e' 
 0372  75 0F			         JNE    FIREBULLET1
 0374  83 3E 0013 R 04		         CMP    ORIENTATION_PLAYER1, 4
 0379  74 05			         JE     BACKTOMAINLOOP_1
 037B  83 06 0013 R 01		         ADD    ORIENTATION_PLAYER1, 1 
 0380				         BACKTOMAINLOOP_1:      ;JUST A MIDDLE 
				JUMP TO USE IT FOR THE PREVIOUS LABELS
 0380  E9 0407 R		         JMP    BACKTOMAINLOOP         
				      ;}
				
 0383				      FIREBULLET1:
				      ;{
 0383  3C 20			         CMP AL, 32 
 0385  75 06			         JNE MOVEUP2
 0387  E8 0E8F R		         CALL FIRE_BULLET_1
 038A  EB 7B 90			         JMP BACKTOMAINLOOP
				      ;}
				
 038D				      MOVEUP2:
				      ;{
 038D  3C 69			         CMP    AL, 'i' 
 038F  75 17			         JNE    MOVEDOWN2
 0391  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 0395  8B 1E 0000 R		         MOV    BX, UPPERBOUND_Y
 0399  2B CB			         SUB    CX, BX
 039B  83 F9 03			         CMP    CX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 039E  7C 67			         JL     BACKTOMAINLOOP
 03A0  83 2E 001B R 03		         SUB    STARTPOS_Y_PLAYER2, 3
 03A5  EB 60 90			         JMP    BACKTOMAINLOOP   
				      ;}
				      
 03A8				      MOVEDOWN2:
				      ;{
 03A8  3C 6B			         CMP    AL, 'k' 
 03AA  75 1B			         JNE    ORIENT_UP2
 03AC  8B 0E 001B R		         MOV    CX, STARTPOS_Y_PLAYER2
 03B0  03 0E 0090 R		         ADD    CX, TANKSIZE    ;GET THE Y COOR
				DINATE OF THE LOWEST POINT OF THE TANK
 03B4  8B 1E 0002 R		         MOV    BX, LOWERBOUND_Y
 03B8  2B D9			         SUB    BX, CX
 03BA  83 FB 03			         CMP    BX, 3  ;CURRENT Y DISTANCE TO T
				HE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDA
				RY
 03BD  7C 48			         JL     BACKTOMAINLOOP
 03BF  83 06 001B R 03		         ADD    STARTPOS_Y_PLAYER2, 3
 03C4  EB 41 90			         JMP    BACKTOMAINLOOP 
				      ;}
				      
 03C7				      ORIENT_UP2:
				      ;{
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-38


 03C7  3C 6F			         CMP    AL, 'o' 
 03C9  75 0F			         JNE    ORIENT_DOWN2
 03CB  83 3E 0023 R 00		         CMP    ORIENTATION_PLAYER2, 0
 03D0  74 35			         JE     BACKTOMAINLOOP
 03D2  83 2E 0023 R 01		         SUB    ORIENTATION_PLAYER2, 1 
 03D7  EB 2E 90			         JMP    BACKTOMAINLOOP
				      ;}
				
 03DA				      ORIENT_DOWN2:
				      ;{
 03DA  3C 75			         CMP    AL, 'u' 
 03DC  75 0F			         JNE    FIRE_BULLET_2
 03DE  83 3E 0023 R 04		         CMP    ORIENTATION_PLAYER2, 4
 03E3  74 22			         JE     BACKTOMAINLOOP
 03E5  83 06 0023 R 01		         ADD    ORIENTATION_PLAYER2, 1 
 03EA  EB 1B 90			         JMP    BACKTOMAINLOOP          
				      ;}
				
 03ED				      FIRE_BULLET_2:
				      ;{
 03ED  3C 0D			         CMP AL , 13
 03EF  75 06			         JNE EXITPROG
 03F1  E8 0FEE R		         CALL FIRE_BULLET2
 03F4  EB 11 90			         JMP BACKTOMAINLOOP
				      ;}
				
 03F7				      EXITPROG:
				      ;{
 03F7  3C 1B			         CMP    AL,1BH
 03F9  75 0C			         JNE    BACKTOMAINLOOP
 03FB  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 03FE  BB 0100			         MOV    BX, 100H
 0401  CD 10			         INT    10H
 0403  B4 4C			         MOV    AH, 4CH
 0405  CD 21			         INT    21H
				      ;}
				
				      ;{RETNURN STORED DATA
 0407				         BACKTOMAINLOOP:
 0407  5A			         POP DX
 0408  59			         POP CX
 0409  5B			         POP BX
 040A  58			         POP AX
				      ;}   
 040B  C3			RETN
 040C				USERINPUT		ENDP 
				;----------------------------------------------
				------------------------------
				;  _______         _   _  _  __
				; |__   __| /\    | \ | || |/ /
				;    | |   /  \   |  \| || ' / 
				;    | |  / /\ \  | . ` ||  <  
				;    | | / ____ \ | |\  || . \ 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-39


				;    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				------------------------------                 
				             
				;----------------------------------------------
				----------------------------
				; DRAWS THE FIRST PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 040C				DRAW_TANK1 PROC NEAR 
				;{
				    ;{SAVE DATA  
 040C  50			      PUSH   AX
 040D  53			      PUSH   BX
 040E  51			      PUSH    CX
 040F  52			      PUSH   DX
				   ;}
				   
				   ;{;TO STORE THE TANK SIZE TO BE SENT TO THE 
				DRAWING MACRO
 0410  8B 1E 0090 R		      MOV    BX, TANKSIZE    
 0414  83 3E 0013 R 00		      CMP    ORIENTATION_PLAYER1, 0
 0419  75 27			      JNE    UPRIGHT
				   ;}
				
				   ;{ IF(ORIENTATION IS UP)
 041B  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER1
				      
				      ;SET BULLET 1 STARTING POSITION X,Y
 041E  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 0420  D1 E8			      SHR AX , 1    
 0422  8B 16 0009 R		      MOV DX, STARTPOS_X_PLAYER1
 0426  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 0428  A1 0096 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 042B  D1 E8			      SHR AX, 1      
 042D  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 042F  89 16 0015 R		      MOV BULLET_1_START_POSITION_X,DX
 0433  8B 0E 000B R		      MOV CX, STARTPOS_Y_PLAYER1
 0437  2B 0E 0096 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 043B  89 0E 0017 R		      MOV BULLET_1_START_POSITION_Y, CX
				
 043F  E9 04DB R		      JMP    DRAWTANK 
				   ;}
 0442				   UPRIGHT:
				      ;{   
 0442  83 3E 0013 R 01		         CMP    ORIENTATION_PLAYER1, 1
 0447  75 1C			         JNE    RIGHT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-40


				            ;{ IF(ORIENTATION IS UPRIGHT)
 0449  BE 0000 E		               MOV    SI, OFFSET BITMAP_UPRIGHT
				_PLAYER1
				
				               ;SET BULLET 1 STARTING POSITION 
				X,Y
 044C  8B 16 0009 R		               MOV DX, STARTPOS_X_PLAYER1
 0450  03 D3			               ADD DX, BX  ;MOVE TO THE TOP RIG
				HT VERTIX BY ADDING TANK SIZE
 0452  89 16 0015 R		               MOV BULLET_1_START_POSITION_X, D
				X
 0456  8B 16 000B R		               MOV DX, STARTPOS_Y_PLAYER1
 045A  2B 16 0096 R		               SUB DX, BULLETSIZE
 045E  89 16 0017 R		               MOV BULLET_1_START_POSITION_Y, D
				X ;BULLET DRAWING STARTING POINT IS ABOVE THE C
				ANON BY BULLET SIZE
				
 0462  EB 77 90			               JMP    DRAWTANK  
				            ;}
				      ;}
 0465				   RIGHT:
				   ;{
 0465  83 3E 0013 R 02		         CMP    ORIENTATION_PLAYER1, 2
 046A  75 2A			         JNE    DOWNRIGHT
				         ;{ IF(ORIENTATION IS RIGHT)
 046C  BE 0000 E		            MOV    SI, OFFSET BITMAP_RIGHT_PLAY
				ER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 046F  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 0473  03 D3			            ADD DX , BX   ;ADD THE TANK SIZE TO
				 REACH THE TOP RIGHT VERTIX
 0475  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 0479  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 047B  D1 E8			            SHR AX, 1 
 047D  8B D0			            MOV DX, AX
 047F  A1 0096 R		            MOV AX, BULLETSIZE
 0482  D1 E8			            SHR AX, 1
 0484  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 0486  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 0489  8B 0E 000B R		            MOV CX, STARTPOS_Y_PLAYER1
 048D  03 CA			            ADD CX, DX
 048F  89 0E 0017 R		            MOV BULLET_1_START_POSITION_Y, CX  
				           
				            
 0493  EB 46 90			              JMP DRAWTANK
				         ;}
				   ;}
 0496				   DOWNRIGHT:
				   ;{
 0496  83 3E 0013 R 03		         CMP    ORIENTATION_PLAYER1, 3
 049B  75 1A			         JNE    DOWN1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-41


				         ;{ IF(ORIENTATION IS DOWNRIGHT)
 049D  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNRIGHT_
				PLAYER1
				
				            ;SET BULLET 1 STARTING POSITION X,Y
 04A0  8B 16 0009 R		            MOV DX, STARTPOS_X_PLAYER1
 04A4  03 D3			            ADD DX, BX ;ADD TANK SIZE TO REACH 
				THE TOP RIGHT VERTIX OF THE TANK
 04A6  89 16 0015 R		            MOV BULLET_1_START_POSITION_X, DX
 04AA  8B 16 000B R		            MOV DX, STARTPOS_Y_PLAYER1
 04AE  03 D3			            ADD DX, BX ;ADD THE TANK SIZE IN Y 
				TO GO TO THE BOTTOM LEFT VERTIX
 04B0  89 16 0017 R		            MOV BULLET_1_START_POSITION_Y, DX
				            
 04B4  EB 25 90			            JMP DRAWTANK  
				         ;}
				   ;}
				
				    
 04B7				   DOWN1:
				   ;{
 04B7  BE 0000 E		         MOV    SI, OFFSET BITMAP_DOWN_PLAYER1
				
				         ;SET BULLET 1 STARTING POSITION X,Y
 04BA  8B C3			         MOV AX , BX ;GET HALF THE TANK SIZE
 04BC  D1 E8			         SHR AX,1
 04BE  8B D0			         MOV DX, AX
 04C0  A1 0096 R		         MOV AX, BULLETSIZE
 04C3  D1 E8			         SHR AX,1
 04C5  2B D0			         SUB DX, AX  ;SUBTRACT HALF THE BULLETS
				IZE TO REACH TOP LEFT VERTIX OF THE BULLET
 04C7  8B 0E 0009 R		         MOV CX, STARTPOS_X_PLAYER1
 04CB  03 CA			         ADD CX, DX
 04CD  89 0E 0015 R		         MOV BULLET_1_START_POSITION_X, CX
 04D1  8B 16 000B R		         MOV DX,STARTPOS_Y_PLAYER1
 04D5  03 D3			         ADD DX, BX  ;ADD TANK SIZE TO REACH TH
				E BOTTOM END
 04D7  89 16 0017 R		         MOV BULLET_1_START_POSITION_Y, DX     
				         
				   ;}
 04DB				   DRAWTANK:
				   ;{
				         DRAW_OBJECT    TANKSIZE, SI, STARTPOS_
				X_PLAYER1, STARTPOS_Y_PLAYER1
 04DB  51                    1	   PUSH CX 
 04DC  53                    1	   PUSH BX 
 04DD  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 04DF  8B 16 000B R          1	   MOV     DX, STARTPOS_Y_PLAYER1     ; Y TO ST
				ART DRAWING AT 
 04E3  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 04E7  8A 3C                 1	   MOV BH, [SI] 
 04E9                        1	   ??0018:;{ FOR(BP = 50; BD > 0; BP--) 
 04E9  8B 0E 0009 R          1	      MOV     CX, STARTPOS_X_PLAYER1    ; X TO 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-42


				START 
 04ED  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 04F1                        1	      ??0017:;{ FOR(DX = 50; DX > 0; DX--) 
 04F1  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 04F2  3A F8                 1	         CMP BH ,AL 
 04F4  74 04                 1	         JE ??0019 
 04F6  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 04F8  CD 10                 1	         INT     10H 
 04FA                        1	         ??0019: 
 04FA  41                    1	         INC     CX         ; NEXT X POSITION 
 04FB  4F                    1	         DEC     DI 
 04FC  75 F3                 1	         JNZ     ??0017 
 04FE  42                    1	      INC     DX         ; NEXT Y POSITION 
 04FF  4D                    1	      DEC     BP 
 0500  75 E7                 1	      JNZ     ??0018 
 0502  5B                    1	      POP BX 
 0503  59                    1	      POP CX 
				   ;}
				   ;{GET DATA STORED
 0504  5A			      POP DX
 0505  59			      POP CX
 0506  5B			      POP BX
 0507  58			      POP AX
				   ;}
 0508  C3			RETN
				;}
 0509				DRAW_TANK1	ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE SECOND PLAYER'S TANK
				;----------------------------------------------
				---------------------------
				
 0509				DRAW_TANK2 PROC NEAR 
				;{
				   ;{STORE DATA
 0509  50			      PUSH    AX
 050A  53			      PUSH    BX
 050B  51			      PUSH    CX
 050C  52			      PUSH    DX
				   ;}   
 050D  8B 1E 0090 R		   MOV    BX, TANKSIZE    ;TO STORE THE TANK SI
				ZE TO BE SENT TO THE DRAWING MACRO
 0511  83 3E 0023 R 00		   CMP    ORIENTATION_PLAYER2, 0
 0516  75 27			   JNE    UPLEFT
				   ;{ IF(ORIENTATION IS UP)
 0518  BE 0000 E		      MOV    SI, OFFSET BITMAP_UP_PLAYER2 
				
				      ;SET BULLET 2 STARTING POSITION X,Y
 051B  8B C3			      MOV AX, BX ;GET HALF THE TANK SIZE 
 051D  D1 E8			      SHR AX , 1    
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-43


 051F  8B 16 0019 R		      MOV DX, STARTPOS_X_PLAYER2
 0523  03 D0			      ADD DX, AX    ;ADD HALF THE SIZE OF THE T
				ANK TO THE START REACH THE MIDPOINT OF THE UPPE
				R EDGE
 0525  A1 0096 R		      MOV AX ,BULLETSIZE ;DIVIDE BULLET SIZE BY
				 2
 0528  D1 E8			      SHR AX, 1      
 052A  2B D0			      SUB DX, AX    ;SUBTRACT HALF THE BULLET S
				IZE TO GET TO THE BULLETSTART POS STARTPOS_X_PL
				AYER1
 052C  89 16 0035 R		      MOV BULLET_2_START_POSITION_X,DX
 0530  8B 0E 001B R		      MOV CX, STARTPOS_Y_PLAYER2
 0534  2B 0E 0096 R		      SUB CX, BULLETSIZE   ;BULLET DRAWING STAR
				TING POINT IS ABOVE THE CANON BY BULLET SIZE
 0538  89 0E 0037 R		      MOV BULLET_2_START_POSITION_Y, CX
				      
 053C  E9 05E2 R		      JMP    DRAWTANK2
				   ;}
 053F				   UPLEFT: 
				   ;{  
 053F  83 3E 0023 R 01		      CMP    ORIENTATION_PLAYER2, 1
 0544  75 1E			      JNE    LEFT
				         ;{ IF(ORIENTATION IS UPLEFT)
 0546  BE 0000 E		            MOV    SI, OFFSET BITMAP_UPLEFT_PLA
				YER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 0549  8B 16 0096 R		            MOV DX, BULLETSIZE
 054D  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 0551  2B CA			            SUB CX, DX 
 0553  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 0557  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 055B  2B CA			            SUB CX , DX 
 055D  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				            
 0561  EB 7F 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 0564				   LEFT:
				   ;{
 0564  83 3E 0023 R 02		      CMP    ORIENTATION_PLAYER2, 2
 0569  75 2E			      JNE    DOWNLEFT
				         ;{ IF(ORIENTATION IS LEFT)
 056B  BE 0000 E		            MOV    SI, OFFSET BITMAP_LEFT_PLAYE
				R2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 056E  8B 16 0096 R		            MOV DX, BULLETSIZE
 0572  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2 
 0576  2B CA			            SUB CX, DX                    ;SUBT
				RACT BULLET SIZE TO REACH THE TOP LEFT CORNER O
				F THE BULLET GRID
 0578  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-44


 057C  8B C3			            MOV AX , BX ;GET HALF THE TANK SIZE
 057E  D1 E8			            SHR AX, 1 
 0580  8B D0			            MOV DX, AX
 0582  A1 0096 R		            MOV AX, BULLETSIZE
 0585  D1 E8			            SHR AX, 1
 0587  2B D0			            SUB DX, AX  ;SUBTRACT HALF THE BULL
				ETSIZE TO REACH TOP LEFT VERTIX OF THE BULLET
 0589  83 EA 06			            SUB DX, 6   ;A RANDOM NUMBER TO MAK
				E THE BULLET GET OUT OF THE CANON NOT BELOW IT 
 058C  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 0590  03 CA			            ADD CX, DX
 0592  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX  
				
 0596  EB 4A 90			            JMP    DRAWTANK2  
				         ;}
				   ;}   
 0599				   DOWNLEFT:
				   ;{
 0599  83 3E 0023 R 03		      CMP    ORIENTATION_PLAYER2, 3
 059E  75 1E			      JNE    DOWN2
				         ;{ IF(ORIENTATION IS DOWNLEFT)
 05A0  BE 0000 E		            MOV    SI, OFFSET BITMAP_DOWNLEFT_P
				LAYER2
				
				            ;SET BULLET 2 STARTING POSITION X,Y
 05A3  8B 16 0096 R		            MOV DX, BULLETSIZE
 05A7  8B 0E 0019 R		            MOV CX, STARTPOS_X_PLAYER2
 05AB  2B CA			            SUB CX, DX        ;SUBTRACT BULLET 
				SIZE FROM STATRING POSITION TO REACH TOP LEFT V
				ERTIX OF THE BULLET GRID
 05AD  89 0E 0035 R		            MOV BULLET_2_START_POSITION_X, CX
 05B1  8B 0E 001B R		            MOV CX, STARTPOS_Y_PLAYER2
 05B5  03 CB			            ADD CX, BX
 05B7  89 0E 0037 R		            MOV BULLET_2_START_POSITION_Y, CX
				
 05BB  EB 25 90			            JMP    DRAWTANK2  
				         ;}
				   ;}
 05BE				   DOWN2:
				   ;{
 05BE  BE 0000 E		      MOV    SI, OFFSET BITMAP_DOWN_PLAYER2
				
				      ;SET BULLET 2 STARTING POSITION X,Y
 05C1  8B C3			      MOV AX , BX ;GET HALF THE TANK SIZE
 05C3  D1 E8			      SHR AX,1
 05C5  8B D0			      MOV DX, AX
 05C7  A1 0096 R		      MOV AX, BULLETSIZE
 05CA  D1 E8			      SHR AX,1
 05CC  2B D0			      SUB DX, AX  ;SUBTRACT HALF THE BULLETSIZE
				 TO REACH TOP LEFT VERTIX OF THE BULLET
 05CE  8B 0E 0019 R		      MOV CX, STARTPOS_X_PLAYER2
 05D2  03 CA			      ADD CX, DX
 05D4  89 0E 0035 R		      MOV BULLET_2_START_POSITION_X, CX
 05D8  8B 16 001B R		      MOV DX,STARTPOS_Y_PLAYER2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-45


 05DC  03 D3			      ADD DX, BX  ;ADD TANK SIZE TO REACH THE B
				OTTOM END
 05DE  89 16 0037 R		      MOV BULLET_2_START_POSITION_Y, DX
				
				   ;}
 05E2				   DRAWTANK2:
				   ;{
				      DRAW_OBJECT     TANKSIZE, SI, STARTPOS_X_
				PLAYER2, STARTPOS_Y_PLAYER2
 05E2  51                    1	   PUSH CX 
 05E3  53                    1	   PUSH BX 
 05E4  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 05E6  8B 16 001B R          1	   MOV     DX, STARTPOS_Y_PLAYER2     ; Y TO ST
				ART DRAWING AT 
 05EA  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 05EE  8A 3C                 1	   MOV BH, [SI] 
 05F0                        1	   ??001B:;{ FOR(BP = 50; BD > 0; BP--) 
 05F0  8B 0E 0019 R          1	      MOV     CX, STARTPOS_X_PLAYER2    ; X TO 
				START 
 05F4  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 05F8                        1	      ??001A:;{ FOR(DX = 50; DX > 0; DX--) 
 05F8  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 05F9  3A F8                 1	         CMP BH ,AL 
 05FB  74 04                 1	         JE ??001C 
 05FD  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 05FF  CD 10                 1	         INT     10H 
 0601                        1	         ??001C: 
 0601  41                    1	         INC     CX         ; NEXT X POSITION 
 0602  4F                    1	         DEC     DI 
 0603  75 F3                 1	         JNZ     ??001A 
 0605  42                    1	      INC     DX         ; NEXT Y POSITION 
 0606  4D                    1	      DEC     BP 
 0607  75 E7                 1	      JNZ     ??001B 
 0609  5B                    1	      POP BX 
 060A  59                    1	      POP CX 
				   ;}
				   ;{GET DATA SOTRED
 060B  5A			      POP    DX
 060C  59			      POP    CX
 060D  5B			      POP    BX
 060E  58			      POP    AX
				   ;}
 060F  C3			RETN
				;}
 0610				DRAW_TANK2	ENDP
				;----------------------------------------------
				---------------------------------
				;   _____  _    _   ____    _____  _______ 
				;  / ____|| |  | | / __ \  / ____||__   __|
				; | |  __ | |__| || |  | || (___     | |   
				; | | |_ ||  __  || |  | | \___ \    | |   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-46


				; | |__| || |  | || |__| | ____) |   | |   
				;  \_____||_|  |_| \____/ |_____/    |_|   
				;----------------------------------------------
				---------------------------------
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE FIRST GHOST
				;----------------------------------------------
				---------------------------
 0610				RANDOMIZE_GHOST1 PROC NEAR
				;{
				   ;{
 0610  50			      PUSH   AX
 0611  53			      PUSH   BX
 0612  51			      PUSH   CX
 0613  52			      PUSH   DX
				   ;}
 0614  C7 06 0057 R 0001	   MOV    EXISTS_GHOST1, 1
				   RANDOMIZE 0, 3, MOTION_GHOST1, RANDSEED
 061A  50                    1	   PUSH     AX 
 061B  53                    1	   PUSH     BX 
 061C  51                    1	   PUSH     CX 
 061D  52                    1	   PUSH     DX 
 061E  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0621  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0625  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0628  39 06 0089 R          1	   CMP     RANDSEED, AX 
 062C  75 08                 1	   JNE     ??001D 
 062E  B4 00                 1	   MOV     AH, 0 
 0630  CD 1A                 1	   INT     1AH 
 0632  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0636                        1	   ??001D: 
 0636  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0639  2B D2                 1	   SUB      DX, DX 
 063B  B9 0003               1	   MOV      CX, 3 
 063E  41                    1	   INC      CX 
 063F  83 E9 00              1	   SUB      CX, 0 
 0642  83 F9 00              1	   CMP CX, 0 
 0645  74 02                 1	   JE ??001E 
 0647  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0649                        1	   ??001E: 
 0649  83 C2 00              1	   ADD      DX, 0 
 064C  89 16 0059 R          1	   MOV      MOTION_GHOST1, DX 
 0650  5A                    1	   POP      DX 
 0651  59                    1	   POP      CX 
 0652  5B                    1	   POP      BX 
 0653  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST1, RANDSEED
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-47


 0654  50                    1	   PUSH     AX 
 0655  53                    1	   PUSH     BX 
 0656  51                    1	   PUSH     CX 
 0657  52                    1	   PUSH     DX 
 0658  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 065B  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 065F  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0662  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0666  75 08                 1	   JNE     ??001F 
 0668  B4 00                 1	   MOV     AH, 0 
 066A  CD 1A                 1	   INT     1AH 
 066C  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0670                        1	   ??001F: 
 0670  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0673  2B D2                 1	   SUB      DX, DX 
 0675  B9 0002               1	   MOV      CX, 2 
 0678  41                    1	   INC      CX 
 0679  83 E9 00              1	   SUB      CX, 0 
 067C  83 F9 00              1	   CMP CX, 0 
 067F  74 02                 1	   JE ??0020 
 0681  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0683                        1	   ??0020: 
 0683  83 C2 00              1	   ADD      DX, 0 
 0686  89 16 005B R          1	   MOV      POWERUP_GHOST1, DX 
 068A  5A                    1	   POP      DX 
 068B  59                    1	   POP      CX 
 068C  5B                    1	   POP      BX 
 068D  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST1, RANDSEED 
 068E  50                    1	   PUSH     AX 
 068F  53                    1	   PUSH     BX 
 0690  51                    1	   PUSH     CX 
 0691  52                    1	   PUSH     DX 
 0692  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0695  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0699  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 069C  39 06 0089 R          1	   CMP     RANDSEED, AX 
 06A0  75 08                 1	   JNE     ??0021 
 06A2  B4 00                 1	   MOV     AH, 0 
 06A4  CD 1A                 1	   INT     1AH 
 06A6  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 06AA                        1	   ??0021: 
 06AA  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 06AD  2B D2                 1	   SUB      DX, DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-48


 06AF  B9 0002               1	   MOV      CX, 2 
 06B2  41                    1	   INC      CX 
 06B3  83 E9 00              1	   SUB      CX, 0 
 06B6  83 F9 00              1	   CMP CX, 0 
 06B9  74 02                 1	   JE ??0022 
 06BB  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 06BD                        1	   ??0022: 
 06BD  83 C2 00              1	   ADD      DX, 0 
 06C0  89 16 0061 R          1	   MOV      TYPE_GHOST1, DX 
 06C4  5A                    1	   POP      DX 
 06C5  59                    1	   POP      CX 
 06C6  5B                    1	   POP      BX 
 06C7  58                    1	   POP      AX 
				
				   ;{  TO START APPROX IN THE MIDDLE
 06C8  A1 0002 R		   MOV AX, LOWERBOUND_Y
 06CB  03 06 0000 R		   ADD AX, UPPERBOUND_Y
 06CF  D1 E8			   SHR AX, 1
 06D1  8B D8			   MOV BX, AX
 06D3  2D 0014			   SUB AX, 20
 06D6  83 C3 14			   ADD BX, 20
 06D9  A3 008C R		   MOV LOWER4MACRO, AX      
 06DC  89 1E 008E R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST1, RANDSEED
 06E0  50                    1	   PUSH     AX 
 06E1  53                    1	   PUSH     BX 
 06E2  51                    1	   PUSH     CX 
 06E3  52                    1	   PUSH     DX 
 06E4  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 06E7  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 06EB  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 06EE  39 06 0089 R          1	   CMP     RANDSEED, AX 
 06F2  75 08                 1	   JNE     ??0023 
 06F4  B4 00                 1	   MOV     AH, 0 
 06F6  CD 1A                 1	   INT     1AH 
 06F8  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 06FC                        1	   ??0023: 
 06FC  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 06FF  2B D2                 1	   SUB      DX, DX 
 0701  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0705  41                    1	   INC      CX 
 0706  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 070A  83 F9 00              1	   CMP CX, 0 
 070D  74 02                 1	   JE ??0024 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-49


 070F  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0711                        1	   ??0024: 
 0711  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 0715  89 16 0055 R          1	   MOV      STARTPOS_Y_GHOST1, DX 
 0719  5A                    1	   POP      DX 
 071A  59                    1	   POP      CX 
 071B  5B                    1	   POP      BX 
 071C  58                    1	   POP      AX 
				
				
				    ;{  TO START APPROX IN THE MIDDLE
 071D  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0720  03 06 0004 R		   ADD AX, LEFTBOUND_X
 0724  D1 E8			   SHR AX, 1
 0726  8B D8			   MOV BX, AX
 0728  2D 0014			   SUB AX, 20
 072B  83 C3 14			   ADD BX, 20
 072E  A3 008C R		   MOV LOWER4MACRO, AX      
 0731  89 1E 008E R		   MOV UPPER4MACRO, BX     
				   ;}
				
				   
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST1, RANDSEED
 0735  50                    1	   PUSH     AX 
 0736  53                    1	   PUSH     BX 
 0737  51                    1	   PUSH     CX 
 0738  52                    1	   PUSH     DX 
 0739  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 073C  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0740  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0743  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0747  75 08                 1	   JNE     ??0025 
 0749  B4 00                 1	   MOV     AH, 0 
 074B  CD 1A                 1	   INT     1AH 
 074D  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0751                        1	   ??0025: 
 0751  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0754  2B D2                 1	   SUB      DX, DX 
 0756  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 075A  41                    1	   INC      CX 
 075B  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 075F  83 F9 00              1	   CMP CX, 0 
 0762  74 02                 1	   JE ??0026 
 0764  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0766                        1	   ??0026: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-50


 0766  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 076A  89 16 0053 R          1	   MOV      STARTPOS_X_GHOST1, DX 
 076E  5A                    1	   POP      DX 
 076F  59                    1	   POP      CX 
 0770  5B                    1	   POP      BX 
 0771  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 0772  A1 0053 R		   MOV AX, STARTPOS_X_GHOST1
 0775  2D 000A			   SUB AX, 10
 0778  A3 005D R		   MOV STARTPOS_X_PORTAL1, AX
 077B  A1 0055 R		   MOV AX, STARTPOS_Y_GHOST1
 077E  2D 000A			   SUB AX, 10
 0781  A3 005F R		   MOV STARTPOS_Y_PORTAL1, AX 
				   ;}
				
 0784  5A			   POP DX
 0785  59			   POP CX
 0786  5B			   POP BX
 0787  58			   POP AX 
 0788  C3			   RETN
				;} 
 0789				RANDOMIZE_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
 0789				RANDOMIZE_GHOST2 PROC NEAR
				;{
 0789  50			   PUSH AX
 078A  53			   PUSH BX
 078B  51			   PUSH CX
 078C  52			   PUSH DX
				
 078D  C7 06 0067 R 0001	   MOV EXISTS_GHOST2, 1
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 1 (DOWN
				LEFT) OR 3 (UPLEFT)
				   RANDOMIZE 0, 3 , MOTION_GHOST2, RANDSEED
 0793  50                    1	   PUSH     AX 
 0794  53                    1	   PUSH     BX 
 0795  51                    1	   PUSH     CX 
 0796  52                    1	   PUSH     DX 
 0797  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 079A  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 079E  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 07A1  39 06 0089 R          1	   CMP     RANDSEED, AX 
 07A5  75 08                 1	   JNE     ??0027 
 07A7  B4 00                 1	   MOV     AH, 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-51


 07A9  CD 1A                 1	   INT     1AH 
 07AB  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 07AF                        1	   ??0027: 
 07AF  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 07B2  2B D2                 1	   SUB      DX, DX 
 07B4  B9 0003               1	   MOV      CX, 3 
 07B7  41                    1	   INC      CX 
 07B8  83 E9 00              1	   SUB      CX, 0 
 07BB  83 F9 00              1	   CMP CX, 0 
 07BE  74 02                 1	   JE ??0028 
 07C0  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 07C2                        1	   ??0028: 
 07C2  83 C2 00              1	   ADD      DX, 0 
 07C5  89 16 0069 R          1	   MOV      MOTION_GHOST2, DX 
 07C9  5A                    1	   POP      DX 
 07CA  59                    1	   POP      CX 
 07CB  5B                    1	   POP      BX 
 07CC  58                    1	   POP      AX 
 07CD  83 3E 0069 R 02		   CMP MOTION_GHOST2, 2
 07D2  72 09			   JB MOV_DOWNLEFT2
 07D4  C7 06 0069 R 0003	   MOV MOTION_GHOST2, 3    ;MOV UPLEFT
 07DA  EB 07 90			   JMP MOV_UPLEFT2
 07DD				   MOV_DOWNLEFT2:
 07DD  C7 06 0069 R 0001	   MOV MOTION_GHOST2, 1    ;MOVE BY INC Y AND D
				EC X
 07E3				   MOV_UPLEFT2:
				   ;}
				   
				   RANDOMIZE 0, 2, POWERUP_GHOST2, RANDSEED
 07E3  50                    1	   PUSH     AX 
 07E4  53                    1	   PUSH     BX 
 07E5  51                    1	   PUSH     CX 
 07E6  52                    1	   PUSH     DX 
 07E7  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 07EA  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 07EE  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 07F1  39 06 0089 R          1	   CMP     RANDSEED, AX 
 07F5  75 08                 1	   JNE     ??0029 
 07F7  B4 00                 1	   MOV     AH, 0 
 07F9  CD 1A                 1	   INT     1AH 
 07FB  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 07FF                        1	   ??0029: 
 07FF  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0802  2B D2                 1	   SUB      DX, DX 
 0804  B9 0002               1	   MOV      CX, 2 
 0807  41                    1	   INC      CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-52


 0808  83 E9 00              1	   SUB      CX, 0 
 080B  83 F9 00              1	   CMP CX, 0 
 080E  74 02                 1	   JE ??002A 
 0810  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0812                        1	   ??002A: 
 0812  83 C2 00              1	   ADD      DX, 0 
 0815  89 16 006B R          1	   MOV      POWERUP_GHOST2, DX 
 0819  5A                    1	   POP      DX 
 081A  59                    1	   POP      CX 
 081B  5B                    1	   POP      BX 
 081C  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, TYPE_GHOST2, RANDSEED
 081D  50                    1	   PUSH     AX 
 081E  53                    1	   PUSH     BX 
 081F  51                    1	   PUSH     CX 
 0820  52                    1	   PUSH     DX 
 0821  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0824  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0828  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 082B  39 06 0089 R          1	   CMP     RANDSEED, AX 
 082F  75 08                 1	   JNE     ??002B 
 0831  B4 00                 1	   MOV     AH, 0 
 0833  CD 1A                 1	   INT     1AH 
 0835  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0839                        1	   ??002B: 
 0839  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 083C  2B D2                 1	   SUB      DX, DX 
 083E  B9 0002               1	   MOV      CX, 2 
 0841  41                    1	   INC      CX 
 0842  83 E9 00              1	   SUB      CX, 0 
 0845  83 F9 00              1	   CMP CX, 0 
 0848  74 02                 1	   JE ??002C 
 084A  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 084C                        1	   ??002C: 
 084C  83 C2 00              1	   ADD      DX, 0 
 084F  89 16 0071 R          1	   MOV      TYPE_GHOST2, DX 
 0853  5A                    1	   POP      DX 
 0854  59                    1	   POP      CX 
 0855  5B                    1	   POP      BX 
 0856  58                    1	   POP      AX 
				   
				
 0857  A1 0002 R		   MOV AX, LOWERBOUND_Y
 085A  2D 0032			   SUB AX, 50
 085D  A3 008E R		   MOV UPPER4MACRO, AX
 0860  A1 0000 R		   MOV AX, UPPERBOUND_Y
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-53


 0863  A3 008C R		   MOV LOWER4MACRO, AX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_Y_GHOST2, RANDSEED
 0866  50                    1	   PUSH     AX 
 0867  53                    1	   PUSH     BX 
 0868  51                    1	   PUSH     CX 
 0869  52                    1	   PUSH     DX 
 086A  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 086D  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0871  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0874  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0878  75 08                 1	   JNE     ??002D 
 087A  B4 00                 1	   MOV     AH, 0 
 087C  CD 1A                 1	   INT     1AH 
 087E  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0882                        1	   ??002D: 
 0882  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0885  2B D2                 1	   SUB      DX, DX 
 0887  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 088B  41                    1	   INC      CX 
 088C  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0890  83 F9 00              1	   CMP CX, 0 
 0893  74 02                 1	   JE ??002E 
 0895  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0897                        1	   ??002E: 
 0897  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 089B  89 16 0065 R          1	   MOV      STARTPOS_Y_GHOST2, DX 
 089F  5A                    1	   POP      DX 
 08A0  59                    1	   POP      CX 
 08A1  5B                    1	   POP      BX 
 08A2  58                    1	   POP      AX 
				
				
				
 08A3  A1 0006 R		   MOV AX, RIGHTBOUND_X
 08A6  D1 E8			   SHR AX, 1
 08A8  2D 0064			   SUB AX, 100
 08AB  A3 008E R		   MOV UPPER4MACRO, AX
 08AE  8B 1E 0004 R		   MOV BX, LEFTBOUND_X 
 08B2  83 C3 6E			   ADD BX, 110
 08B5  89 1E 008C R		   MOV LOWER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST2, RANDSEED
 08B9  50                    1	   PUSH     AX 
 08BA  53                    1	   PUSH     BX 
 08BB  51                    1	   PUSH     CX 
 08BC  52                    1	   PUSH     DX 
 08BD  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-54


 08C0  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 08C4  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 08C7  39 06 0089 R          1	   CMP     RANDSEED, AX 
 08CB  75 08                 1	   JNE     ??002F 
 08CD  B4 00                 1	   MOV     AH, 0 
 08CF  CD 1A                 1	   INT     1AH 
 08D1  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 08D5                        1	   ??002F: 
 08D5  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 08D8  2B D2                 1	   SUB      DX, DX 
 08DA  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 08DE  41                    1	   INC      CX 
 08DF  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 08E3  83 F9 00              1	   CMP CX, 0 
 08E6  74 02                 1	   JE ??0030 
 08E8  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 08EA                        1	   ??0030: 
 08EA  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 08EE  89 16 0063 R          1	   MOV      STARTPOS_X_GHOST2, DX 
 08F2  5A                    1	   POP      DX 
 08F3  59                    1	   POP      CX 
 08F4  5B                    1	   POP      BX 
 08F5  58                    1	   POP      AX 
				  
				   ;{GHOST PORTAL LOCATION
 08F6  A1 0063 R		   MOV AX, STARTPOS_X_GHOST2
 08F9  2D 000A			   SUB AX, 10
 08FC  A3 006D R		   MOV STARTPOS_X_PORTAL2, AX
 08FF  A1 0065 R		   MOV AX, STARTPOS_Y_GHOST2
 0902  2D 000A			   SUB AX, 10
 0905  A3 006F R		   MOV STARTPOS_Y_PORTAL2, AX 
				   ;}
				   
 0908  5A			   POP DX
 0909  59			   POP CX
 090A  5B			   POP BX
 090B  58			   POP AX 
 090C  C3			   RETN
				;} 
 090D				RANDOMIZE_GHOST2 ENDP
				
				;----------------------------------------------
				----------------------------
				; MAKES RANDOM PLACE FOR THE THIRD GHOST
				;----------------------------------------------
				---------------------------
				
 090D				RANDOMIZE_GHOST3 PROC NEAR
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-55


				;{
 090D  50			   PUSH AX
 090E  53			   PUSH BX
 090F  51			   PUSH CX
 0910  52			   PUSH DX
				
 0911  C7 06 0077 R 0001	   MOV EXISTS_GHOST3, 1    ;MOVE BY INC X AND D
				EC Y
				   
				   ;{ RANDOMIZE MOVEMENT DIRECTION WITH 0 (DOWN
				RIGHT) OR 2 (UPRIGHT)
				   RANDOMIZE 0, 3 , MOTION_GHOST3, RANDSEED
 0917  50                    1	   PUSH     AX 
 0918  53                    1	   PUSH     BX 
 0919  51                    1	   PUSH     CX 
 091A  52                    1	   PUSH     DX 
 091B  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 091E  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0922  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0925  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0929  75 08                 1	   JNE     ??0031 
 092B  B4 00                 1	   MOV     AH, 0 
 092D  CD 1A                 1	   INT     1AH 
 092F  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0933                        1	   ??0031: 
 0933  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0936  2B D2                 1	   SUB      DX, DX 
 0938  B9 0003               1	   MOV      CX, 3 
 093B  41                    1	   INC      CX 
 093C  83 E9 00              1	   SUB      CX, 0 
 093F  83 F9 00              1	   CMP CX, 0 
 0942  74 02                 1	   JE ??0032 
 0944  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0946                        1	   ??0032: 
 0946  83 C2 00              1	   ADD      DX, 0 
 0949  89 16 0079 R          1	   MOV      MOTION_GHOST3, DX 
 094D  5A                    1	   POP      DX 
 094E  59                    1	   POP      CX 
 094F  5B                    1	   POP      BX 
 0950  58                    1	   POP      AX 
 0951  83 3E 0079 R 02		   CMP MOTION_GHOST3, 2
 0956  72 09			   JB MOV_DOWNRIGHT3
 0958  C7 06 0079 R 0002	   MOV MOTION_GHOST3, 2    ;MOV UPRIGHT
 095E  EB 07 90			   JMP MOV_UPRIGHT3
 0961				   MOV_DOWNRIGHT3:
 0961  C7 06 0079 R 0000	   MOV MOTION_GHOST3, 0    ;MOVE DOWNRIGHT
 0967				   MOV_UPRIGHT3:
				   ;}
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-56


				
				
				   RANDOMIZE 0, 2, TYPE_GHOST3, RANDSEED
 0967  50                    1	   PUSH     AX 
 0968  53                    1	   PUSH     BX 
 0969  51                    1	   PUSH     CX 
 096A  52                    1	   PUSH     DX 
 096B  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 096E  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0972  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0975  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0979  75 08                 1	   JNE     ??0033 
 097B  B4 00                 1	   MOV     AH, 0 
 097D  CD 1A                 1	   INT     1AH 
 097F  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0983                        1	   ??0033: 
 0983  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0986  2B D2                 1	   SUB      DX, DX 
 0988  B9 0002               1	   MOV      CX, 2 
 098B  41                    1	   INC      CX 
 098C  83 E9 00              1	   SUB      CX, 0 
 098F  83 F9 00              1	   CMP CX, 0 
 0992  74 02                 1	   JE ??0034 
 0994  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0996                        1	   ??0034: 
 0996  83 C2 00              1	   ADD      DX, 0 
 0999  89 16 0081 R          1	   MOV      TYPE_GHOST3, DX 
 099D  5A                    1	   POP      DX 
 099E  59                    1	   POP      CX 
 099F  5B                    1	   POP      BX 
 09A0  58                    1	   POP      AX 
				   RANDOMIZE 0, 2, POWERUP_GHOST3, RANDSEED
 09A1  50                    1	   PUSH     AX 
 09A2  53                    1	   PUSH     BX 
 09A3  51                    1	   PUSH     CX 
 09A4  52                    1	   PUSH     DX 
 09A5  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09A8  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09AC  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09AF  39 06 0089 R          1	   CMP     RANDSEED, AX 
 09B3  75 08                 1	   JNE     ??0035 
 09B5  B4 00                 1	   MOV     AH, 0 
 09B7  CD 1A                 1	   INT     1AH 
 09B9  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 09BD                        1	   ??0035: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-57


 09BD  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 09C0  2B D2                 1	   SUB      DX, DX 
 09C2  B9 0002               1	   MOV      CX, 2 
 09C5  41                    1	   INC      CX 
 09C6  83 E9 00              1	   SUB      CX, 0 
 09C9  83 F9 00              1	   CMP CX, 0 
 09CC  74 02                 1	   JE ??0036 
 09CE  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 09D0                        1	   ??0036: 
 09D0  83 C2 00              1	   ADD      DX, 0 
 09D3  89 16 007B R          1	   MOV      POWERUP_GHOST3, DX 
 09D7  5A                    1	   POP      DX 
 09D8  59                    1	   POP      CX 
 09D9  5B                    1	   POP      BX 
 09DA  58                    1	   POP      AX 
				
				   
 09DB  A1 0002 R		   MOV AX, LOWERBOUND_Y
 09DE  2D 0032			   SUB AX, 50
 09E1  A3 008E R		   MOV UPPER4MACRO, AX
 09E4  A1 0000 R		   MOV AX, UPPERBOUND_Y
 09E7  A3 008C R		   MOV LOWER4MACRO, AX
				   RANDOMIZE  LOWER4MACRO, UPPER4MACRO, STARTPO
				S_Y_GHOST3, RANDSEED
 09EA  50                    1	   PUSH     AX 
 09EB  53                    1	   PUSH     BX 
 09EC  51                    1	   PUSH     CX 
 09ED  52                    1	   PUSH     DX 
 09EE  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 09F1  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 09F5  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 09F8  39 06 0089 R          1	   CMP     RANDSEED, AX 
 09FC  75 08                 1	   JNE     ??0037 
 09FE  B4 00                 1	   MOV     AH, 0 
 0A00  CD 1A                 1	   INT     1AH 
 0A02  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A06                        1	   ??0037: 
 0A06  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A09  2B D2                 1	   SUB      DX, DX 
 0A0B  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0A0F  41                    1	   INC      CX 
 0A10  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0A14  83 F9 00              1	   CMP CX, 0 
 0A17  74 02                 1	   JE ??0038 
 0A19  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-58


 0A1B                        1	   ??0038: 
 0A1B  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 0A1F  89 16 0075 R          1	   MOV      STARTPOS_Y_GHOST3, DX 
 0A23  5A                    1	   POP      DX 
 0A24  59                    1	   POP      CX 
 0A25  5B                    1	   POP      BX 
 0A26  58                    1	   POP      AX 
				
				
				
 0A27  A1 0006 R		   MOV AX, RIGHTBOUND_X
 0A2A  D1 E8			   SHR AX, 1
 0A2C  2D 0032			   SUB AX, 50
 0A2F  A3 008C R		   MOV LOWER4MACRO, AX
 0A32  8B 1E 0006 R		   MOV BX, RIGHTBOUND_X 
 0A36  83 EB 50			   SUB BX, 80
 0A39  89 1E 008E R		   MOV UPPER4MACRO, BX
				   RANDOMIZE LOWER4MACRO, UPPER4MACRO, STARTPOS
				_X_GHOST3, RANDSEED
 0A3D  50                    1	   PUSH     AX 
 0A3E  53                    1	   PUSH     BX 
 0A3F  51                    1	   PUSH     CX 
 0A40  52                    1	   PUSH     DX 
 0A41  B8 6255               1	   MOV     AX, 25173          ; LCG MULTIPLIER 
 0A44  F7 26 0089 R          1	   MUL     WORD PTR RANDSEED      ;DX:AX = LCG 
				MULTIPLIER * SEED 
 0A48  05 3619               1	   ADD     AX, 13849          ; ADD LCG INCREME
				NT VALUE 
 0A4B  39 06 0089 R          1	   CMP     RANDSEED, AX 
 0A4F  75 08                 1	   JNE     ??0039 
 0A51  B4 00                 1	   MOV     AH, 0 
 0A53  CD 1A                 1	   INT     1AH 
 0A55  89 16 0089 R          1	   MOV     RANDSEED, DX    ; SEED WITH THE SYST
				EM TIME 
 0A59                        1	   ??0039: 
 0A59  A3 0089 R             1	   MOV     RANDSEED, AX          ; UPDATE SEED 
				= RETURN VALUE 
 0A5C  2B D2                 1	   SUB      DX, DX 
 0A5E  8B 0E 008E R          1	   MOV      CX, UPPER4MACRO 
 0A62  41                    1	   INC      CX 
 0A63  2B 0E 008C R          1	   SUB      CX, LOWER4MACRO 
 0A67  83 F9 00              1	   CMP CX, 0 
 0A6A  74 02                 1	   JE ??003A 
 0A6C  F7 F1                 1	   DIV      CX     ;THIS DIVIDES AX/CX AND THE 
				REMAINDER IS AT DX(NUMBER WITHIN RANGE OF THE S
				UBTRACTION UPPER - LOWER) 
 0A6E                        1	   ??003A: 
 0A6E  03 16 008C R          1	   ADD      DX, LOWER4MACRO 
 0A72  89 16 0073 R          1	   MOV      STARTPOS_X_GHOST3, DX 
 0A76  5A                    1	   POP      DX 
 0A77  59                    1	   POP      CX 
 0A78  5B                    1	   POP      BX 
 0A79  58                    1	   POP      AX 
				   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-59


				   ;{GHOST PORTAL LOCATION
 0A7A  A1 0073 R		   MOV AX, STARTPOS_X_GHOST3
 0A7D  2D 000A			   SUB AX, 10
 0A80  A3 007D R		   MOV STARTPOS_X_PORTAL3, AX
 0A83  A1 0075 R		   MOV AX, STARTPOS_Y_GHOST3
 0A86  2D 000A			   SUB AX, 10
 0A89  A3 007F R		   MOV STARTPOS_Y_PORTAL3, AX 
				   ;}
				
 0A8C  5A			   POP DX
 0A8D  59			   POP CX
 0A8E  5B			   POP BX
 0A8F  58			   POP AX 
 0A90  C3			   RETN
				;} 
 0A91				RANDOMIZE_GHOST3 ENDP
				
				;----------------------------------------------
				----------------------------
				; DRAW THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0A91				DRAW_GHOST1 PROC NEAR
				;{
 0A91  50			   PUSH AX
 0A92  53			   PUSH BX
 0A93  51			   PUSH CX
 0A94  52			   PUSH DX
				
 0A95  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0A9A  75 6F			   JNE ENDDRAW_GHOST11
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST1, STARTPO
				S_Y_GHOST1, GHOSTSIZE , EXISTS_GHOST1 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0A9C  50                    1	   PUSH AX 
 0A9D  53                    1	   PUSH BX 
 0A9E  51                    1	   PUSH CX 
 0A9F  52                    1	   PUSH DX 
 0AA0  C7 06 0057 R 0001     1	   MOV EXISTS_GHOST1, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0AA6                        1	   ??003B: 
 0AA6  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
 0AAA  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0AAE  2B CB                 1	      SUB CX, BX 
 0AB0  83 F9 00              1	      CMP CX, 0 
 0AB3  7D 06                 1	      JGE ??003C 
 0AB5  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0ABB                        1	   ??003C: 
 0ABB  8B 0E 0055 R          1	      MOV CX, STARTPOS_Y_GHOST1 
 0ABF  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0AC3  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0AC7  2B D9                 1	      SUB BX, CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-60


 0AC9  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0ACC  7D 06                 1	      JGE ??003E 
 0ACE  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AD4                        1	   ??003E: 
 0AD4  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0AD8  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0ADC  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0AE0  2B D9                 1	      SUB BX, CX 
 0AE2  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0AE5  7D 06                 1	      JGE ??003D 
 0AE7  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0AED                        1	   ??003D: 
 0AED  8B 0E 0053 R          1	      MOV CX, STARTPOS_X_GHOST1 
 0AF1  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0AF5  2B CB                 1	      SUB CX, BX 
 0AF7  83 F9 00              1	      CMP CX, 0 
 0AFA  7D 06                 1	      JGE ??003F 
 0AFC  C7 06 0057 R 0000     1	      MOV EXISTS_GHOST1, 0 
 0B02                        1	   ??003F: 
 0B02  5A                    1	   POP DX 
 0B03  59                    1	   POP CX 
 0B04  5B                    1	   POP BX 
 0B05  58                    1	   POP AX 
 0B06  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B0B				   ENDDRAW_GHOST11:     ; JUST A MIDDLE LABEL F
				OR JUMP
 0B0B  75 40			   JNE ENDDRAW_GHOST1
				
				  
				
				   ;{FIRST TYPE 
 0B0D  83 3E 0061 R 00		   CMP TYPE_GHOST1, 0
 0B12  BE 0000 E		   MOV SI, OFFSET GHOST1_0
 0B15  74 0D			   JE DRAW1
				   ;}
				
				   ;{SECOND TYPE 
 0B17  83 3E 0061 R 01		   CMP TYPE_GHOST1, 1
 0B1C  BE 0000 E		   MOV SI, OFFSET GHOST1_1
 0B1F  74 03			   JE DRAW1
				   ;}
				
				   ;{THIRD TYPE
 0B21  BE 0000 E		   MOV SI, OFFSET GHOST1_2
				   ;}
				
 0B24				   DRAW1:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1
 0B24  51                    1	   PUSH CX 
 0B25  53                    1	   PUSH BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-61


 0B26  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0B28  8B 16 0055 R          1	   MOV     DX, STARTPOS_Y_GHOST1     ; Y TO STA
				RT DRAWING AT 
 0B2C  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0B30  8A 3C                 1	   MOV BH, [SI] 
 0B32                        1	   ??0041:;{ FOR(BP = 50; BD > 0; BP--) 
 0B32  8B 0E 0053 R          1	      MOV     CX, STARTPOS_X_GHOST1    ; X TO S
				TART 
 0B36  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0B3A                        1	      ??0040:;{ FOR(DX = 50; DX > 0; DX--) 
 0B3A  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0B3B  3A F8                 1	         CMP BH ,AL 
 0B3D  74 04                 1	         JE ??0042 
 0B3F  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0B41  CD 10                 1	         INT     10H 
 0B43                        1	         ??0042: 
 0B43  41                    1	         INC     CX         ; NEXT X POSITION 
 0B44  4F                    1	         DEC     DI 
 0B45  75 F3                 1	         JNZ     ??0040 
 0B47  42                    1	      INC     DX         ; NEXT Y POSITION 
 0B48  4D                    1	      DEC     BP 
 0B49  75 E7                 1	      JNZ     ??0041 
 0B4B  5B                    1	      POP BX 
 0B4C  59                    1	      POP CX 
				   
				  
				
 0B4D				   ENDDRAW_GHOST1:
 0B4D  5A			   POP DX
 0B4E  59			   POP CX
 0B4F  5B			   POP BX
 0B50  58			   POP AX 
 0B51  C3			   RETN
				;} 
 0B52				DRAW_GHOST1 ENDP
				
				;----------------------------------------------
				----------------------------
				; MOVES THE FIRST GHOST
				;----------------------------------------------
				---------------------------
				
 0B52				MOVE_GHOST1 PROC NEAR
				;{
 0B52  50			   PUSH AX
 0B53  53			   PUSH BX
 0B54  51			   PUSH CX
 0B55  52			   PUSH DX
				
 0B56  83 3E 0057 R 01		   CMP EXISTS_GHOST1, 1
 0B5B  75 4E			   JNE ENDMOVE_GHOST1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-62


 0B5D				   DOWNRIGHT_GHOST1:
				   ;{ DOWNRIGHT MOVEMENT
 0B5D  83 3E 0059 R 00		      CMP MOTION_GHOST1, 0
 0B62  75 0D			      JNE DOWNLEFT_GHOST1
 0B64  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B69  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B6E  EB 3B 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B71				   DOWNLEFT_GHOST1:
				   ;{ DOWNLEFT MOVEMENT
 0B71  83 3E 0059 R 01		      CMP MOTION_GHOST1, 1
 0B76  75 0D			      JNE UPRIGHT_GHOST1
 0B78  83 2E 0053 R 03		      SUB STARTPOS_X_GHOST1, 3
 0B7D  83 06 0055 R 03		      ADD STARTPOS_Y_GHOST1, 3
 0B82  EB 27 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B85				   UPRIGHT_GHOST1:
				   ;{ UPRIGHT MOVEMENT
 0B85  83 3E 0059 R 02		      CMP MOTION_GHOST1, 2
 0B8A  75 0D			      JNE UPLEFT_GHOST1
 0B8C  83 06 0053 R 03		      ADD STARTPOS_X_GHOST1, 3
 0B91  83 2E 0055 R 03		      SUB STARTPOS_Y_GHOST1, 3
 0B96  EB 13 90			      JMP ENDMOVE_GHOST1
				   ;}
 0B99				   UPLEFT_GHOST1:
				   ;{ UPLEFT MOVEMENT 
 0B99  83 3E 0059 R 03		      CMP MOTION_GHOST1, 3
				      ;JNE ENDMOVE_GHOST1
 0B9E  83 2E 0053 R 03		      SUB STARTPOS_X_GHOST1, 3
 0BA3  83 2E 0055 R 03		      SUB STARTPOS_Y_GHOST1, 3
 0BA8  EB 01 90			      JMP ENDMOVE_GHOST1
				   ;}
				   
 0BAB				   ENDMOVE_GHOST1:
 0BAB  5A			   POP DX
 0BAC  59			   POP CX
 0BAD  5B			   POP BX
 0BAE  58			   POP AX 
 0BAF  C3			   RETN
				;} 
 0BB0				MOVE_GHOST1 ENDP
				
				
				;----------------------------------------------
				----------------------------
				;  DRAWS THE SECOND GHOST
				;----------------------------------------------
				---------------------------
				
 0BB0				DRAW_GHOST2 PROC NEAR
				;{
 0BB0  50			   PUSH AX
 0BB1  53			   PUSH BX
 0BB2  51			   PUSH CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-63


 0BB3  52			   PUSH DX
				
 0BB4  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0BB9  75 6F			   JNE ENDDRAW_GHOST21
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST2, STARTPO
				S_Y_GHOST2, GHOSTSIZE , EXISTS_GHOST2 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0BBB  50                    1	   PUSH AX 
 0BBC  53                    1	   PUSH BX 
 0BBD  51                    1	   PUSH CX 
 0BBE  52                    1	   PUSH DX 
 0BBF  C7 06 0067 R 0001     1	   MOV EXISTS_GHOST2, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0BC5                        1	   ??0043: 
 0BC5  8B 0E 0065 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BC9  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0BCD  2B CB                 1	      SUB CX, BX 
 0BCF  83 F9 00              1	      CMP CX, 0 
 0BD2  7D 06                 1	      JGE ??0044 
 0BD4  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BDA                        1	   ??0044: 
 0BDA  8B 0E 0065 R          1	      MOV CX, STARTPOS_Y_GHOST2 
 0BDE  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0BE2  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0BE6  2B D9                 1	      SUB BX, CX 
 0BE8  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0BEB  7D 06                 1	      JGE ??0046 
 0BED  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0BF3                        1	   ??0046: 
 0BF3  8B 0E 0063 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0BF7  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0BFB  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0BFF  2B D9                 1	      SUB BX, CX 
 0C01  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0C04  7D 06                 1	      JGE ??0045 
 0C06  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C0C                        1	   ??0045: 
 0C0C  8B 0E 0063 R          1	      MOV CX, STARTPOS_X_GHOST2 
 0C10  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0C14  2B CB                 1	      SUB CX, BX 
 0C16  83 F9 00              1	      CMP CX, 0 
 0C19  7D 06                 1	      JGE ??0047 
 0C1B  C7 06 0067 R 0000     1	      MOV EXISTS_GHOST2, 0 
 0C21                        1	   ??0047: 
 0C21  5A                    1	   POP DX 
 0C22  59                    1	   POP CX 
 0C23  5B                    1	   POP BX 
 0C24  58                    1	   POP AX 
 0C25  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0C2A				   ENDDRAW_GHOST21:    ;JUST A MIDDLE LABEL FOR
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-64


				 JUMP
 0C2A  75 40			   JNE ENDDRAW_GHOST2
				
				
				   
				
				
				   ;{FIRST TYPE 
 0C2C  83 3E 0071 R 00		   CMP TYPE_GHOST2, 0
 0C31  BE 0000 E		   MOV SI, OFFSET GHOST2_0
 0C34  74 0D			   JE DRAW2
				   ;}
				
				   ;{SECOND TYPE 
 0C36  83 3E 0071 R 01		   CMP TYPE_GHOST2, 1
 0C3B  BE 0000 E		   MOV SI, OFFSET GHOST2_1
 0C3E  74 03			   JE DRAW2
				   ;}
				
				   ;{THIRD TYPE
 0C40  BE 0000 E		   MOV SI, OFFSET GHOST2_2
				   ;}
				
 0C43				   DRAW2:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2
 0C43  51                    1	   PUSH CX 
 0C44  53                    1	   PUSH BX 
 0C45  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0C47  8B 16 0065 R          1	   MOV     DX, STARTPOS_Y_GHOST2     ; Y TO STA
				RT DRAWING AT 
 0C4B  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0C4F  8A 3C                 1	   MOV BH, [SI] 
 0C51                        1	   ??0049:;{ FOR(BP = 50; BD > 0; BP--) 
 0C51  8B 0E 0063 R          1	      MOV     CX, STARTPOS_X_GHOST2    ; X TO S
				TART 
 0C55  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0C59                        1	      ??0048:;{ FOR(DX = 50; DX > 0; DX--) 
 0C59  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0C5A  3A F8                 1	         CMP BH ,AL 
 0C5C  74 04                 1	         JE ??004A 
 0C5E  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0C60  CD 10                 1	         INT     10H 
 0C62                        1	         ??004A: 
 0C62  41                    1	         INC     CX         ; NEXT X POSITION 
 0C63  4F                    1	         DEC     DI 
 0C64  75 F3                 1	         JNZ     ??0048 
 0C66  42                    1	      INC     DX         ; NEXT Y POSITION 
 0C67  4D                    1	      DEC     BP 
 0C68  75 E7                 1	      JNZ     ??0049 
 0C6A  5B                    1	      POP BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-65


 0C6B  59                    1	      POP CX 
				   
				  
				
 0C6C				   ENDDRAW_GHOST2:
 0C6C  5A			   POP DX
 0C6D  59			   POP CX
 0C6E  5B			   POP BX
 0C6F  58			   POP AX 
 0C70  C3			   RETN
				;} 
 0C71				DRAW_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE SECOND GHOST
				;----------------------------------------------
				----------------------------
 0C71				MOVE_GHOST2 PROC NEAR
				;{
 0C71  50			   PUSH AX
 0C72  53			   PUSH BX
 0C73  51			   PUSH CX
 0C74  52			   PUSH DX
				
 0C75  83 3E 0067 R 01		   CMP EXISTS_GHOST2, 1
 0C7A  75 50			   JNE ENDMOVE_GHOST2
 0C7C				   DOWNRIGHT_GHOST2:
				   ;{ DOWNRIGHT MOVEMENT
 0C7C  83 3E 0069 R 00		      CMP MOTION_GHOST2, 0
 0C81  75 0D			      JNE DOWNLEFT_GHOST2
 0C83  83 06 0063 R 03		      ADD STARTPOS_X_GHOST2, 3
 0C88  83 06 0065 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0C8D  EB 3D 90			      JMP ENDMOVE_GHOST2
				   ;}
 0C90				   DOWNLEFT_GHOST2:
				   ;{ DOWNLEFT MOVEMENT
 0C90  83 3E 0069 R 01		      CMP MOTION_GHOST2, 1
 0C95  75 0D			      JNE UPRIGHT_GHOST2
 0C97  83 2E 0063 R 03		      SUB STARTPOS_X_GHOST2, 3
 0C9C  83 06 0065 R 03		      ADD STARTPOS_Y_GHOST2, 3
 0CA1  EB 29 90			      JMP ENDMOVE_GHOST2
				   ;}
 0CA4				   UPRIGHT_GHOST2:
				   ;{ UPRIGHT MOVEMENT
 0CA4  83 3E 0069 R 02		      CMP MOTION_GHOST2, 2
 0CA9  75 0D			      JNE UPLEFT_GHOST2
 0CAB  83 06 0063 R 03		      ADD STARTPOS_X_GHOST2, 3
 0CB0  83 2E 0065 R 03		      SUB STARTPOS_Y_GHOST2, 3
 0CB5  EB 15 90			      JMP ENDMOVE_GHOST2
				   ;}
 0CB8				   UPLEFT_GHOST2:
				   ;{ UPLEFT MOVEMENT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-66


 0CB8  83 3E 0069 R 03		      CMP MOTION_GHOST2, 3
 0CBD  75 0D			      JNE ENDMOVE_GHOST2
 0CBF  83 2E 0063 R 03		      SUB STARTPOS_X_GHOST2, 3
 0CC4  83 2E 0065 R 03		      SUB STARTPOS_Y_GHOST2, 3
 0CC9  EB 01 90			      JMP ENDMOVE_GHOST2
				   ;}
				   
 0CCC				   ENDMOVE_GHOST2:
 0CCC  5A			   POP DX
 0CCD  59			   POP CX
 0CCE  5B			   POP BX
 0CCF  58			   POP AX 
 0CD0  C3			   RETN
				;} 
 0CD1				MOVE_GHOST2 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; DRAWS THE THIRD GHOST
				;----------------------------------------------
				---------------------------
				
 0CD1				DRAW_GHOST3 PROC NEAR
				;{
 0CD1  50			   PUSH AX
 0CD2  53			   PUSH BX
 0CD3  51			   PUSH CX
 0CD4  52			   PUSH DX
				
 0CD5  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0CDA  75 6F			   JNE ENDDRAW_GHOST31
				   WITHIN_BOUNDARIES STARTPOS_X_GHOST3, STARTPO
				S_Y_GHOST3, GHOSTSIZE , EXISTS_GHOST3 ;CHECK WH
				ETHER WITHIN BOUNDARIES
 0CDC  50                    1	   PUSH AX 
 0CDD  53                    1	   PUSH BX 
 0CDE  51                    1	   PUSH CX 
 0CDF  52                    1	   PUSH DX 
 0CE0  C7 06 0077 R 0001     1	   MOV EXISTS_GHOST3, 1           ;FIRST ASSUME
				 THAT THE SHAPE IS WITHIN BOUNDARIES 
 0CE6                        1	   ??004B: 
 0CE6  8B 0E 0075 R          1	      MOV CX, STARTPOS_Y_GHOST3 
 0CEA  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0CEE  2B CB                 1	      SUB CX, BX 
 0CF0  83 F9 00              1	      CMP CX, 0 
 0CF3  7D 06                 1	      JGE ??004C 
 0CF5  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0CFB                        1	   ??004C: 
 0CFB  8B 0E 0075 R          1	      MOV CX, STARTPOS_Y_GHOST3 
 0CFF  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0D03  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0D07  2B D9                 1	      SUB BX, CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-67


 0D09  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D0C  7D 06                 1	      JGE ??004E 
 0D0E  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D14                        1	   ??004E: 
 0D14  8B 0E 0073 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D18  03 0E 0094 R          1	      ADD CX, GHOSTSIZE    ;GET THE Y COORDINAT
				E OF THE LOWEST POINT OF THE TANK 
 0D1C  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 0D20  2B D9                 1	      SUB BX, CX 
 0D22  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0D25  7D 06                 1	      JGE ??004D 
 0D27  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D2D                        1	   ??004D: 
 0D2D  8B 0E 0073 R          1	      MOV CX, STARTPOS_X_GHOST3 
 0D31  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0D35  2B CB                 1	      SUB CX, BX 
 0D37  83 F9 00              1	      CMP CX, 0 
 0D3A  7D 06                 1	      JGE ??004F 
 0D3C  C7 06 0077 R 0000     1	      MOV EXISTS_GHOST3, 0 
 0D42                        1	   ??004F: 
 0D42  5A                    1	   POP DX 
 0D43  59                    1	   POP CX 
 0D44  5B                    1	   POP BX 
 0D45  58                    1	   POP AX 
 0D46  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0D4B				   ENDDRAW_GHOST31:       ;JUST A MIDDLE LABEL 
				FOR JUMP
 0D4B  75 40			   JNE ENDDRAW_GHOST3
				   
				   
				
				   ;{FIRST TYPE 
 0D4D  83 3E 0081 R 00		   CMP TYPE_GHOST3, 0
 0D52  BE 0000 E		   MOV SI, OFFSET GHOST3_0
 0D55  74 0D			   JE DRAW3
				   ;}
				
				   ;{SECOND TYPE 
 0D57  83 3E 0081 R 01		   CMP TYPE_GHOST3, 1
 0D5C  BE 0000 E		   MOV SI, OFFSET GHOST3_1
 0D5F  74 03			   JE DRAW3
				   ;}
				
				   ;{THIRD TYPE
 0D61  BE 0000 E		   MOV SI, OFFSET GHOST3_2
				   ;}
				
 0D64				   DRAW3:
				   DRAW_OBJECT GHOSTSIZE, SI, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3
 0D64  51                    1	   PUSH CX 
 0D65  53                    1	   PUSH BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-68


 0D66  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0D68  8B 16 0075 R          1	   MOV     DX, STARTPOS_Y_GHOST3     ; Y TO STA
				RT DRAWING AT 
 0D6C  8B 2E 0094 R          1	   MOV BP, GHOSTSIZE 
 0D70  8A 3C                 1	   MOV BH, [SI] 
 0D72                        1	   ??0051:;{ FOR(BP = 50; BD > 0; BP--) 
 0D72  8B 0E 0073 R          1	      MOV     CX, STARTPOS_X_GHOST3    ; X TO S
				TART 
 0D76  8B 3E 0094 R          1	      MOV DI, GHOSTSIZE 
 0D7A                        1	      ??0050:;{ FOR(DX = 50; DX > 0; DX--) 
 0D7A  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0D7B  3A F8                 1	         CMP BH ,AL 
 0D7D  74 04                 1	         JE ??0052 
 0D7F  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0D81  CD 10                 1	         INT     10H 
 0D83                        1	         ??0052: 
 0D83  41                    1	         INC     CX         ; NEXT X POSITION 
 0D84  4F                    1	         DEC     DI 
 0D85  75 F3                 1	         JNZ     ??0050 
 0D87  42                    1	      INC     DX         ; NEXT Y POSITION 
 0D88  4D                    1	      DEC     BP 
 0D89  75 E7                 1	      JNZ     ??0051 
 0D8B  5B                    1	      POP BX 
 0D8C  59                    1	      POP CX 
				   
				  
				
 0D8D				   ENDDRAW_GHOST3:
 0D8D  5A			   POP DX
 0D8E  59			   POP CX
 0D8F  5B			   POP BX
 0D90  58			   POP AX 
 0D91  C3			   RETN
				;} 
 0D92				DRAW_GHOST3 ENDP
				
				
				;----------------------------------------------
				----------------------------
				; MOVES THE THIRD GHOST
				;----------------------------------------------
				---------------------------
 0D92				MOVE_GHOST3 PROC NEAR
				;{
 0D92  50			   PUSH AX
 0D93  53			   PUSH BX
 0D94  51			   PUSH CX
 0D95  52			   PUSH DX
				
 0D96  83 3E 0077 R 01		   CMP EXISTS_GHOST3, 1
 0D9B  75 50			   JNE ENDMOVE_GHOST3
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-69


 0D9D				   DOWNRIGHT_GHOST3:
				   ;{ DOWNRIGHT MOVEMENT
 0D9D  83 3E 0079 R 00		      CMP MOTION_GHOST3, 0
 0DA2  75 0D			      JNE DOWNLEFT_GHOST3
 0DA4  83 06 0073 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DA9  83 06 0075 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DAE  EB 3D 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DB1				   DOWNLEFT_GHOST3:
				   ;{ DOWNLEFT MOVEMENT
 0DB1  83 3E 0079 R 01		      CMP MOTION_GHOST3, 1
 0DB6  75 0D			      JNE UPRIGHT_GHOST3
 0DB8  83 2E 0073 R 03		      SUB STARTPOS_X_GHOST3, 3
 0DBD  83 06 0075 R 03		      ADD STARTPOS_Y_GHOST3, 3
 0DC2  EB 29 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DC5				   UPRIGHT_GHOST3:
				   ;{ UPRIGHT MOVEMENT
 0DC5  83 3E 0079 R 02		      CMP MOTION_GHOST3, 2
 0DCA  75 0D			      JNE UPLEFT_GHOST3
 0DCC  83 06 0073 R 03		      ADD STARTPOS_X_GHOST3, 3
 0DD1  83 2E 0075 R 03		      SUB STARTPOS_Y_GHOST3, 3
 0DD6  EB 15 90			      JMP ENDMOVE_GHOST3
				   ;}
 0DD9				   UPLEFT_GHOST3:
				   ;{ UPLEFT MOVEMENT
 0DD9  83 3E 0079 R 03		      CMP MOTION_GHOST3, 3
 0DDE  75 0D			      JNE ENDMOVE_GHOST3
 0DE0  83 2E 0073 R 03		      SUB STARTPOS_X_GHOST3, 3
 0DE5  83 2E 0075 R 03		      SUB STARTPOS_Y_GHOST3, 3
 0DEA  EB 01 90			      JMP ENDMOVE_GHOST3
				   ;}
				   
 0DED				   ENDMOVE_GHOST3:
 0DED  5A			   POP DX
 0DEE  59			   POP CX
 0DEF  5B			   POP BX
 0DF0  58			   POP AX 
 0DF1  C3			   RETN
				;} 
 0DF2				MOVE_GHOST3 ENDP
				
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; DRAWS THE PORTALS FROM WHICH GHOSTS COME FROM
				;----------------------------------------------
				-----------------------------------------------
				------
 0DF2				DRAW_PORTALS PROC NEAR 
				;{
				
				   ;{DRAW GHOST PORTAL
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-70


 0DF2  83 3E 0057 R 00		   CMP EXISTS_GHOST1, 0
 0DF7  74 2D			   JE NOGHOST1
 0DF9  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL1, STARTPOS_Y_PORTAL1 
 0DFD  51                    1	   PUSH CX 
 0DFE  53                    1	   PUSH BX 
 0DFF  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E01  8B 16 005F R          1	   MOV     DX, STARTPOS_Y_PORTAL1     ; Y TO ST
				ART DRAWING AT 
 0E05  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E09  8A 3C                 1	   MOV BH, [SI] 
 0E0B                        1	   ??0054:;{ FOR(BP = 50; BD > 0; BP--) 
 0E0B  8B 0E 005D R          1	      MOV     CX, STARTPOS_X_PORTAL1    ; X TO 
				START 
 0E0F  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E13                        1	      ??0053:;{ FOR(DX = 50; DX > 0; DX--) 
 0E13  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E14  3A F8                 1	         CMP BH ,AL 
 0E16  74 04                 1	         JE ??0055 
 0E18  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E1A  CD 10                 1	         INT     10H 
 0E1C                        1	         ??0055: 
 0E1C  41                    1	         INC     CX         ; NEXT X POSITION 
 0E1D  4F                    1	         DEC     DI 
 0E1E  75 F3                 1	         JNZ     ??0053 
 0E20  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E21  4D                    1	      DEC     BP 
 0E22  75 E7                 1	      JNZ     ??0054 
 0E24  5B                    1	      POP BX 
 0E25  59                    1	      POP CX 
				   ;}
				
 0E26				   NOGHOST1:
				   ;{DRAW GHOST PORTAL
 0E26  83 3E 0067 R 00		   CMP EXISTS_GHOST2, 0
 0E2B  74 2D			   JE NOGHOST2
 0E2D  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL2, STARTPOS_Y_PORTAL2 
 0E31  51                    1	   PUSH CX 
 0E32  53                    1	   PUSH BX 
 0E33  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E35  8B 16 006F R          1	   MOV     DX, STARTPOS_Y_PORTAL2     ; Y TO ST
				ART DRAWING AT 
 0E39  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E3D  8A 3C                 1	   MOV BH, [SI] 
 0E3F                        1	   ??0057:;{ FOR(BP = 50; BD > 0; BP--) 
 0E3F  8B 0E 006D R          1	      MOV     CX, STARTPOS_X_PORTAL2    ; X TO 
				START 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-71


 0E43  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E47                        1	      ??0056:;{ FOR(DX = 50; DX > 0; DX--) 
 0E47  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E48  3A F8                 1	         CMP BH ,AL 
 0E4A  74 04                 1	         JE ??0058 
 0E4C  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E4E  CD 10                 1	         INT     10H 
 0E50                        1	         ??0058: 
 0E50  41                    1	         INC     CX         ; NEXT X POSITION 
 0E51  4F                    1	         DEC     DI 
 0E52  75 F3                 1	         JNZ     ??0056 
 0E54  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E55  4D                    1	      DEC     BP 
 0E56  75 E7                 1	      JNZ     ??0057 
 0E58  5B                    1	      POP BX 
 0E59  59                    1	      POP CX 
				   ;}
 0E5A				   NOGHOST2:
				   ;{DRAW GHOST PORTAL
 0E5A  83 3E 0077 R 00		   CMP EXISTS_GHOST3, 0
 0E5F  74 2D			   JE NOGHOST3
 0E61  8D 36 0000 E		   LEA SI, PORTAL
				   DRAW_OBJECT PORTAL_SIZE, SI, STARTPOS_X_PORT
				AL3, STARTPOS_Y_PORTAL3 
 0E65  51                    1	   PUSH CX 
 0E66  53                    1	   PUSH BX 
 0E67  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0E69  8B 16 007F R          1	   MOV     DX, STARTPOS_Y_PORTAL3     ; Y TO ST
				ART DRAWING AT 
 0E6D  8B 2E 0092 R          1	   MOV BP, PORTAL_SIZE 
 0E71  8A 3C                 1	   MOV BH, [SI] 
 0E73                        1	   ??005A:;{ FOR(BP = 50; BD > 0; BP--) 
 0E73  8B 0E 007D R          1	      MOV     CX, STARTPOS_X_PORTAL3    ; X TO 
				START 
 0E77  8B 3E 0092 R          1	      MOV DI, PORTAL_SIZE 
 0E7B                        1	      ??0059:;{ FOR(DX = 50; DX > 0; DX--) 
 0E7B  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0E7C  3A F8                 1	         CMP BH ,AL 
 0E7E  74 04                 1	         JE ??005B 
 0E80  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0E82  CD 10                 1	         INT     10H 
 0E84                        1	         ??005B: 
 0E84  41                    1	         INC     CX         ; NEXT X POSITION 
 0E85  4F                    1	         DEC     DI 
 0E86  75 F3                 1	         JNZ     ??0059 
 0E88  42                    1	      INC     DX         ; NEXT Y POSITION 
 0E89  4D                    1	      DEC     BP 
 0E8A  75 E7                 1	      JNZ     ??005A 
 0E8C  5B                    1	      POP BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-72


 0E8D  59                    1	      POP CX 
				   ;}
 0E8E				   NOGHOST3:
 0E8E  C3			   RETN
				;}
 0E8F				DRAW_PORTALS ENDP
				
				
				;----------------------------------------------
				--------------------------------------------
				 ; _             _  _        _        
				 ;| |           | || |      | |       
				 ;| |__   _   _ | || |  ___ | |_  ___ 
				 ;| '_ \ | | | || || | / _ \| __|/ __|
				 ;| |_) || |_| || || ||  __/| |_ \__ \
				 ;|_.__/  \__,_||_||_| \___| \__||___/
				 ;---------------------------------------------
				----------------------------------------------
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 1 CANON SET ITS MOTI
				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
				;----------------------------------------------
				-----------------------------------------------
				------
 0E8F				FIRE_BULLET_1 PROC NEAR
				;{
 0E8F  50			   PUSH AX
 0E90  53			   PUSH BX
 0E91  51			   PUSH CX
 0E92  52			   PUSH DX
				   
				   ;IF(BULLET_1_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0E93  83 3E 003D R 01		   CMP BULLET_1_STATUS,1
 0E98  74 21			      JE RETN_FIRE_BUL_1   
				   ;ELSE DRAW A BULLET AT START POSITION
 0E9A  C7 06 003D R 0001	      MOV BULLET_1_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 0EA0  8B 1E 0015 R		      MOV BX , BULLET_1_START_POSITION_X
 0EA4  89 1E 0039 R		      MOV BULLET_1_POSITION_X, BX
 0EA8  8B 1E 0017 R		      MOV BX, BULLET_1_START_POSITION_Y
 0EAC  89 1E 003B R		      MOV BULLET_1_POSITION_Y, BX
 0EB0  8B 1E 0013 R		      MOV BX, ORIENTATION_PLAYER1 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 0EB4  89 1E 003F R		      MOV BULLET_1_MOTION_TYPE, BX
 0EB8  E8 0EC0 R		      CALL DRAW_BULLET_1    
				   
 0EBB				   RETN_FIRE_BUL_1:
 0EBB  5A			   POP DX
 0EBC  59			   POP CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-73


 0EBD  5B			   POP BX
 0EBE  58			   POP AX 
 0EBF  C3			   RETN
				;}
 0EC0				FIRE_BULLET_1 ENDP
				
				;----------------------------------------------
				--------------------------------
				; DRAWS A BULLET 1 AT BULLET_POSTION_1 X , Y IF
				 THE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 0EC0				DRAW_BULLET_1 PROC NEAR
				;{   
 0EC0  50			   PUSH AX
 0EC1  53			   PUSH BX
 0EC2  51			   PUSH CX
 0EC3  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 0EC4  83 3E 003D R 01		   CMP BULLET_1_STATUS, 1
 0EC9  75 6F			   JNE RETN_DRW_BUL_11   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_1_POSITION_X, BULLE
				T_1_POSITION_Y, BULLETSIZE , BULLET_1_STATUS ;R
				ETNURNS IN BULLETSTATUS 0 IF NOT WITHIN
 0ECB  50                    1	   PUSH AX 
 0ECC  53                    1	   PUSH BX 
 0ECD  51                    1	   PUSH CX 
 0ECE  52                    1	   PUSH DX 
 0ECF  C7 06 003D R 0001     1	   MOV BULLET_1_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 0ED5                        1	   ??005C: 
 0ED5  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0ED9  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 0EDD  2B CB                 1	      SUB CX, BX 
 0EDF  83 F9 00              1	      CMP CX, 0 
 0EE2  7D 06                 1	      JGE ??005D 
 0EE4  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0EEA                        1	   ??005D: 
 0EEA  8B 0E 003B R          1	      MOV CX, BULLET_1_POSITION_Y 
 0EEE  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0EF2  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 0EF6  2B D9                 1	      SUB BX, CX 
 0EF8  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0EFB  7D 06                 1	      JGE ??005F 
 0EFD  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F03                        1	   ??005F: 
 0F03  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0F07  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 0F0B  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-74


 0F0F  2B D9                 1	      SUB BX, CX 
 0F11  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 0F14  7D 06                 1	      JGE ??005E 
 0F16  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F1C                        1	   ??005E: 
 0F1C  8B 0E 0039 R          1	      MOV CX, BULLET_1_POSITION_X 
 0F20  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 0F24  2B CB                 1	      SUB CX, BX 
 0F26  83 F9 00              1	      CMP CX, 0 
 0F29  7D 06                 1	      JGE ??0060 
 0F2B  C7 06 003D R 0000     1	      MOV BULLET_1_STATUS, 0 
 0F31                        1	   ??0060: 
 0F31  5A                    1	   POP DX 
 0F32  59                    1	   POP CX 
 0F33  5B                    1	   POP BX 
 0F34  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 0F35  83 3E 003D R 01		      CMP BULLET_1_STATUS, 1
 0F3A				      RETN_DRW_BUL_11:      ;USELESS LABEL FOR 
				INTERMEDIATE JUMP
 0F3A  75 30			      JNE RETN_DRW_BUL_1
 0F3C  8B 1E 0096 R		      MOV BX , BULLETSIZE
 0F40  BE 0000 E		      MOV SI, OFFSET Bullet_1_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_1_PO
				SITION_X, BULLET_1_POSITION_Y
 0F43  51                    1	   PUSH CX 
 0F44  53                    1	   PUSH BX 
 0F45  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 0F47  8B 16 003B R          1	   MOV     DX, BULLET_1_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 0F4B  8B 2E 0096 R          1	   MOV BP, BULLETSIZE 
 0F4F  8A 3C                 1	   MOV BH, [SI] 
 0F51                        1	   ??0062:;{ FOR(BP = 50; BD > 0; BP--) 
 0F51  8B 0E 0039 R          1	      MOV     CX, BULLET_1_POSITION_X    ; X TO
				 START 
 0F55  8B 3E 0096 R          1	      MOV DI, BULLETSIZE 
 0F59                        1	      ??0061:;{ FOR(DX = 50; DX > 0; DX--) 
 0F59  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 0F5A  3A F8                 1	         CMP BH ,AL 
 0F5C  74 04                 1	         JE ??0063 
 0F5E  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 0F60  CD 10                 1	         INT     10H 
 0F62                        1	         ??0063: 
 0F62  41                    1	         INC     CX         ; NEXT X POSITION 
 0F63  4F                    1	         DEC     DI 
 0F64  75 F3                 1	         JNZ     ??0061 
 0F66  42                    1	      INC     DX         ; NEXT Y POSITION 
 0F67  4D                    1	      DEC     BP 
 0F68  75 E7                 1	      JNZ     ??0062 
 0F6A  5B                    1	      POP BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-75


 0F6B  59                    1	      POP CX 
 0F6C				   RETN_DRW_BUL_1:
 0F6C  5A			   POP DX
 0F6D  59			   POP CX
 0F6E  5B			   POP BX
 0F6F  58			   POP AX 
 0F70  C3			   RETN
				;}
 0F71				DRAW_BULLET_1 ENDP
				;----------------------------------------------
				--------------------------------
				; MOVES BULLET 1 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROC NEAREDUR
				E 
				;----------------------------------------------
				--------------------------------
 0F71				MOVE_BULLET_1 PROC NEAR 
				;{
 0F71  50			   PUSH AX
 0F72  53			   PUSH BX
 0F73  51			   PUSH CX
 0F74  52			   PUSH DX
				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 0F75  83 3E 003D R 00		   CMP BULLET_1_STATUS, 0
 0F7A  74 6D			   JE RETN_MOV_BUL_1
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPRIGH
				T, 2:RIGHT, 3:DOWNRIGHT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 0F7C  A1 0041 R		   MOV AX ,BULLET_1_SPEED                
				   ;{
 0F7F  83 3E 003F R 00		      CMP BULLET_1_MOTION_TYPE,0
 0F84  75 07			      JNE UPRIGHTB
 0F86  29 06 003B R		      SUB BULLET_1_POSITION_Y, AX         ;MOVE
				 WITH SPEED 
 0F8A  EB 5D 90			      JMP RETN_MOV_BUL_1
				   ;}
 0F8D				   UPRIGHTB:
				   ;{
 0F8D  83 3E 003F R 01		      CMP BULLET_1_MOTION_TYPE,1
 0F92  75 1E			      JNE RIGHTB
 0F94  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0F99  77 06			      JA UP_RIGHT_SPEED
 0F9B  2D 0004			      SUB AX,4
 0F9E  EB 04 90			      JMP UP_RIGHT_MOVEMENT
 0FA1				   UP_RIGHT_SPEED: 
 0FA1  2D 0008			      SUB AX,8                            ;UP R
				IGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHAN
				GE IT)
 0FA4				   UP_RIGHT_MOVEMENT:   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-76


 0FA4  01 06 0039 R		      ADD BULLET_1_POSITION_X,AX
 0FA8  29 06 003B R		      SUB BULLET_1_POSITION_Y,AX
 0FAC  A1 0041 R		      MOV AX,BULLET_1_SPEED               ;RESE
				T AX=SPEED OF BULLET 
 0FAF  EB 38 90			      JMP RETN_MOV_BUL_1
				   ;}
 0FB2				   RIGHTB:
				   ;{
 0FB2  83 3E 003F R 02		      CMP BULLET_1_MOTION_TYPE,2
 0FB7  75 07			      JNE DOWNRIGHTB
 0FB9  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FBD  EB 2A 90			      JMP RETN_MOV_BUL_1 
				   ;}
 0FC0				   DOWNRIGHTB:
				   ;{
 0FC0  83 3E 003F R 03		      CMP BULLET_1_MOTION_TYPE,3
 0FC5  75 1E			      JNE DOWNB
 0FC7  83 3E 0043 R 01		      CMP BULLET_1_SPEED_POWER_NUM,1
 0FCC  77 06			      JA DOWN_RIGHT_SPEED
 0FCE  2D 0004			      SUB AX,4
 0FD1  EB 04 90			      JMP DOWN_RIGHT_MOVEMENT
 0FD4				   DOWN_RIGHT_SPEED:
 0FD4  2D 0008			      SUB AX,8                           ;DOWN 
				RIGHT SPEED =NORMAL SPEED - 8      (YOU CAN CHA
				NGE IT)
 0FD7				   DOWN_RIGHT_MOVEMENT:  
 0FD7  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
 0FDB  01 06 0039 R		      ADD BULLET_1_POSITION_X, AX
 0FDF  A1 0041 R		      MOV AX,BULLET_1_SPEED
 0FE2  EB 05 90			      JMP RETN_MOV_BUL_1
				   ;}
 0FE5				   DOWNB:
				   ;{
 0FE5  01 06 003B R		      ADD BULLET_1_POSITION_Y, AX
				   ;}
				
 0FE9				   RETN_MOV_BUL_1:
 0FE9  5A			   POP DX
 0FEA  59			   POP CX
 0FEB  5B			   POP BX
 0FEC  58			   POP AX 
 0FED  C3			   RETN
				;}  
 0FEE				MOVE_BULLET_1 ENDP
				
				;----------------------------------------------
				-----------------------------------------------
				------
				; FIRES A BULLET FROM TANK 2 CANON SET ITS MOTI
				ON TYPE ONLY CALLED TO INTIALIZE A BULLET ONCE 
				FIRED
				;----------------------------------------------
				-----------------------------------------------
				------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-77


 0FEE				FIRE_BULLET2 PROC NEAR
				;{
 0FEE  50			   PUSH AX
 0FEF  53			   PUSH BX
 0FF0  51			   PUSH CX
 0FF1  52			   PUSH DX
				   
				   ;IF(BULLET_2_STATUS == 1) -> ANOTHER BULLET 
				EXISTS WE CAN'T FIRE 
 0FF2  83 3E 0049 R 01		   CMP BULLET_2_STATUS,1
 0FF7  74 21			      JE RETN_FIRE_BUL_2   
				   ;ELSE DRAW A BULLET AT START POSITION
 0FF9  C7 06 0049 R 0001	      MOV BULLET_2_STATUS, 1 ;TO FIRE A BULLET
				      ;INITAILIZE WITH BULLET START POSTION
 0FFF  8B 1E 0035 R		      MOV BX , BULLET_2_START_POSITION_X
 1003  89 1E 0045 R		      MOV BULLET_2_POSITION_X, BX
 1007  8B 1E 0037 R		      MOV BX, BULLET_2_START_POSITION_Y
 100B  89 1E 0047 R		      MOV BULLET_2_POSITION_Y, BX
 100F  8B 1E 0023 R		      MOV BX, ORIENTATION_PLAYER2 ;INTIALIZED T
				HE SAME AS THE TANK ORIENTAION
 1013  89 1E 004B R		      MOV BULLET_2_MOTION_TYPE, BX
 1017  E8 101F R		      CALL DRAW_BULLET_2    
				   
 101A				   RETN_FIRE_BUL_2:
 101A  5A			   POP DX
 101B  59			   POP CX
 101C  5B			   POP BX
 101D  58			   POP AX 
 101E  C3			   RETN
				;}
 101F				FIRE_BULLET2 ENDP
				;----------------------------------------------
				--------------------------------
				; DRAWS BULLET 2 AT BULLET_POSTION_1 X , Y IF T
				HE BULLET EXISTS (STATUS == 1)
				;----------------------------------------------
				--------------------------------
 101F				DRAW_BULLET_2 PROC NEAR
				;{   
 101F  50			   PUSH AX
 1020  53			   PUSH BX
 1021  51			   PUSH CX
 1022  52			   PUSH DX
				   ;IF(BULLET STATUS = 0) -> WE WILL NOT DRAW I
				T
 1023  83 3E 0049 R 01		   CMP BULLET_2_STATUS, 1
 1028  75 6F			   JNE RETN_DRW_BUL_22   
				   ;CHECK THE BULLET IS WITHIN BOUNDARIES
				   WITHIN_BOUNDARIES BULLET_2_POSITION_X, BULLE
				T_2_POSITION_Y, BULLETSIZE , BULLET_2_STATUS ;R
				ETNURNS IN BULLETSTATUS 0 IF NOT WITHIN
 102A  50                    1	   PUSH AX 
 102B  53                    1	   PUSH BX 
 102C  51                    1	   PUSH CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-78


 102D  52                    1	   PUSH DX 
 102E  C7 06 0049 R 0001     1	   MOV BULLET_2_STATUS, 1           ;FIRST ASSU
				ME THAT THE SHAPE IS WITHIN BOUNDARIES 
 1034                        1	   ??0064: 
 1034  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 1038  8B 1E 0000 R          1	      MOV BX, UPPERBOUND_Y 
 103C  2B CB                 1	      SUB CX, BX 
 103E  83 F9 00              1	      CMP CX, 0 
 1041  7D 06                 1	      JGE ??0065 
 1043  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1049                        1	   ??0065: 
 1049  8B 0E 0047 R          1	      MOV CX, BULLET_2_POSITION_Y 
 104D  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 1051  8B 1E 0002 R          1	      MOV BX, LOWERBOUND_Y 
 1055  2B D9                 1	      SUB BX, CX 
 1057  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 105A  7D 06                 1	      JGE ??0067 
 105C  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1062                        1	   ??0067: 
 1062  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 1066  03 0E 0096 R          1	      ADD CX, BULLETSIZE    ;GET THE Y COORDINA
				TE OF THE LOWEST POINT OF THE TANK 
 106A  8B 1E 0006 R          1	      MOV BX, RIGHTBOUND_X 
 106E  2B D9                 1	      SUB BX, CX 
 1070  83 FB 00              1	      CMP BX, 0  ;CURRENT Y DISTANCE TO THE BOU
				NDARY VS REMAINING DISTANCE TO THE BOUNDARY 
 1073  7D 06                 1	      JGE ??0066 
 1075  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 107B                        1	   ??0066: 
 107B  8B 0E 0045 R          1	      MOV CX, BULLET_2_POSITION_X 
 107F  8B 1E 0004 R          1	      MOV BX, LEFTBOUND_X 
 1083  2B CB                 1	      SUB CX, BX 
 1085  83 F9 00              1	      CMP CX, 0 
 1088  7D 06                 1	      JGE ??0068 
 108A  C7 06 0049 R 0000     1	      MOV BULLET_2_STATUS, 0 
 1090                        1	   ??0068: 
 1090  5A                    1	   POP DX 
 1091  59                    1	   POP CX 
 1092  5B                    1	   POP BX 
 1093  58                    1	   POP AX 
				   ;IF(IT IS NOT WITHIN BOUNDARIES DONNOT DRAW)
 1094  83 3E 0049 R 01		      CMP BULLET_2_STATUS, 1
 1099				      RETN_DRW_BUL_22:      ;USELESS LABEL FOR 
				INTERMEDIATE JUMP
 1099  75 2C			      JNE RETN_DRW_BUL_2
 109B  BE 0000 E		      MOV SI, OFFSET Bullet_2_Model
				      DRAW_OBJECT BULLETSIZE , SI , BULLET_2_PO
				SITION_X, BULLET_2_POSITION_Y
 109E  51                    1	   PUSH CX 
 109F  53                    1	   PUSH BX 
 10A0  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-79


 10A2  8B 16 0047 R          1	   MOV     DX, BULLET_2_POSITION_Y     ; Y TO S
				TART DRAWING AT 
 10A6  8B 2E 0096 R          1	   MOV BP, BULLETSIZE 
 10AA  8A 3C                 1	   MOV BH, [SI] 
 10AC                        1	   ??006A:;{ FOR(BP = 50; BD > 0; BP--) 
 10AC  8B 0E 0045 R          1	      MOV     CX, BULLET_2_POSITION_X    ; X TO
				 START 
 10B0  8B 3E 0096 R          1	      MOV DI, BULLETSIZE 
 10B4                        1	      ??0069:;{ FOR(DX = 50; DX > 0; DX--) 
 10B4  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 10B5  3A F8                 1	         CMP BH ,AL 
 10B7  74 04                 1	         JE ??006B 
 10B9  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 10BB  CD 10                 1	         INT     10H 
 10BD                        1	         ??006B: 
 10BD  41                    1	         INC     CX         ; NEXT X POSITION 
 10BE  4F                    1	         DEC     DI 
 10BF  75 F3                 1	         JNZ     ??0069 
 10C1  42                    1	      INC     DX         ; NEXT Y POSITION 
 10C2  4D                    1	      DEC     BP 
 10C3  75 E7                 1	      JNZ     ??006A 
 10C5  5B                    1	      POP BX 
 10C6  59                    1	      POP CX 
 10C7				   RETN_DRW_BUL_2:
 10C7  5A			   POP DX
 10C8  59			   POP CX
 10C9  5B			   POP BX
 10CA  58			   POP AX 
 10CB  C3			   RETN
				;}
 10CC				DRAW_BULLET_2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				; MOVES BULLET 2 IF IT EXISTS ACCORDING TO ITS 
				TYPE OF MOTION
				; NOTE BULLET SPEED IS CURRENTLY HARDCODED , IN
				CREASING IT CAN BE DONE FROM THIS PROC NEAREDUR
				E 
				;----------------------------------------------
				-------------------------------------------
 10CC				MOVE_BULLET_2 PROC NEAR 
				;{
 10CC  50			   PUSH AX
 10CD  53			   PUSH BX
 10CE  51			   PUSH CX
 10CF  52			   PUSH DX
				   ;IF(BULLETSTATUS == 0) -> BULLET DOESNT EXIS
				T
 10D0  83 3E 0049 R 00		   CMP BULLET_2_STATUS, 0
 10D5  74 6D			   JE RETN_MOV_BUL_2
				   ;ELSE IF THE BULLET EXISTS IT WILL BE MOVED 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-80


				ACCORDING TO ITS MOTIONTYPE(0:UPWARDS, 1:UPLEFT
				, 2:LEFT, 3:DOWNLEFT, 4:DOWN)
				   ;CHECK THAT IT WILL NOT GET OUT OF BOUNDARIE
				S
 10D7  A1 004D R		   MOV AX,BULLET_2_SPEED
				   ;{
 10DA  83 3E 004B R 00		      CMP BULLET_2_MOTION_TYPE,0
 10DF  75 07			      JNE UPLEFTB
 10E1  29 06 0047 R		      SUB BULLET_2_POSITION_Y, AX
 10E5  EB 5D 90			      JMP RETN_MOV_BUL_2
				   ;}
 10E8				   UPLEFTB:
				   ;{
 10E8  83 3E 004B R 01		      CMP BULLET_2_MOTION_TYPE,1
 10ED  75 1E			      JNE LEFTB
 10EF  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 10F4  77 06			      JA UP_LEFT
 10F6  2D 0005			      SUB AX,5
 10F9  EB 04 90			      JMP UP_LEFT_MOVEMENT
 10FC				   UP_LEFT:   
 10FC  2D 0008			      SUB AX,8
 10FF				   UP_LEFT_MOVEMENT:   
 10FF  29 06 0045 R		      SUB BULLET_2_POSITION_X,AX
 1103  29 06 0047 R		      SUB BULLET_2_POSITION_Y,AX
 1107  A1 004D R		      MOV AX,BULLET_2_SPEED
 110A  EB 38 90			      JMP RETN_MOV_BUL_2
				   ;}
 110D				   LEFTB:
				   ;{
 110D  83 3E 004B R 02		      CMP BULLET_2_MOTION_TYPE,2
 1112  75 07			      JNE DOWNLEFTB
 1114  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
				      
 1118  EB 2A 90			      JMP RETN_MOV_BUL_2 
				  ;}
 111B				   DOWNLEFTB:
				   ;{
 111B  83 3E 004B R 03		      CMP BULLET_2_MOTION_TYPE,3
 1120  75 1E			      JNE DOWNB2
 1122  83 3E 004F R 01		      CMP BULLET_2_SPEED_POWER_NUM,1
 1127  77 06			      JA DOWN_LEFT
 1129  2D 0005			   SUB AX,5
 112C  EB 04 90			      JMP DOWN_LEFT_MOVEMENT
 112F				   DOWN_LEFT:   
 112F  2D 0008			      SUB AX,8
 1132				   DOWN_LEFT_MOVEMENT:
 1132  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
 1136  29 06 0045 R		      SUB BULLET_2_POSITION_X, AX
 113A  A1 004D R		      MOV AX,BULLET_2_SPEED
 113D  EB 05 90			      JMP RETN_MOV_BUL_2
				   ;}
 1140				   DOWNB2:
				   ;{
 1140  01 06 0047 R		      ADD BULLET_2_POSITION_Y, AX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-81


				   ;}
				
 1144				   RETN_MOV_BUL_2:
 1144  5A			   POP DX
 1145  59			   POP CX
 1146  5B			   POP BX
 1147  58			   POP AX 
 1148  C3			   RETN
				;}  
 1149				MOVE_BULLET_2 ENDP
				 
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits tank 2 
				;----------------------------------------------
				-------------------------------------------
 1149				CHECK_HIT_BUL1_TANK2 PROC NEAR
				;{
 1149  50			   PUSH AX
 114A  53			   PUSH BX
 114B  51			   PUSH CX
 114C  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, BULLET_1_POSITION_X, 
				BULLET_1_POSITION_Y, BULLETSIZE, BULLET_1_STATU
				S
 114D  50                    1	    PUSH AX 
 114E  53                    1	    PUSH BX 
 114F  51                    1	    PUSH CX 
 1150  52                    1	    PUSH DX 
 1151  55                    1	    PUSH BP 
 1152  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1156  D1 E9                 1	        SHR CX, 1 
 1158  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 115C  D1 EA                 1	        SHR DX, 1 
 115E  BD 0000               1	        MOV BP , 0 
 1161  03 EA                 1	        ADD BP, DX 
 1163  03 E9                 1	        ADD BP, CX 
 1165  83 ED 03              1	        SUB BP ,3 
 1168  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 116B  03 C1                 1	        ADD AX, CX 
 116D  8B 1E 0039 R          1	        MOV BX, BULLET_1_POSITION_X 
 1171  03 DA                 1	        ADD BX, DX 
 1173  3B C3                 1	        CMP AX,BX 
 1175  7C 09                 1	        JL ??006C 
 1177  2B C3                 1	        SUB AX ,BX 
 1179  3B C5                 1	        CMP AX, BP 
 117B  77 30                 1	        JA ??006E 
 117D  EB 07 90              1	        JMP ??006D 
 1180                        1	        ??006C: 
 1180  2B D8                 1	            SUB BX, AX 
 1182  3B DD                 1	            CMP BX, BP 
 1184  77 27                 1	            JA ??006E 
 1186                        1	        ??006D: 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-82


 1186  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1189  03 C1                 1	        ADD AX, CX 
 118B  8B 1E 003B R          1	        MOV BX, BULLET_1_POSITION_Y 
 118F  03 DA                 1	        ADD BX, DX 
 1191  3B C3                 1	        CMP AX, BX 
 1193  7C 09                 1	        JL ??006F 
 1195  2B C3                 1	        SUB AX,BX 
 1197  3B C5                 1	        CMP AX, BP 
 1199  77 12                 1	        JA ??006E 
 119B  EB 07 90              1	        JMP ??0070 
 119E                        1	        ??006F: 
 119E  2B D8                 1	            SUB BX, AX 
 11A0  3B DD                 1	            CMP BX, BP 
 11A2  77 09                 1	            JA ??006E 
 11A4                        1	        ??0070: 
 11A4  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 11AA  EB 07 90              1	        JMP ??0071 
 11AD                        1	    ??006E: 
 11AD  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 11B3                        1	    ??0071: 
 11B3  5D                    1	    POP BP 
 11B4  5A                    1	    POP DX 
 11B5  59                    1	    POP CX 
 11B6  5B                    1	    POP BX 
 11B7  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 11B8  83 3E 003D R 00		         CMP BULLET_1_STATUS, 0
 11BD  75 19			         JNE NOHIT1
				         ;MAY BE SPLIT IN ANOTHER PROC NEAREDUR
				E JUSTFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 11BF  A1 0011 R		         MOV AX, TANK_DMG_1         
 11C2  39 06 001D R		         CMP TANK_HP_2,AX             ;IF HP<= 
				THE OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 11C6  7E 07			         JLE LOSER2
				         
 11C8  29 06 001D R		         SUB TANK_HP_2, AX            ;OTHERWIS
				E HIS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 11CC  EB 0A 90			         JMP NOHIT1
				
 11CF				      LOSER2: 
 11CF  C7 06 009E R 0001	      MOV WINNER ,1                   ;SET WHO 
				IS THE WINNER
 11D5  E8 1D11 R		      CALL PLAYER_LOST                ;TO PRINT
				 RESULTS    
				      ;}
 11D8				   NOHIT1:   
 11D8  5A			   POP DX
 11D9  59			   POP CX
 11DA  5B			   POP BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-83


 11DB  58			   POP AX
 11DC  C3			   RETN
				;}   
 11DD				CHECK_HIT_BUL1_TANK2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost1 
				;----------------------------------------------
				-------------------------------------------
 11DD				CHECK_HIT_BUL1_GHOST1 PROC NEAR
				;{
 11DD  50			   PUSH AX
 11DE  53			   PUSH BX
 11DF  51			   PUSH CX
 11E0  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_1_STATUS
				     
 11E1  50                    1	    PUSH AX 
 11E2  53                    1	    PUSH BX 
 11E3  51                    1	    PUSH CX 
 11E4  52                    1	    PUSH DX 
 11E5  55                    1	    PUSH BP 
 11E6  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 11EA  D1 E9                 1	        SHR CX, 1 
 11EC  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 11F0  D1 EA                 1	        SHR DX, 1 
 11F2  BD 0000               1	        MOV BP , 0 
 11F5  03 EA                 1	        ADD BP, DX 
 11F7  03 E9                 1	        ADD BP, CX 
 11F9  83 ED 03              1	        SUB BP ,3 
 11FC  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 11FF  03 C1                 1	        ADD AX, CX 
 1201  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 1205  03 DA                 1	        ADD BX, DX 
 1207  3B C3                 1	        CMP AX,BX 
 1209  7C 09                 1	        JL ??0072 
 120B  2B C3                 1	        SUB AX ,BX 
 120D  3B C5                 1	        CMP AX, BP 
 120F  77 30                 1	        JA ??0074 
 1211  EB 07 90              1	        JMP ??0073 
 1214                        1	        ??0072: 
 1214  2B D8                 1	            SUB BX, AX 
 1216  3B DD                 1	            CMP BX, BP 
 1218  77 27                 1	            JA ??0074 
 121A                        1	        ??0073: 
 121A  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 121D  03 C1                 1	        ADD AX, CX 
 121F  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1223  03 DA                 1	        ADD BX, DX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-84


 1225  3B C3                 1	        CMP AX, BX 
 1227  7C 09                 1	        JL ??0075 
 1229  2B C3                 1	        SUB AX,BX 
 122B  3B C5                 1	        CMP AX, BP 
 122D  77 12                 1	        JA ??0074 
 122F  EB 07 90              1	        JMP ??0076 
 1232                        1	        ??0075: 
 1232  2B D8                 1	            SUB BX, AX 
 1234  3B DD                 1	            CMP BX, BP 
 1236  77 09                 1	            JA ??0074 
 1238                        1	        ??0076: 
 1238  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 123E  EB 07 90              1	        JMP ??0077 
 1241                        1	    ??0074: 
 1241  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 1247                        1	    ??0077: 
 1247  5D                    1	    POP BP 
 1248  5A                    1	    POP DX 
 1249  59                    1	    POP CX 
 124A  5B                    1	    POP BX 
 124B  58                    1	    POP AX 
 124C  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1251  75 48			      JNE GHOST1_LIVES
				
				      ;POWER-UPS
				      ;( 
 1253  83 3E 005B R 00		      CMP POWERUP_GHOST1,0         ;IF POWERUPS
				=0 IT WILL INCREASE THE HP BY 1 UNLESS HE HAS H
				P=10
 1258  74 02			      JZ HP_LIMIT1
 125A  75 0F			      JNZ SPEED_INCREASE1
				      ;)
 125C				      HP_LIMIT1:
				      ;(
 125C  83 3E 000D R 0A		      CMP TANK_HP_1,10                     
 1261  74 2C			      JZ T1_KILL_G1                ;IF HP=10 KI
				LL THE GHOST WITHOUT INCREASING HP
 1263  83 06 000D R 01		      ADD TANK_HP_1,1
 1268  EB 25 90			      JMP T1_KILL_G1
				      ;)
				
 126B				      SPEED_INCREASE1:
				      ;(
 126B  83 3E 005B R 01		      CMP POWERUP_GHOST1,1         ;IF POWERUPS
				=1 THE SPEED WILL INCREASE BUT IT HAS LIMIT (AT
				 MOST 3 TIMES)
 1270  74 0B			      JZ SPEED_LIMIT1
 1272  75 00			      JNZ INCREASE_DAMAGE1
				      ;)
 1274				      INCREASE_DAMAGE1:
				      ;(
 1274  C7 06 0011 R 0002	          MOV TANK_DMG_1,2        ;IF POWERUPS=
				2  THE TANK DAMAGE WILL BE 2 
 127A  EB 13 90			          JMP T1_KILL_G1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-85


				      ;)
 127D				      SPEED_LIMIT1:
				      ;(
 127D  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3  
				        ;IF NUMBER OF SPEED POWERUPS =3 KILL TH
				E GHOST ONLY
 1282  7D 0B			               JNL T1_KILL_G1
 1284  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1287  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 128B  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 128F				    T1_KILL_G1:  
				     ;(      
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 128F  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1295  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
				      
 129B				   GHOST1_LIVES:   
 129B  5A			   POP DX
 129C  59			   POP CX
 129D  5B			   POP BX
 129E  58			   POP AX
 129F  C3			   RETN
				;}   
 12A0				CHECK_HIT_BUL1_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 12A0				CHECK_HIT_BUL1_GHOST2 PROC NEAR
				;{
 12A0  50			   PUSH AX
 12A1  53			   PUSH BX
 12A2  51			   PUSH CX
 12A3  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_1_STATUS
				     
 12A4  50                    1	    PUSH AX 
 12A5  53                    1	    PUSH BX 
 12A6  51                    1	    PUSH CX 
 12A7  52                    1	    PUSH DX 
 12A8  55                    1	    PUSH BP 
 12A9  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 12AD  D1 E9                 1	        SHR CX, 1 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-86


 12AF  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 12B3  D1 EA                 1	        SHR DX, 1 
 12B5  BD 0000               1	        MOV BP , 0 
 12B8  03 EA                 1	        ADD BP, DX 
 12BA  03 E9                 1	        ADD BP, CX 
 12BC  83 ED 03              1	        SUB BP ,3 
 12BF  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 12C2  03 C1                 1	        ADD AX, CX 
 12C4  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 12C8  03 DA                 1	        ADD BX, DX 
 12CA  3B C3                 1	        CMP AX,BX 
 12CC  7C 09                 1	        JL ??0078 
 12CE  2B C3                 1	        SUB AX ,BX 
 12D0  3B C5                 1	        CMP AX, BP 
 12D2  77 30                 1	        JA ??007A 
 12D4  EB 07 90              1	        JMP ??0079 
 12D7                        1	        ??0078: 
 12D7  2B D8                 1	            SUB BX, AX 
 12D9  3B DD                 1	            CMP BX, BP 
 12DB  77 27                 1	            JA ??007A 
 12DD                        1	        ??0079: 
 12DD  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 12E0  03 C1                 1	        ADD AX, CX 
 12E2  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 12E6  03 DA                 1	        ADD BX, DX 
 12E8  3B C3                 1	        CMP AX, BX 
 12EA  7C 09                 1	        JL ??007B 
 12EC  2B C3                 1	        SUB AX,BX 
 12EE  3B C5                 1	        CMP AX, BP 
 12F0  77 12                 1	        JA ??007A 
 12F2  EB 07 90              1	        JMP ??007C 
 12F5                        1	        ??007B: 
 12F5  2B D8                 1	            SUB BX, AX 
 12F7  3B DD                 1	            CMP BX, BP 
 12F9  77 09                 1	            JA ??007A 
 12FB                        1	        ??007C: 
 12FB  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1301  EB 07 90              1	        JMP ??007D 
 1304                        1	    ??007A: 
 1304  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 130A                        1	    ??007D: 
 130A  5D                    1	    POP BP 
 130B  5A                    1	    POP DX 
 130C  59                    1	    POP CX 
 130D  5B                    1	    POP BX 
 130E  58                    1	    POP AX 
 130F  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1314  75 48			      JNE GHOST2_LIVES
				      ;POWER-UPS
				      ;( 
 1316  83 3E 006B R 00		      CMP POWERUP_GHOST2,0
 131B  74 02			      JZ HP_LIMIT2
 131D  75 0F			      JNZ SPEED_INCREASE2
				      ;)
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-87


 131F				      HP_LIMIT2:
				      ;(
 131F  83 3E 000D R 0A		      CMP TANK_HP_1,10
 1324  74 2C			      JZ T1_KILL_G2
 1326  83 06 000D R 01		      ADD TANK_HP_1,1
 132B  EB 25 90			      JMP T1_KILL_G2
				      ;)
				
 132E				      SPEED_INCREASE2:
				      ;(
 132E  83 3E 006B R 01		      CMP POWERUP_GHOST2,1
 1333  74 0B			      JZ SPEED_LIMIT2
 1335  75 00			      JNZ INCREASE_DAMAGE2
				      ;)
 1337				      INCREASE_DAMAGE2:
				      ;(
				           
 1337  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 133D  EB 13 90			          JMP T1_KILL_G2
				      ;)
 1340				      SPEED_LIMIT2:
				      ;( 
 1340  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 1345  7D 0B			               JNL T1_KILL_G2
 1347  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 134A  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 134E  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1352				    T1_KILL_G2:  
				      ;(
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1352  C7 06 0067 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1358  81 2E 0065 R 0258	      SUB STARTPOS_Y_GHOST2, 600
				      ;)
 135E				   GHOST2_LIVES:   
 135E  5A			   POP DX
 135F  59			   POP CX
 1360  5B			   POP BX
 1361  58			   POP AX
 1362  C3			   RETN
				;}   
 1363				CHECK_HIT_BUL1_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 1 hits Ghost3 
				;----------------------------------------------
				-------------------------------------------
 1363				CHECK_HIT_BUL1_GHOST3 PROC NEAR
				;{
 1363  50			   PUSH AX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-88


 1364  53			   PUSH BX
 1365  51			   PUSH CX
 1366  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
				LET_1_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_1_STATUS
				     
 1367  50                    1	    PUSH AX 
 1368  53                    1	    PUSH BX 
 1369  51                    1	    PUSH CX 
 136A  52                    1	    PUSH DX 
 136B  55                    1	    PUSH BP 
 136C  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 1370  D1 E9                 1	        SHR CX, 1 
 1372  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1376  D1 EA                 1	        SHR DX, 1 
 1378  BD 0000               1	        MOV BP , 0 
 137B  03 EA                 1	        ADD BP, DX 
 137D  03 E9                 1	        ADD BP, CX 
 137F  83 ED 03              1	        SUB BP ,3 
 1382  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 1385  03 C1                 1	        ADD AX, CX 
 1387  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 138B  03 DA                 1	        ADD BX, DX 
 138D  3B C3                 1	        CMP AX,BX 
 138F  7C 09                 1	        JL ??007E 
 1391  2B C3                 1	        SUB AX ,BX 
 1393  3B C5                 1	        CMP AX, BP 
 1395  77 30                 1	        JA ??0080 
 1397  EB 07 90              1	        JMP ??007F 
 139A                        1	        ??007E: 
 139A  2B D8                 1	            SUB BX, AX 
 139C  3B DD                 1	            CMP BX, BP 
 139E  77 27                 1	            JA ??0080 
 13A0                        1	        ??007F: 
 13A0  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 13A3  03 C1                 1	        ADD AX, CX 
 13A5  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 13A9  03 DA                 1	        ADD BX, DX 
 13AB  3B C3                 1	        CMP AX, BX 
 13AD  7C 09                 1	        JL ??0081 
 13AF  2B C3                 1	        SUB AX,BX 
 13B1  3B C5                 1	        CMP AX, BP 
 13B3  77 12                 1	        JA ??0080 
 13B5  EB 07 90              1	        JMP ??0082 
 13B8                        1	        ??0081: 
 13B8  2B D8                 1	            SUB BX, AX 
 13BA  3B DD                 1	            CMP BX, BP 
 13BC  77 09                 1	            JA ??0080 
 13BE                        1	        ??0082: 
 13BE  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 13C4  EB 07 90              1	        JMP ??0083 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-89


 13C7                        1	    ??0080: 
 13C7  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 13CD                        1	    ??0083: 
 13CD  5D                    1	    POP BP 
 13CE  5A                    1	    POP DX 
 13CF  59                    1	    POP CX 
 13D0  5B                    1	    POP BX 
 13D1  58                    1	    POP AX 
 13D2  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 13D7  75 48			      JNE GHOST3_LIVES
				      ;POWER-UPS
				      ;( 
 13D9  83 3E 007B R 00		      CMP POWERUP_GHOST3,0
 13DE  74 02			      JZ HP_LIMIT3
 13E0  75 0F			      JNZ SPEED_INCREASE3
				      ;)
 13E2				      HP_LIMIT3:
				      ;(
 13E2  83 3E 000D R 0A		      CMP TANK_HP_1,10
 13E7  74 2C			      JZ T1_KILL_G3
 13E9  83 06 000D R 01		      ADD TANK_HP_1,1
 13EE  EB 25 90			      JMP T1_KILL_G3
				      ;)
				
 13F1				      SPEED_INCREASE3:
				      ;(
 13F1  83 3E 007B R 01		      CMP POWERUP_GHOST3,1
 13F6  74 0B			      JZ SPEED_LIMIT3
 13F8  75 00			      JNZ INCREASE_DAMAGE3
				      ;)
 13FA				      INCREASE_DAMAGE3:
				      ;(
				          
 13FA  C7 06 0011 R 0002	          MOV TANK_DMG_1,2
 1400  EB 13 90			          JMP T1_KILL_G3
				      ;)
 1403				      SPEED_LIMIT3:
				      ;(
 1403  83 3E 0043 R 03		               CMP BULLET_1_SPEED_POWER_NUM,3
 1408  7D 0B			               JNL T1_KILL_G3
 140A  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 140D  01 06 0041 R		               ADD BULLET_1_SPEED,AX
 1411  FF 06 0043 R		               INC BULLET_1_SPEED_POWER_NUM
				      ;)
 1415				    T1_KILL_G3:  
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 1415  C7 06 0077 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST3 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 141B  81 2E 0075 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 1421				   GHOST3_LIVES:   
 1421  5A			   POP DX
 1422  59			   POP CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-90


 1423  5B			   POP BX
 1424  58			   POP AX
 1425  C3			   RETN
				;}   
 1426				CHECK_HIT_BUL1_GHOST3 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits tank 1 
				;----------------------------------------------
				-------------------------------------------
 1426				CHECK_HIT_BUL2_TANK1 PROC NEAR
				;{
 1426  50			   PUSH AX
 1427  53			   PUSH BX
 1428  51			   PUSH CX
 1429  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, BULLET_2_POSITION_X, 
				BULLET_2_POSITION_Y, BULLETSIZE, BULLET_2_STATU
				S
 142A  50                    1	    PUSH AX 
 142B  53                    1	    PUSH BX 
 142C  51                    1	    PUSH CX 
 142D  52                    1	    PUSH DX 
 142E  55                    1	    PUSH BP 
 142F  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1433  D1 E9                 1	        SHR CX, 1 
 1435  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 1439  D1 EA                 1	        SHR DX, 1 
 143B  BD 0000               1	        MOV BP , 0 
 143E  03 EA                 1	        ADD BP, DX 
 1440  03 E9                 1	        ADD BP, CX 
 1442  83 ED 03              1	        SUB BP ,3 
 1445  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 1448  03 C1                 1	        ADD AX, CX 
 144A  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 144E  03 DA                 1	        ADD BX, DX 
 1450  3B C3                 1	        CMP AX,BX 
 1452  7C 09                 1	        JL ??0084 
 1454  2B C3                 1	        SUB AX ,BX 
 1456  3B C5                 1	        CMP AX, BP 
 1458  77 30                 1	        JA ??0086 
 145A  EB 07 90              1	        JMP ??0085 
 145D                        1	        ??0084: 
 145D  2B D8                 1	            SUB BX, AX 
 145F  3B DD                 1	            CMP BX, BP 
 1461  77 27                 1	            JA ??0086 
 1463                        1	        ??0085: 
 1463  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 1466  03 C1                 1	        ADD AX, CX 
 1468  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
 146C  03 DA                 1	        ADD BX, DX 
 146E  3B C3                 1	        CMP AX, BX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-91


 1470  7C 09                 1	        JL ??0087 
 1472  2B C3                 1	        SUB AX,BX 
 1474  3B C5                 1	        CMP AX, BP 
 1476  77 12                 1	        JA ??0086 
 1478  EB 07 90              1	        JMP ??0088 
 147B                        1	        ??0087: 
 147B  2B D8                 1	            SUB BX, AX 
 147D  3B DD                 1	            CMP BX, BP 
 147F  77 09                 1	            JA ??0086 
 1481                        1	        ??0088: 
 1481  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 1487  EB 07 90              1	        JMP ??0089 
 148A                        1	    ??0086: 
 148A  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1490                        1	    ??0089: 
 1490  5D                    1	    POP BP 
 1491  5A                    1	    POP DX 
 1492  59                    1	    POP CX 
 1493  5B                    1	    POP BX 
 1494  58                    1	    POP AX 
				      ;IF(BULLET1 STATUS == 0) -> THEN THERE IS
				 A COLLISION 
				      ;BULLET1 SHOULD BE REMOVED WHILE TANK2 SH
				OULD LOSE HP ACCORDING TO BULLET DAMAGE
				      ;{
 1495  83 3E 0049 R 00		         CMP BULLET_2_STATUS, 0
 149A  75 19			         JNE NOHIT2
				         ;MAY BE SPLIT IN ANOTHER PROC NEAREDUR
				E JUSTFOR TESTING FOR NOW
				         ;SUBTRACT THE DAMAGE FROM TANK2
 149C  A1 0021 R		         MOV AX, TANK_DMG_2        ;IF HP<= THE
				 OTHER TANK DAMAGE THIS PLAYER WILL LOSE
 149F  39 06 000D R		         CMP TANK_HP_1,AX
 14A3  7E 07			         JLE LOSER1
 14A5  29 06 000D R		         SUB TANK_HP_1, AX         ;OTHERWISE H
				IS HP WILL DECREASE BY THE OTHER TANK DAMAGE
 14A9  EB 0A 90			         JMP NOHIT2
 14AC				         LOSER1:
 14AC  C7 06 009E R 0002	         MOV WINNER,2
 14B2  E8 1D11 R		         CALL PLAYER_LOST
				      ;}
 14B5				   NOHIT2:   
 14B5  5A			   POP DX
 14B6  59			   POP CX
 14B7  5B			   POP BX
 14B8  58			   POP AX
 14B9  C3			   RETN
				;}   
 14BA				CHECK_HIT_BUL2_TANK1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost1 
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-92


				-------------------------------------------
 14BA				CHECK_HIT_BUL2_GHOST1 PROC NEAR
				;{
 14BA  50			   PUSH AX
 14BB  53			   PUSH BX
 14BC  51			   PUSH CX
 14BD  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST1
				, STARTPOS_Y_GHOST1, GHOSTSIZE, BULLET_2_STATUS
				     
 14BE  50                    1	    PUSH AX 
 14BF  53                    1	    PUSH BX 
 14C0  51                    1	    PUSH CX 
 14C1  52                    1	    PUSH DX 
 14C2  55                    1	    PUSH BP 
 14C3  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 14C7  D1 E9                 1	        SHR CX, 1 
 14C9  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 14CD  D1 EA                 1	        SHR DX, 1 
 14CF  BD 0000               1	        MOV BP , 0 
 14D2  03 EA                 1	        ADD BP, DX 
 14D4  03 E9                 1	        ADD BP, CX 
 14D6  83 ED 03              1	        SUB BP ,3 
 14D9  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 14DC  03 C1                 1	        ADD AX, CX 
 14DE  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 14E2  03 DA                 1	        ADD BX, DX 
 14E4  3B C3                 1	        CMP AX,BX 
 14E6  7C 09                 1	        JL ??008A 
 14E8  2B C3                 1	        SUB AX ,BX 
 14EA  3B C5                 1	        CMP AX, BP 
 14EC  77 30                 1	        JA ??008C 
 14EE  EB 07 90              1	        JMP ??008B 
 14F1                        1	        ??008A: 
 14F1  2B D8                 1	            SUB BX, AX 
 14F3  3B DD                 1	            CMP BX, BP 
 14F5  77 27                 1	            JA ??008C 
 14F7                        1	        ??008B: 
 14F7  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 14FA  03 C1                 1	        ADD AX, CX 
 14FC  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 1500  03 DA                 1	        ADD BX, DX 
 1502  3B C3                 1	        CMP AX, BX 
 1504  7C 09                 1	        JL ??008D 
 1506  2B C3                 1	        SUB AX,BX 
 1508  3B C5                 1	        CMP AX, BP 
 150A  77 12                 1	        JA ??008C 
 150C  EB 07 90              1	        JMP ??008E 
 150F                        1	        ??008D: 
 150F  2B D8                 1	            SUB BX, AX 
 1511  3B DD                 1	            CMP BX, BP 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-93


 1513  77 09                 1	            JA ??008C 
 1515                        1	        ??008E: 
 1515  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 151B  EB 07 90              1	        JMP ??008F 
 151E                        1	    ??008C: 
 151E  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 1524                        1	    ??008F: 
 1524  5D                    1	    POP BP 
 1525  5A                    1	    POP DX 
 1526  59                    1	    POP CX 
 1527  5B                    1	    POP BX 
 1528  58                    1	    POP AX 
 1529  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 152E  75 48			      JNE GHOST1_LIVES2
				      ;POWER-UPS
				      ;( 
 1530  83 3E 005B R 00		      CMP POWERUP_GHOST1,0
 1535  74 02			      JZ HP2_LIMIT1
 1537  75 0F			      JNZ SPEED2_INCREASE1
				      ;)
 1539				      HP2_LIMIT1:
				      ;(
 1539  83 3E 001D R 0A		      CMP TANK_HP_2,10
 153E  74 2C			      JZ T2_KILL_G1
 1540  83 06 001D R 01		      ADD TANK_HP_2,1
 1545  EB 25 90			      JMP T2_KILL_G1
				      ;)
				
 1548				      SPEED2_INCREASE1:
				      ;(
 1548  83 3E 005B R 01		      CMP POWERUP_GHOST1,1
 154D  74 0B			      JZ SPEED2_LIMIT1
 154F  75 00			      JNZ INCREASE2_DAMAGE1
				      ;)
 1551				      INCREASE2_DAMAGE1:
				      ;(
				           
 1551  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 1557  EB 13 90			          JMP T2_KILL_G1
				      ;)
 155A				      SPEED2_LIMIT1:
				      ;(
 155A  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 155F  7D 0B			               JNL T2_KILL_G1
 1561  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1564  01 06 004D R		               ADD BULLET_2_SPEED,AX
 1568  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 1 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 156C				      T2_KILL_G1:
				      ;(
 156C  C7 06 0057 R 0000	      MOV EXISTS_GHOST1, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-94


				BEING HIT WHILE TRANSPARENT
 1572  81 2E 0055 R 0258	      SUB STARTPOS_Y_GHOST1, 600
				      ;)
 1578				   GHOST1_LIVES2:   
 1578  5A			   POP DX
 1579  59			   POP CX
 157A  5B			   POP BX
 157B  58			   POP AX
 157C  C3			   RETN
				;}   
 157D				CHECK_HIT_BUL2_GHOST1 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost2 
				;----------------------------------------------
				-------------------------------------------
 157D				CHECK_HIT_BUL2_GHOST2 PROC NEAR
				;{
 157D  50			   PUSH AX
 157E  53			   PUSH BX
 157F  51			   PUSH CX
 1580  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST2
				, STARTPOS_Y_GHOST2, GHOSTSIZE, BULLET_2_STATUS
				     
 1581  50                    1	    PUSH AX 
 1582  53                    1	    PUSH BX 
 1583  51                    1	    PUSH CX 
 1584  52                    1	    PUSH DX 
 1585  55                    1	    PUSH BP 
 1586  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 158A  D1 E9                 1	        SHR CX, 1 
 158C  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1590  D1 EA                 1	        SHR DX, 1 
 1592  BD 0000               1	        MOV BP , 0 
 1595  03 EA                 1	        ADD BP, DX 
 1597  03 E9                 1	        ADD BP, CX 
 1599  83 ED 03              1	        SUB BP ,3 
 159C  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 159F  03 C1                 1	        ADD AX, CX 
 15A1  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 15A5  03 DA                 1	        ADD BX, DX 
 15A7  3B C3                 1	        CMP AX,BX 
 15A9  7C 09                 1	        JL ??0090 
 15AB  2B C3                 1	        SUB AX ,BX 
 15AD  3B C5                 1	        CMP AX, BP 
 15AF  77 30                 1	        JA ??0092 
 15B1  EB 07 90              1	        JMP ??0091 
 15B4                        1	        ??0090: 
 15B4  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-95


 15B6  3B DD                 1	            CMP BX, BP 
 15B8  77 27                 1	            JA ??0092 
 15BA                        1	        ??0091: 
 15BA  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 15BD  03 C1                 1	        ADD AX, CX 
 15BF  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 15C3  03 DA                 1	        ADD BX, DX 
 15C5  3B C3                 1	        CMP AX, BX 
 15C7  7C 09                 1	        JL ??0093 
 15C9  2B C3                 1	        SUB AX,BX 
 15CB  3B C5                 1	        CMP AX, BP 
 15CD  77 12                 1	        JA ??0092 
 15CF  EB 07 90              1	        JMP ??0094 
 15D2                        1	        ??0093: 
 15D2  2B D8                 1	            SUB BX, AX 
 15D4  3B DD                 1	            CMP BX, BP 
 15D6  77 09                 1	            JA ??0092 
 15D8                        1	        ??0094: 
 15D8  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 15DE  EB 07 90              1	        JMP ??0095 
 15E1                        1	    ??0092: 
 15E1  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 15E7                        1	    ??0095: 
 15E7  5D                    1	    POP BP 
 15E8  5A                    1	    POP DX 
 15E9  59                    1	    POP CX 
 15EA  5B                    1	    POP BX 
 15EB  58                    1	    POP AX 
 15EC  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 15F1  75 48			      JNE GHOST2_LIVES2
				       ;POWER-UPS
				      ;( 
 15F3  83 3E 006B R 00		      CMP POWERUP_GHOST2,0
 15F8  74 02			      JZ HP2_LIMIT2
 15FA  75 0F			      JNZ SPEED2_INCREASE2
				      ;)
 15FC				      HP2_LIMIT2:
				      ;(
 15FC  83 3E 001D R 0A		      CMP TANK_HP_2,10
 1601  74 2C			      JZ T2_KILL_G2
 1603  83 06 001D R 01		      ADD TANK_HP_2,1
 1608  EB 25 90			      JMP T2_KILL_G2
				      ;)
				
 160B				      SPEED2_INCREASE2:
				      ;(
 160B  83 3E 006B R 01		      CMP POWERUP_GHOST2,1
 1610  74 0B			      JZ SPEED2_LIMIT2
 1612  75 00			      JNZ INCREASE2_DAMAGE2
				      ;)
 1614				      INCREASE2_DAMAGE2:
				      ;(
				         
 1614  C7 06 0021 R 0002	         MOV TANK_DMG_2,2
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-96


 161A  EB 13 90			         JMP T2_KILL_G2
				      ;)
 161D				      SPEED2_LIMIT2:
				      ;(
 161D  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 1622  7D 0B			               JNL T2_KILL_G2
 1624  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 1627  01 06 004D R		               ADD BULLET_2_SPEED,AX
 162B  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 2 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 162F				      T2_KILL_G2:
				      
 162F  C7 06 0067 R 0000	      MOV EXISTS_GHOST2, 0
				      ;THROW GHOST2 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 1635  81 2E 0065 R 0258	      SUB STARTPOS_Y_GHOST2, 600
 163B				   GHOST2_LIVES2:   
 163B  5A			   POP DX
 163C  59			   POP CX
 163D  5B			   POP BX
 163E  58			   POP AX
 163F  C3			   RETN
				;}   
 1640				CHECK_HIT_BUL2_GHOST2 ENDP
				
				;----------------------------------------------
				-------------------------------------------
				;Detects if bullet 2 hits Ghost3 
				;----------------------------------------------
				-------------------------------------------
 1640				CHECK_HIT_BUL2_GHOST3 PROC NEAR
				;{
 1640  50			   PUSH AX
 1641  53			   PUSH BX
 1642  51			   PUSH CX
 1643  52			   PUSH DX
				      ;(BULLET_1_STATUS IS 0 IF IT COLLIDES 1 O
				THERWISE)
				      DETECT_COLLISION BULLET_2_POSITION_X, BUL
				LET_2_POSITION_Y, BULLETSIZE, STARTPOS_X_GHOST3
				, STARTPOS_Y_GHOST3, GHOSTSIZE, BULLET_2_STATUS
				     
 1644  50                    1	    PUSH AX 
 1645  53                    1	    PUSH BX 
 1646  51                    1	    PUSH CX 
 1647  52                    1	    PUSH DX 
 1648  55                    1	    PUSH BP 
 1649  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 164D  D1 E9                 1	        SHR CX, 1 
 164F  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1653  D1 EA                 1	        SHR DX, 1 
 1655  BD 0000               1	        MOV BP , 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-97


 1658  03 EA                 1	        ADD BP, DX 
 165A  03 E9                 1	        ADD BP, CX 
 165C  83 ED 03              1	        SUB BP ,3 
 165F  A1 0045 R             1	        MOV AX, BULLET_2_POSITION_X 
 1662  03 C1                 1	        ADD AX, CX 
 1664  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 1668  03 DA                 1	        ADD BX, DX 
 166A  3B C3                 1	        CMP AX,BX 
 166C  7C 09                 1	        JL ??0096 
 166E  2B C3                 1	        SUB AX ,BX 
 1670  3B C5                 1	        CMP AX, BP 
 1672  77 30                 1	        JA ??0098 
 1674  EB 07 90              1	        JMP ??0097 
 1677                        1	        ??0096: 
 1677  2B D8                 1	            SUB BX, AX 
 1679  3B DD                 1	            CMP BX, BP 
 167B  77 27                 1	            JA ??0098 
 167D                        1	        ??0097: 
 167D  A1 0047 R             1	        MOV AX, BULLET_2_POSITION_Y 
 1680  03 C1                 1	        ADD AX, CX 
 1682  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 1686  03 DA                 1	        ADD BX, DX 
 1688  3B C3                 1	        CMP AX, BX 
 168A  7C 09                 1	        JL ??0099 
 168C  2B C3                 1	        SUB AX,BX 
 168E  3B C5                 1	        CMP AX, BP 
 1690  77 12                 1	        JA ??0098 
 1692  EB 07 90              1	        JMP ??009A 
 1695                        1	        ??0099: 
 1695  2B D8                 1	            SUB BX, AX 
 1697  3B DD                 1	            CMP BX, BP 
 1699  77 09                 1	            JA ??0098 
 169B                        1	        ??009A: 
 169B  C7 06 0049 R 0000     1	        MOV BULLET_2_STATUS, 0 
 16A1  EB 07 90              1	        JMP ??009B 
 16A4                        1	    ??0098: 
 16A4  C7 06 0049 R 0001     1	    MOV BULLET_2_STATUS, 1 
 16AA                        1	    ??009B: 
 16AA  5D                    1	    POP BP 
 16AB  5A                    1	    POP DX 
 16AC  59                    1	    POP CX 
 16AD  5B                    1	    POP BX 
 16AE  58                    1	    POP AX 
 16AF  83 3E 0049 R 00		      CMP BULLET_2_STATUS, 0
 16B4  75 48			      JNE GHOST3_LIVES2
				      ;POWER-UPS
				      ;( 
 16B6  83 3E 007B R 00		      CMP POWERUP_GHOST3,0
 16BB  74 02			      JZ HP2_LIMIT3
 16BD  75 0F			      JNZ SPEED2_INCREASE3
				      ;)
 16BF				      HP2_LIMIT3:
				      ;(
 16BF  83 3E 001D R 0A		      CMP TANK_HP_2,10
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-98


 16C4  74 2C			      JZ T2_KILL_G3
 16C6  83 06 001D R 01		      ADD TANK_HP_2,1
 16CB  EB 25 90			      JMP T2_KILL_G3
				      ;)
				
 16CE				      SPEED2_INCREASE3:
				      ;(
 16CE  83 3E 007B R 01		      CMP POWERUP_GHOST3,1
 16D3  74 0B			      JZ SPEED2_LIMIT3
 16D5  75 00			      JNZ INCREASE2_DAMAGE3
				      ;)
 16D7				      INCREASE2_DAMAGE3:
				      ;(
				         
 16D7  C7 06 0021 R 0002	          MOV TANK_DMG_2,2
 16DD  EB 13 90			          JMP T2_KILL_G3
				      ;)
 16E0				      SPEED2_LIMIT3:
				      ;(
 16E0  83 3E 004F R 03		               CMP BULLET_2_SPEED_POWER_NUM,3
 16E5  7D 0B			               JNL T2_KILL_G3
 16E7  A1 0051 R		               MOV AX,BULLET_SPEED_POWERUPS
 16EA  01 06 004D R		               ADD BULLET_2_SPEED,AX
 16EE  FF 06 004F R		               INC BULLET_2_SPEED_POWER_NUM
				      ;)
				      ;GHOST 3 SHOULD DIE, WE MAY CHECK FOR POW
				ER-UPS HERE
 16F2				      T2_KILL_G3:
 16F2  C7 06 0077 R 0000	      MOV EXISTS_GHOST3, 0
				      ;THROW GHOST1 OUT OF BOUNDARIES TO AVOID 
				BEING HIT WHILE TRANSPARENT
 16F8  81 2E 0075 R 0258	      SUB STARTPOS_Y_GHOST3, 600
 16FE				   GHOST3_LIVES2:   
 16FE  5A			   POP DX
 16FF  59			   POP CX
 1700  5B			   POP BX
 1701  58			   POP AX
 1702  C3			   RETN
				;}   
 1703				CHECK_HIT_BUL2_GHOST3 ENDP
				;----------------------------------------------
				-------------------------------------------
				;Detects The collision of The two bullets 
				;----------------------------------------------
				-------------------------------------------
 1703				BULLETS_HIT PROC NEAR
				;{
 1703  50			   PUSH AX
 1704  53			   PUSH BX
 1705  51			   PUSH CX
 1706  52			   PUSH DX
				      ;DETECT THE COLLISION BETWEEN BOTH BULLET
				S
				      DETECT_COLLISION BULLET_1_POSITION_X, BUL
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-99


				LET_1_POSITION_Y, BULLETSIZE, BULLET_2_POSITION
				_X,BULLET_2_POSITION_Y,BULLETSIZE, BULLET_1_STA
				TUS
 1707  50                    1	    PUSH AX 
 1708  53                    1	    PUSH BX 
 1709  51                    1	    PUSH CX 
 170A  52                    1	    PUSH DX 
 170B  55                    1	    PUSH BP 
 170C  8B 0E 0096 R          1	        MOV CX, BULLETSIZE 
 1710  D1 E9                 1	        SHR CX, 1 
 1712  8B 16 0096 R          1	        MOV DX, BULLETSIZE 
 1716  D1 EA                 1	        SHR DX, 1 
 1718  BD 0000               1	        MOV BP , 0 
 171B  03 EA                 1	        ADD BP, DX 
 171D  03 E9                 1	        ADD BP, CX 
 171F  83 ED 03              1	        SUB BP ,3 
 1722  A1 0039 R             1	        MOV AX, BULLET_1_POSITION_X 
 1725  03 C1                 1	        ADD AX, CX 
 1727  8B 1E 0045 R          1	        MOV BX, BULLET_2_POSITION_X 
 172B  03 DA                 1	        ADD BX, DX 
 172D  3B C3                 1	        CMP AX,BX 
 172F  7C 09                 1	        JL ??009C 
 1731  2B C3                 1	        SUB AX ,BX 
 1733  3B C5                 1	        CMP AX, BP 
 1735  77 30                 1	        JA ??009E 
 1737  EB 07 90              1	        JMP ??009D 
 173A                        1	        ??009C: 
 173A  2B D8                 1	            SUB BX, AX 
 173C  3B DD                 1	            CMP BX, BP 
 173E  77 27                 1	            JA ??009E 
 1740                        1	        ??009D: 
 1740  A1 003B R             1	        MOV AX, BULLET_1_POSITION_Y 
 1743  03 C1                 1	        ADD AX, CX 
 1745  8B 1E 0047 R          1	        MOV BX, BULLET_2_POSITION_Y 
 1749  03 DA                 1	        ADD BX, DX 
 174B  3B C3                 1	        CMP AX, BX 
 174D  7C 09                 1	        JL ??009F 
 174F  2B C3                 1	        SUB AX,BX 
 1751  3B C5                 1	        CMP AX, BP 
 1753  77 12                 1	        JA ??009E 
 1755  EB 07 90              1	        JMP ??00A0 
 1758                        1	        ??009F: 
 1758  2B D8                 1	            SUB BX, AX 
 175A  3B DD                 1	            CMP BX, BP 
 175C  77 09                 1	            JA ??009E 
 175E                        1	        ??00A0: 
 175E  C7 06 003D R 0000     1	        MOV BULLET_1_STATUS, 0 
 1764  EB 07 90              1	        JMP ??00A1 
 1767                        1	    ??009E: 
 1767  C7 06 003D R 0001     1	    MOV BULLET_1_STATUS, 1 
 176D                        1	    ??00A1: 
 176D  5D                    1	    POP BP 
 176E  5A                    1	    POP DX 
 176F  59                    1	    POP CX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-100


 1770  5B                    1	    POP BX 
 1771  58                    1	    POP AX 
 1772  83 3E 003D R 00		      CMP BULLET_1_STATUS, 0
 1777  75 06			      JNE NOT_HITTING
				      ;MAKE THE OTHER BULLET DISAPPEAR ALSO
 1779  C7 06 0049 R 0000	      MOV BULLET_2_STATUS, 0
 177F				   NOT_HITTING:
 177F  5A			   POP DX
 1780  59			   POP CX
 1781  5B			   POP BX
 1782  58			   POP AX
 1783  C3			   RETN
				;}
 1784				BULLETS_HIT ENDP
				;----------------------------------------------
				-----------------------------------------
				;   _____  _    _   ____    _____  _______     
				       _______         _   _  _  __
				;  / ____|| |  | | / __ \  / ____||__   __|   _
				__    |__   __| /\    | \ | || |/ /
				; | |  __ | |__| || |  | || (___     | |     ( 
				_ )      | |   /  \   |  \| || ' / 
				; | | |_ ||  __  || |  | | \___ \    | |     / 
				_ \/\    | |  / /\ \  | . ` ||  <  
				; | |__| || |  | || |__| | ____) |   | |    | (
				_>  <    | | / ____ \ | |\  || . \ 
				;  \_____||_|  |_| \____/ |_____/    |_|     \_
				__/\/    |_|/_/    \_\|_| \_||_|\_\
				;----------------------------------------------
				-----------------------------------------
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 1784				CHECK_HIT_GHOST1_TANK1 PROC NEAR
 1784  50			   PUSH AX
 1785  53			   PUSH BX
 1786  51			   PUSH CX
 1787  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 1788  50                    1	    PUSH AX 
 1789  53                    1	    PUSH BX 
 178A  51                    1	    PUSH CX 
 178B  52                    1	    PUSH DX 
 178C  55                    1	    PUSH BP 
 178D  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1791  D1 E9                 1	        SHR CX, 1 
 1793  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1797  D1 EA                 1	        SHR DX, 1 
 1799  BD 0000               1	        MOV BP , 0 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-101


 179C  03 EA                 1	        ADD BP, DX 
 179E  03 E9                 1	        ADD BP, CX 
 17A0  83 ED 03              1	        SUB BP ,3 
 17A3  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 17A6  03 C1                 1	        ADD AX, CX 
 17A8  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 17AC  03 DA                 1	        ADD BX, DX 
 17AE  3B C3                 1	        CMP AX,BX 
 17B0  7C 09                 1	        JL ??00A2 
 17B2  2B C3                 1	        SUB AX ,BX 
 17B4  3B C5                 1	        CMP AX, BP 
 17B6  77 30                 1	        JA ??00A4 
 17B8  EB 07 90              1	        JMP ??00A3 
 17BB                        1	        ??00A2: 
 17BB  2B D8                 1	            SUB BX, AX 
 17BD  3B DD                 1	            CMP BX, BP 
 17BF  77 27                 1	            JA ??00A4 
 17C1                        1	        ??00A3: 
 17C1  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 17C4  03 C1                 1	        ADD AX, CX 
 17C6  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 17CA  03 DA                 1	        ADD BX, DX 
 17CC  3B C3                 1	        CMP AX, BX 
 17CE  7C 09                 1	        JL ??00A5 
 17D0  2B C3                 1	        SUB AX,BX 
 17D2  3B C5                 1	        CMP AX, BP 
 17D4  77 12                 1	        JA ??00A4 
 17D6  EB 07 90              1	        JMP ??00A6 
 17D9                        1	        ??00A5: 
 17D9  2B D8                 1	            SUB BX, AX 
 17DB  3B DD                 1	            CMP BX, BP 
 17DD  77 09                 1	            JA ??00A4 
 17DF                        1	        ??00A6: 
 17DF  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 17E5  EB 07 90              1	        JMP ??00A7 
 17E8                        1	    ??00A4: 
 17E8  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 17EE                        1	    ??00A7: 
 17EE  5D                    1	    POP BP 
 17EF  5A                    1	    POP DX 
 17F0  59                    1	    POP CX 
 17F1  5B                    1	    POP BX 
 17F2  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 17F3  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 17F8  75 1B			         JNE TANK1_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 17FA  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1800  83 3E 000D R 01		         CMP TANK_HP_1,1                     ;C
				HECK IF THE TANK LIFE POINTS IS STILL ABOVE 1
 1805  75 09			         JNZ DECREASE_HP1_G1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-102


 1807  C7 06 009E R 0001	         MOV WINNER ,1                       ;I
				F IT IS THE LAST LIFE THIS PLAYER WILL LOSE
 180D  E8 1D11 R		         CALL PLAYER_LOST 
 1810				      DECREASE_HP1_G1:
 1810  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 1815				   TANK1_SAFE1:   
 1815  5A			   POP DX
 1816  5B			   POP BX
 1817  59			   POP CX
 1818  5A			   POP DX
 1819  C3			   RETN
 181A				CHECK_HIT_GHOST1_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 1
				;----------------------------------------------
				-----------------------------------------
 181A				CHECK_HIT_GHOST2_TANK1 PROC NEAR
 181A  50			   PUSH AX
 181B  53			   PUSH BX
 181C  51			   PUSH CX
 181D  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 181E  50                    1	    PUSH AX 
 181F  53                    1	    PUSH BX 
 1820  51                    1	    PUSH CX 
 1821  52                    1	    PUSH DX 
 1822  55                    1	    PUSH BP 
 1823  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1827  D1 E9                 1	        SHR CX, 1 
 1829  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 182D  D1 EA                 1	        SHR DX, 1 
 182F  BD 0000               1	        MOV BP , 0 
 1832  03 EA                 1	        ADD BP, DX 
 1834  03 E9                 1	        ADD BP, CX 
 1836  83 ED 03              1	        SUB BP ,3 
 1839  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 183C  03 C1                 1	        ADD AX, CX 
 183E  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1842  03 DA                 1	        ADD BX, DX 
 1844  3B C3                 1	        CMP AX,BX 
 1846  7C 09                 1	        JL ??00A8 
 1848  2B C3                 1	        SUB AX ,BX 
 184A  3B C5                 1	        CMP AX, BP 
 184C  77 30                 1	        JA ??00AA 
 184E  EB 07 90              1	        JMP ??00A9 
 1851                        1	        ??00A8: 
 1851  2B D8                 1	            SUB BX, AX 
 1853  3B DD                 1	            CMP BX, BP 
 1855  77 27                 1	            JA ??00AA 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-103


 1857                        1	        ??00A9: 
 1857  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 185A  03 C1                 1	        ADD AX, CX 
 185C  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1860  03 DA                 1	        ADD BX, DX 
 1862  3B C3                 1	        CMP AX, BX 
 1864  7C 09                 1	        JL ??00AB 
 1866  2B C3                 1	        SUB AX,BX 
 1868  3B C5                 1	        CMP AX, BP 
 186A  77 12                 1	        JA ??00AA 
 186C  EB 07 90              1	        JMP ??00AC 
 186F                        1	        ??00AB: 
 186F  2B D8                 1	            SUB BX, AX 
 1871  3B DD                 1	            CMP BX, BP 
 1873  77 09                 1	            JA ??00AA 
 1875                        1	        ??00AC: 
 1875  C7 06 0067 R 0000     1	        MOV EXISTS_GHOST2, 0 
 187B  EB 07 90              1	        JMP ??00AD 
 187E                        1	    ??00AA: 
 187E  C7 06 0067 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1884                        1	    ??00AD: 
 1884  5D                    1	    POP BP 
 1885  5A                    1	    POP DX 
 1886  59                    1	    POP CX 
 1887  5B                    1	    POP BX 
 1888  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1889  83 3E 0067 R 00		         CMP EXISTS_GHOST2,0
 188E  75 1B			         JNE TANK1_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1890  81 2E 0065 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1896  83 3E 000D R 01		         CMP TANK_HP_1,1
 189B  75 09			         JNZ DECREASE_HP1_G2
 189D  C7 06 009E R 0002	         MOV WINNER,2
 18A3  E8 1D11 R		         CALL PLAYER_LOST
				
 18A6				      DECREASE_HP1_G2:
 18A6  83 2E 000D R 01		         SUB TANK_HP_1,1
				      ;}   
 18AB				   TANK1_SAFE2:   
 18AB  5A			   POP DX
 18AC  5B			   POP BX
 18AD  59			   POP CX
 18AE  5A			   POP DX
 18AF  C3			   RETN
 18B0				CHECK_HIT_GHOST2_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST3 HITS TANK 1
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-104


				-----------------------------------------
 18B0				CHECK_HIT_GHOST3_TANK1 PROC NEAR
 18B0  50			   PUSH AX
 18B1  53			   PUSH BX
 18B2  51			   PUSH CX
 18B3  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER1, STAR
				TPOS_Y_PLAYER1, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 18B4  50                    1	    PUSH AX 
 18B5  53                    1	    PUSH BX 
 18B6  51                    1	    PUSH CX 
 18B7  52                    1	    PUSH DX 
 18B8  55                    1	    PUSH BP 
 18B9  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 18BD  D1 E9                 1	        SHR CX, 1 
 18BF  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 18C3  D1 EA                 1	        SHR DX, 1 
 18C5  BD 0000               1	        MOV BP , 0 
 18C8  03 EA                 1	        ADD BP, DX 
 18CA  03 E9                 1	        ADD BP, CX 
 18CC  83 ED 03              1	        SUB BP ,3 
 18CF  A1 0009 R             1	        MOV AX, STARTPOS_X_PLAYER1 
 18D2  03 C1                 1	        ADD AX, CX 
 18D4  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 18D8  03 DA                 1	        ADD BX, DX 
 18DA  3B C3                 1	        CMP AX,BX 
 18DC  7C 09                 1	        JL ??00AE 
 18DE  2B C3                 1	        SUB AX ,BX 
 18E0  3B C5                 1	        CMP AX, BP 
 18E2  77 30                 1	        JA ??00B0 
 18E4  EB 07 90              1	        JMP ??00AF 
 18E7                        1	        ??00AE: 
 18E7  2B D8                 1	            SUB BX, AX 
 18E9  3B DD                 1	            CMP BX, BP 
 18EB  77 27                 1	            JA ??00B0 
 18ED                        1	        ??00AF: 
 18ED  A1 000B R             1	        MOV AX, STARTPOS_Y_PLAYER1 
 18F0  03 C1                 1	        ADD AX, CX 
 18F2  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 18F6  03 DA                 1	        ADD BX, DX 
 18F8  3B C3                 1	        CMP AX, BX 
 18FA  7C 09                 1	        JL ??00B1 
 18FC  2B C3                 1	        SUB AX,BX 
 18FE  3B C5                 1	        CMP AX, BP 
 1900  77 12                 1	        JA ??00B0 
 1902  EB 07 90              1	        JMP ??00B2 
 1905                        1	        ??00B1: 
 1905  2B D8                 1	            SUB BX, AX 
 1907  3B DD                 1	            CMP BX, BP 
 1909  77 09                 1	            JA ??00B0 
 190B                        1	        ??00B2: 
 190B  C7 06 0077 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1911  EB 07 90              1	        JMP ??00B3 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-105


 1914                        1	    ??00B0: 
 1914  C7 06 0077 R 0001     1	    MOV EXISTS_GHOST3, 1 
 191A                        1	    ??00B3: 
 191A  5D                    1	    POP BP 
 191B  5A                    1	    POP DX 
 191C  59                    1	    POP CX 
 191D  5B                    1	    POP BX 
 191E  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 191F  83 3E 0077 R 00		         CMP EXISTS_GHOST3,0
 1924  75 1B			         JNE TANK1_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1926  81 2E 0075 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 192C  83 3E 000D R 01		         CMP TANK_HP_1,1
 1931  75 09			         JNZ DECREASE_HP1_G3
 1933  C7 06 009E R 0002	         MOV WINNER,2
 1939  E8 1D11 R		         CALL PLAYER_LOST
				        
 193C				      DECREASE_HP1_G3:
 193C  83 2E 000D R 01		         SUB TANK_HP_1,1
				        
				      ;}   
 1941				   TANK1_SAFE3:   
 1941  5A			   POP DX
 1942  5B			   POP BX
 1943  59			   POP CX
 1944  5A			   POP DX
 1945  C3			   RETN
 1946				CHECK_HIT_GHOST3_TANK1 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST1 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 1946				CHECK_HIT_GHOST1_TANK2 PROC NEAR
 1946  50			   PUSH AX
 1947  53			   PUSH BX
 1948  51			   PUSH CX
 1949  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST1, ST
				ARTPOS_Y_GHOST1, GHOSTSIZE, EXISTS_GHOST1
 194A  50                    1	    PUSH AX 
 194B  53                    1	    PUSH BX 
 194C  51                    1	    PUSH CX 
 194D  52                    1	    PUSH DX 
 194E  55                    1	    PUSH BP 
 194F  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1953  D1 E9                 1	        SHR CX, 1 
 1955  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-106


 1959  D1 EA                 1	        SHR DX, 1 
 195B  BD 0000               1	        MOV BP , 0 
 195E  03 EA                 1	        ADD BP, DX 
 1960  03 E9                 1	        ADD BP, CX 
 1962  83 ED 03              1	        SUB BP ,3 
 1965  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1968  03 C1                 1	        ADD AX, CX 
 196A  8B 1E 0053 R          1	        MOV BX, STARTPOS_X_GHOST1 
 196E  03 DA                 1	        ADD BX, DX 
 1970  3B C3                 1	        CMP AX,BX 
 1972  7C 09                 1	        JL ??00B4 
 1974  2B C3                 1	        SUB AX ,BX 
 1976  3B C5                 1	        CMP AX, BP 
 1978  77 30                 1	        JA ??00B6 
 197A  EB 07 90              1	        JMP ??00B5 
 197D                        1	        ??00B4: 
 197D  2B D8                 1	            SUB BX, AX 
 197F  3B DD                 1	            CMP BX, BP 
 1981  77 27                 1	            JA ??00B6 
 1983                        1	        ??00B5: 
 1983  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1986  03 C1                 1	        ADD AX, CX 
 1988  8B 1E 0055 R          1	        MOV BX, STARTPOS_Y_GHOST1 
 198C  03 DA                 1	        ADD BX, DX 
 198E  3B C3                 1	        CMP AX, BX 
 1990  7C 09                 1	        JL ??00B7 
 1992  2B C3                 1	        SUB AX,BX 
 1994  3B C5                 1	        CMP AX, BP 
 1996  77 12                 1	        JA ??00B6 
 1998  EB 07 90              1	        JMP ??00B8 
 199B                        1	        ??00B7: 
 199B  2B D8                 1	            SUB BX, AX 
 199D  3B DD                 1	            CMP BX, BP 
 199F  77 09                 1	            JA ??00B6 
 19A1                        1	        ??00B8: 
 19A1  C7 06 0057 R 0000     1	        MOV EXISTS_GHOST1, 0 
 19A7  EB 07 90              1	        JMP ??00B9 
 19AA                        1	    ??00B6: 
 19AA  C7 06 0057 R 0001     1	    MOV EXISTS_GHOST1, 1 
 19B0                        1	    ??00B9: 
 19B0  5D                    1	    POP BP 
 19B1  5A                    1	    POP DX 
 19B2  59                    1	    POP CX 
 19B3  5B                    1	    POP BX 
 19B4  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 19B5  83 3E 0057 R 00		         CMP EXISTS_GHOST1,0
 19BA  75 1B			         JNE TANK2_SAFE1
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 19BC  81 2E 0055 R 0258	         SUB STARTPOS_Y_GHOST1, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 19C2  83 3E 001D R 01		         CMP TANK_HP_2,1
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-107


 19C7  75 09			         JNZ DECREASE_HP2_G1
 19C9  C7 06 009E R 0001	         MOV WINNER,1
 19CF  E8 1D11 R		         CALL PLAYER_LOST
				        
 19D2				      DECREASE_HP2_G1:
 19D2  83 2E 001D R 01		        SUB TANK_HP_2,1
				
				      ;}   
 19D7				   TANK2_SAFE1:   
 19D7  5A			   POP DX
 19D8  5B			   POP BX
 19D9  59			   POP CX
 19DA  5A			   POP DX
 19DB  C3			   RETN
 19DC				CHECK_HIT_GHOST1_TANK2 ENDP
				
				;----------------------------------------------
				-----------------------------------------
				;CHECK IF GHOST2 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 19DC				CHECK_HIT_GHOST2_TANK2 PROC NEAR
 19DC  50			   PUSH AX
 19DD  53			   PUSH BX
 19DE  51			   PUSH CX
 19DF  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST2, ST
				ARTPOS_Y_GHOST2, GHOSTSIZE, EXISTS_GHOST2
 19E0  50                    1	    PUSH AX 
 19E1  53                    1	    PUSH BX 
 19E2  51                    1	    PUSH CX 
 19E3  52                    1	    PUSH DX 
 19E4  55                    1	    PUSH BP 
 19E5  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 19E9  D1 E9                 1	        SHR CX, 1 
 19EB  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 19EF  D1 EA                 1	        SHR DX, 1 
 19F1  BD 0000               1	        MOV BP , 0 
 19F4  03 EA                 1	        ADD BP, DX 
 19F6  03 E9                 1	        ADD BP, CX 
 19F8  83 ED 03              1	        SUB BP ,3 
 19FB  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 19FE  03 C1                 1	        ADD AX, CX 
 1A00  8B 1E 0063 R          1	        MOV BX, STARTPOS_X_GHOST2 
 1A04  03 DA                 1	        ADD BX, DX 
 1A06  3B C3                 1	        CMP AX,BX 
 1A08  7C 09                 1	        JL ??00BA 
 1A0A  2B C3                 1	        SUB AX ,BX 
 1A0C  3B C5                 1	        CMP AX, BP 
 1A0E  77 30                 1	        JA ??00BC 
 1A10  EB 07 90              1	        JMP ??00BB 
 1A13                        1	        ??00BA: 
 1A13  2B D8                 1	            SUB BX, AX 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-108


 1A15  3B DD                 1	            CMP BX, BP 
 1A17  77 27                 1	            JA ??00BC 
 1A19                        1	        ??00BB: 
 1A19  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1A1C  03 C1                 1	        ADD AX, CX 
 1A1E  8B 1E 0065 R          1	        MOV BX, STARTPOS_Y_GHOST2 
 1A22  03 DA                 1	        ADD BX, DX 
 1A24  3B C3                 1	        CMP AX, BX 
 1A26  7C 09                 1	        JL ??00BD 
 1A28  2B C3                 1	        SUB AX,BX 
 1A2A  3B C5                 1	        CMP AX, BP 
 1A2C  77 12                 1	        JA ??00BC 
 1A2E  EB 07 90              1	        JMP ??00BE 
 1A31                        1	        ??00BD: 
 1A31  2B D8                 1	            SUB BX, AX 
 1A33  3B DD                 1	            CMP BX, BP 
 1A35  77 09                 1	            JA ??00BC 
 1A37                        1	        ??00BE: 
 1A37  C7 06 0067 R 0000     1	        MOV EXISTS_GHOST2, 0 
 1A3D  EB 07 90              1	        JMP ??00BF 
 1A40                        1	    ??00BC: 
 1A40  C7 06 0067 R 0001     1	    MOV EXISTS_GHOST2, 1 
 1A46                        1	    ??00BF: 
 1A46  5D                    1	    POP BP 
 1A47  5A                    1	    POP DX 
 1A48  59                    1	    POP CX 
 1A49  5B                    1	    POP BX 
 1A4A  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1A4B  83 3E 0067 R 00		         CMP EXISTS_GHOST2,0
 1A50  75 1B			         JNE TANK2_SAFE2
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1A52  81 2E 0065 R 0258	         SUB STARTPOS_Y_GHOST2, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
 1A58  83 3E 001D R 01		           CMP TANK_HP_2,1
 1A5D  75 09			           JNZ DECREASE_HP2_G2
 1A5F  C7 06 009E R 0001	           MOV WINNER,1
 1A65  E8 1D11 R		           CALL PLAYER_LOST
				         
 1A68				      DECREASE_HP2_G2:
 1A68  83 2E 001D R 01		        SUB TANK_HP_2,1
				        
				      ;}   
 1A6D				   TANK2_SAFE2:   
 1A6D  5A			   POP DX
 1A6E  5B			   POP BX
 1A6F  59			   POP CX
 1A70  5A			   POP DX
 1A71  C3			   RETN
 1A72				CHECK_HIT_GHOST2_TANK2 ENDP
				
				;----------------------------------------------
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-109


				-----------------------------------------
				;CHECK IF GHOST3 HITS TANK 2
				;----------------------------------------------
				-----------------------------------------
 1A72				CHECK_HIT_GHOST3_TANK2 PROC NEAR
 1A72  50			   PUSH AX
 1A73  53			   PUSH BX
 1A74  51			   PUSH CX
 1A75  52			   PUSH DX
				      DETECT_COLLISION STARTPOS_X_PLAYER2, STAR
				TPOS_Y_PLAYER2, TANKSIZE, STARTPOS_X_GHOST3, ST
				ARTPOS_Y_GHOST3, GHOSTSIZE, EXISTS_GHOST3
 1A76  50                    1	    PUSH AX 
 1A77  53                    1	    PUSH BX 
 1A78  51                    1	    PUSH CX 
 1A79  52                    1	    PUSH DX 
 1A7A  55                    1	    PUSH BP 
 1A7B  8B 0E 0090 R          1	        MOV CX, TANKSIZE 
 1A7F  D1 E9                 1	        SHR CX, 1 
 1A81  8B 16 0094 R          1	        MOV DX, GHOSTSIZE 
 1A85  D1 EA                 1	        SHR DX, 1 
 1A87  BD 0000               1	        MOV BP , 0 
 1A8A  03 EA                 1	        ADD BP, DX 
 1A8C  03 E9                 1	        ADD BP, CX 
 1A8E  83 ED 03              1	        SUB BP ,3 
 1A91  A1 0019 R             1	        MOV AX, STARTPOS_X_PLAYER2 
 1A94  03 C1                 1	        ADD AX, CX 
 1A96  8B 1E 0073 R          1	        MOV BX, STARTPOS_X_GHOST3 
 1A9A  03 DA                 1	        ADD BX, DX 
 1A9C  3B C3                 1	        CMP AX,BX 
 1A9E  7C 09                 1	        JL ??00C0 
 1AA0  2B C3                 1	        SUB AX ,BX 
 1AA2  3B C5                 1	        CMP AX, BP 
 1AA4  77 30                 1	        JA ??00C2 
 1AA6  EB 07 90              1	        JMP ??00C1 
 1AA9                        1	        ??00C0: 
 1AA9  2B D8                 1	            SUB BX, AX 
 1AAB  3B DD                 1	            CMP BX, BP 
 1AAD  77 27                 1	            JA ??00C2 
 1AAF                        1	        ??00C1: 
 1AAF  A1 001B R             1	        MOV AX, STARTPOS_Y_PLAYER2 
 1AB2  03 C1                 1	        ADD AX, CX 
 1AB4  8B 1E 0075 R          1	        MOV BX, STARTPOS_Y_GHOST3 
 1AB8  03 DA                 1	        ADD BX, DX 
 1ABA  3B C3                 1	        CMP AX, BX 
 1ABC  7C 09                 1	        JL ??00C3 
 1ABE  2B C3                 1	        SUB AX,BX 
 1AC0  3B C5                 1	        CMP AX, BP 
 1AC2  77 12                 1	        JA ??00C2 
 1AC4  EB 07 90              1	        JMP ??00C4 
 1AC7                        1	        ??00C3: 
 1AC7  2B D8                 1	            SUB BX, AX 
 1AC9  3B DD                 1	            CMP BX, BP 
 1ACB  77 09                 1	            JA ??00C2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-110


 1ACD                        1	        ??00C4: 
 1ACD  C7 06 0077 R 0000     1	        MOV EXISTS_GHOST3, 0 
 1AD3  EB 07 90              1	        JMP ??00C5 
 1AD6                        1	    ??00C2: 
 1AD6  C7 06 0077 R 0001     1	    MOV EXISTS_GHOST3, 1 
 1ADC                        1	    ??00C5: 
 1ADC  5D                    1	    POP BP 
 1ADD  5A                    1	    POP DX 
 1ADE  59                    1	    POP CX 
 1ADF  5B                    1	    POP BX 
 1AE0  58                    1	    POP AX 
				      ;{IF GHOST1 COLLIDED -> EXISTS = 0
 1AE1  83 3E 0077 R 00		         CMP EXISTS_GHOST3,0
 1AE6  75 1B			         JNE TANK2_SAFE3
				      ;MOVE GHOST1 OUT OF BOUNDARIES TO AVOID C
				OLLIDING WITH BULLETS WHILE BEING TRANSPARENT
 1AE8  81 2E 0075 R 0258	         SUB STARTPOS_Y_GHOST3, 600   
				      ;REDUCE THE TANK HP, WILL BE SPLIT IN A D
				IFFERENT PROC NEAR
				      
 1AEE  83 3E 001D R 01		         CMP TANK_HP_2,1
 1AF3  75 09			         JNZ DECREASE_HP2_G3
 1AF5  C7 06 009E R 0001	         MOV WINNER,1
 1AFB  E8 1D11 R		         CALL PLAYER_LOST
				        
 1AFE				      DECREASE_HP2_G3:
 1AFE  83 2E 001D R 01		         SUB TANK_HP_2,1
				         
				      ;}   
 1B03				   TANK2_SAFE3:   
 1B03  5A			   POP DX
 1B04  5B			   POP BX
 1B05  59			   POP CX
 1B06  5A			   POP DX
 1B07  C3			   RETN
 1B08				CHECK_HIT_GHOST3_TANK2 ENDP
				;----------------------------------------------
				-------
				;  _    _  ______            _      _______  _ 
				   _    
				; | |  | ||  ____|    /\    | |    |__   __|| |
				  | | 
				; | |__| || |__      /  \   | |       | |   | |
				__| |  
				; |  __  ||  __|    / /\ \  | |       | |   |  
				__  |  
				; | |  | || |____  / ____ \ | |____   | |   | |
				  | |  
				; |_|  |_||______|/_/    \_\|______|  |_|   |_|
				  |_|  
				;----------------------------------------------
				------
 1B08				DRAW_HEALTH_BAR_1 PROC NEAR
				;{   
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-111


 1B08  50			   PUSH AX
 1B09  53			   PUSH BX
 1B0A  51			   PUSH CX
 1B0B  52			   PUSH DX
				  
 1B0C  8B 0E 000D R		   MOV CX,TANK_HP_1                   
 1B10  C7 06 0025 R 0005	   MOV HEARTS_1_START_POSITION_X,5
				
 1B16				RED_PLAYER1:                                   
				   ;FOR PLAYER1 DRAW THE RED HEARTS FIRST
				   ;(
 1B16  BE 0000 E			MOV SI, OFFSET RED_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B19  51                    1	   PUSH CX 
 1B1A  53                    1	   PUSH BX 
 1B1B  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B1D  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B21  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1B25  8A 3C                 1	   MOV BH, [SI] 
 1B27                        1	   ??00C7:;{ FOR(BP = 50; BD > 0; BP--) 
 1B27  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B2B  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1B2F                        1	      ??00C6:;{ FOR(DX = 50; DX > 0; DX--) 
 1B2F  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B30  3A F8                 1	         CMP BH ,AL 
 1B32  74 04                 1	         JE ??00C8 
 1B34  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B36  CD 10                 1	         INT     10H 
 1B38                        1	         ??00C8: 
 1B38  41                    1	         INC     CX         ; NEXT X POSITION 
 1B39  4F                    1	         DEC     DI 
 1B3A  75 F3                 1	         JNZ     ??00C6 
 1B3C  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B3D  4D                    1	      DEC     BP 
 1B3E  75 E7                 1	      JNZ     ??00C7 
 1B40  5B                    1	      POP BX 
 1B41  59                    1	      POP CX 
 1B42  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20            
				   ;ADD 20 -HEART WIDTH- TO THE X POSITION
 1B47  E2 CD			   LOOP RED_PLAYER1
				   ;)
				
 1B49  B9 000A			   MOV CX,10
 1B4C  2B 0E 000D R		   SUB CX,TANK_HP_1
 1B50  74 33			   JZ RETNURN_HEALTH1                          
				   ;IF HP=10 NO WHITE HEARTS SO RETNURN 
					 
 1B52				WHITE_PLAYER1:                                 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-112


				  ;DRAW WHITE HEARTS IF IT EXISTS
				   ;(
 1B52  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_1_ST
				ART_POSITION_X, HEARTS_1_START_POSITION_Y
 1B55  51                    1	   PUSH CX 
 1B56  53                    1	   PUSH BX 
 1B57  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1B59  8B 16 0027 R          1	   MOV     DX, HEARTS_1_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1B5D  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1B61  8A 3C                 1	   MOV BH, [SI] 
 1B63                        1	   ??00CA:;{ FOR(BP = 50; BD > 0; BP--) 
 1B63  8B 0E 0025 R          1	      MOV     CX, HEARTS_1_START_POSITION_X    
				; X TO START 
 1B67  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1B6B                        1	      ??00C9:;{ FOR(DX = 50; DX > 0; DX--) 
 1B6B  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1B6C  3A F8                 1	         CMP BH ,AL 
 1B6E  74 04                 1	         JE ??00CB 
 1B70  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1B72  CD 10                 1	         INT     10H 
 1B74                        1	         ??00CB: 
 1B74  41                    1	         INC     CX         ; NEXT X POSITION 
 1B75  4F                    1	         DEC     DI 
 1B76  75 F3                 1	         JNZ     ??00C9 
 1B78  42                    1	      INC     DX         ; NEXT Y POSITION 
 1B79  4D                    1	      DEC     BP 
 1B7A  75 E7                 1	      JNZ     ??00CA 
 1B7C  5B                    1	      POP BX 
 1B7D  59                    1	      POP CX 
 1B7E  83 06 0025 R 14		   ADD HEARTS_1_START_POSITION_X,20
 1B83  E2 CD			   LOOP WHITE_PLAYER1
				   ;)
				 
 1B85				 RETNURN_HEALTH1:
 1B85  5A			   POP DX
 1B86  59			   POP CX
 1B87  5B			   POP BX
 1B88  58			   POP AX 
 1B89  C3			   RETN
				;}
 1B8A				DRAW_HEALTH_BAR_1 ENDP
				;----------------------------------------------
				-
				;DRAW THE HEALTH BAR FOR PLAYER 2
				;----------------------------------------------
				-
 1B8A				DRAW_HEALTH_BAR_2 PROC NEAR
				;{   
 1B8A  50			   PUSH AX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-113


 1B8B  53			   PUSH BX
 1B8C  51			   PUSH CX
 1B8D  52			   PUSH DX
				  
 1B8E  C7 06 0029 R 01AE	   MOV HEARTS_2_START_POSITION_X,430
 1B94  B9 000A			   MOV CX,10
 1B97  2B 0E 001D R		    SUB CX,TANK_HP_2
 1B9B  74 33			    JZ DRAW_RED
				
 1B9D				WHITE_PLAYER2:                          ;FOR PL
				AYER2 DRAW THE WHITE HEARTS FIRST
				;(
 1B9D  BE 0000 E			MOV SI, OFFSET WHITE_HEART
					DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_ST
				ART_POSITION_X, HEARTS_2_START_POSITION_Y
 1BA0  51                    1	   PUSH CX 
 1BA1  53                    1	   PUSH BX 
 1BA2  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1BA4  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1BA8  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1BAC  8A 3C                 1	   MOV BH, [SI] 
 1BAE                        1	   ??00CD:;{ FOR(BP = 50; BD > 0; BP--) 
 1BAE  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BB2  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1BB6                        1	      ??00CC:;{ FOR(DX = 50; DX > 0; DX--) 
 1BB6  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BB7  3A F8                 1	         CMP BH ,AL 
 1BB9  74 04                 1	         JE ??00CE 
 1BBB  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BBD  CD 10                 1	         INT     10H 
 1BBF                        1	         ??00CE: 
 1BBF  41                    1	         INC     CX         ; NEXT X POSITION 
 1BC0  4F                    1	         DEC     DI 
 1BC1  75 F3                 1	         JNZ     ??00CC 
 1BC3  42                    1	      INC     DX         ; NEXT Y POSITION 
 1BC4  4D                    1	      DEC     BP 
 1BC5  75 E7                 1	      JNZ     ??00CD 
 1BC7  5B                    1	      POP BX 
 1BC8  59                    1	      POP CX 
 1BC9  83 06 0029 R 14		   ADD HEARTS_2_START_POSITION_X,20
 1BCE  E2 CD			   LOOP WHITE_PLAYER2 
				 ;)
				
 1BD0				DRAW_RED:
				;(
 1BD0  8B 0E 001D R		   MOV CX,TANK_HP_2
 1BD4				   RED_PLAYER2:
				      ;(
 1BD4  BE 0000 E		      MOV SI, OFFSET RED_HEART
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-114


				      DRAW_OBJECT HEARTSIZE , SI ,HEARTS_2_STAR
				T_POSITION_X, HEARTS_2_START_POSITION_Y
 1BD7  51                    1	   PUSH CX 
 1BD8  53                    1	   PUSH BX 
 1BD9  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1BDB  8B 16 002B R          1	   MOV     DX, HEARTS_2_START_POSITION_Y     ; 
				Y TO START DRAWING AT 
 1BDF  8B 2E 0098 R          1	   MOV BP, HEARTSIZE 
 1BE3  8A 3C                 1	   MOV BH, [SI] 
 1BE5                        1	   ??00D0:;{ FOR(BP = 50; BD > 0; BP--) 
 1BE5  8B 0E 0029 R          1	      MOV     CX, HEARTS_2_START_POSITION_X    
				; X TO START 
 1BE9  8B 3E 0098 R          1	      MOV DI, HEARTSIZE 
 1BED                        1	      ??00CF:;{ FOR(DX = 50; DX > 0; DX--) 
 1BED  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1BEE  3A F8                 1	         CMP BH ,AL 
 1BF0  74 04                 1	         JE ??00D1 
 1BF2  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1BF4  CD 10                 1	         INT     10H 
 1BF6                        1	         ??00D1: 
 1BF6  41                    1	         INC     CX         ; NEXT X POSITION 
 1BF7  4F                    1	         DEC     DI 
 1BF8  75 F3                 1	         JNZ     ??00CF 
 1BFA  42                    1	      INC     DX         ; NEXT Y POSITION 
 1BFB  4D                    1	      DEC     BP 
 1BFC  75 E7                 1	      JNZ     ??00D0 
 1BFE  5B                    1	      POP BX 
 1BFF  59                    1	      POP CX 
 1C00  83 06 0029 R 14		      ADD HEARTS_2_START_POSITION_X,20
 1C05  49			      DEC CX
 1C06  75 CC			      JNZ RED_PLAYER2  
				      ;)
 1C08  74 00			   JZ RETNURN_DATA2
				;)
 1C0A				 RETNURN_DATA2:
 1C0A  5A			   POP DX
 1C0B  59			   POP CX
 1C0C  5B			   POP BX
 1C0D  58			   POP AX 
 1C0E  C3			   RETN
				;}
 1C0F				DRAW_HEALTH_BAR_2 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 1 
				;--------------------------------------------
 1C0F				DRW_PRUP_BAR_1 PROC NEAR
				;{
 1C0F  50			   PUSH AX
 1C10  53			   PUSH BX
 1C11  51			   PUSH CX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-115


 1C12  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C13  C7 06 002D R 0005	   MOV PWRUP_BAR_1_START_POSITION_X, 5
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C19  8B 0E 0043 R		   MOV CX, BULLET_1_SPEED_POWER_NUM
 1C1D  83 F9 00			   CMP CX, 0
 1C20  74 36			   JE NO_SPD_PWRUP_1
 1C22  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_1
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1C25				   SPD_PRUP_LOOP_1:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C25  51                    1	   PUSH CX 
 1C26  53                    1	   PUSH BX 
 1C27  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C29  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C2D  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1C31  8A 3C                 1	   MOV BH, [SI] 
 1C33                        1	   ??00D3:;{ FOR(BP = 50; BD > 0; BP--) 
 1C33  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C37  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1C3B                        1	      ??00D2:;{ FOR(DX = 50; DX > 0; DX--) 
 1C3B  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C3C  3A F8                 1	         CMP BH ,AL 
 1C3E  74 04                 1	         JE ??00D4 
 1C40  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C42  CD 10                 1	         INT     10H 
 1C44                        1	         ??00D4: 
 1C44  41                    1	         INC     CX         ; NEXT X POSITION 
 1C45  4F                    1	         DEC     DI 
 1C46  75 F3                 1	         JNZ     ??00D2 
 1C48  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C49  4D                    1	      DEC     BP 
 1C4A  75 E7                 1	      JNZ     ??00D3 
 1C4C  5B                    1	      POP BX 
 1C4D  59                    1	      POP CX 
 1C4E  83 06 002D R 14		      ADD PWRUP_BAR_1_START_POSITION_X, 20
 1C53  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_1
				   ;}
 1C56  E2 CD			   LOOP SPD_PRUP_LOOP_1
 1C58				   NO_SPD_PWRUP_1:
				
				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-116


 1C58  83 3E 0011 R 02		   CMP TANK_DMG_1, 2
 1C5D  75 2C			   JNE NO_DMG_PWRUP_1
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1C5F  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_1
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_1_START_POSITION_X, PWRUP_BAR_1_START_POSITION
				_Y
 1C62  51                    1	   PUSH CX 
 1C63  53                    1	   PUSH BX 
 1C64  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1C66  8B 16 002F R          1	   MOV     DX, PWRUP_BAR_1_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1C6A  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1C6E  8A 3C                 1	   MOV BH, [SI] 
 1C70                        1	   ??00D6:;{ FOR(BP = 50; BD > 0; BP--) 
 1C70  8B 0E 002D R          1	      MOV     CX, PWRUP_BAR_1_START_POSITION_X 
				   ; X TO START 
 1C74  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1C78                        1	      ??00D5:;{ FOR(DX = 50; DX > 0; DX--) 
 1C78  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1C79  3A F8                 1	         CMP BH ,AL 
 1C7B  74 04                 1	         JE ??00D7 
 1C7D  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1C7F  CD 10                 1	         INT     10H 
 1C81                        1	         ??00D7: 
 1C81  41                    1	         INC     CX         ; NEXT X POSITION 
 1C82  4F                    1	         DEC     DI 
 1C83  75 F3                 1	         JNZ     ??00D5 
 1C85  42                    1	      INC     DX         ; NEXT Y POSITION 
 1C86  4D                    1	      DEC     BP 
 1C87  75 E7                 1	      JNZ     ??00D6 
 1C89  5B                    1	      POP BX 
 1C8A  59                    1	      POP CX 
				   ;}   
 1C8B				   NO_DMG_PWRUP_1:
 1C8B  5A			   POP DX
 1C8C  59			   POP CX
 1C8D  5B			   POP BX
 1C8E  58			   POP AX
 1C8F  C3			   RETN
				;}
 1C90				DRW_PRUP_BAR_1 ENDP
				
				;--------------------------------------------
				; DRAWS THE POWER-UP BAR OF PLAYER 2 
				;--------------------------------------------
 1C90				DRW_PRUP_BAR_2 PROC NEAR
				;{
 1C90  50			   PUSH AX
 1C91  53			   PUSH BX
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-117


 1C92  51			   PUSH CX
 1C93  52			   PUSH DX
				   ;RE- INITIALIZE THE START POSITON OF THE PWR
				-UP BAR
 1C94  C7 06 0031 R 01AE	   MOV PWRUP_BAR_2_START_POSITION_X, 430
				   ;GET THE NUMBER OF TIMES THE PLAYER RECIEVED
				 A BULLET SPEED UP
 1C9A  8B 0E 004F R		   MOV CX, BULLET_2_SPEED_POWER_NUM
 1C9E  83 F9 00			   CMP CX, 0
 1CA1  74 36			   JE NO_SPD_PWRUP_2
 1CA3  BE 0000 E		   MOV SI , OFFSET SPD_PRUP_2
				   ;LOOP TO DRAW THE SPEED POWER UP ICON A NUMB
				ER OF TIMES EQUAL TO THE NUMBER THE PLAYER RECI
				EVED THE POWER-UP
 1CA6				   SPD_PRUP_LOOP_2:
				   ;{
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1CA6  51                    1	   PUSH CX 
 1CA7  53                    1	   PUSH BX 
 1CA8  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1CAA  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CAE  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1CB2  8A 3C                 1	   MOV BH, [SI] 
 1CB4                        1	   ??00D9:;{ FOR(BP = 50; BD > 0; BP--) 
 1CB4  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CB8  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1CBC                        1	      ??00D8:;{ FOR(DX = 50; DX > 0; DX--) 
 1CBC  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CBD  3A F8                 1	         CMP BH ,AL 
 1CBF  74 04                 1	         JE ??00DA 
 1CC1  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1CC3  CD 10                 1	         INT     10H 
 1CC5                        1	         ??00DA: 
 1CC5  41                    1	         INC     CX         ; NEXT X POSITION 
 1CC6  4F                    1	         DEC     DI 
 1CC7  75 F3                 1	         JNZ     ??00D8 
 1CC9  42                    1	      INC     DX         ; NEXT Y POSITION 
 1CCA  4D                    1	      DEC     BP 
 1CCB  75 E7                 1	      JNZ     ??00D9 
 1CCD  5B                    1	      POP BX 
 1CCE  59                    1	      POP CX 
 1CCF  83 06 0031 R 14		      ADD PWRUP_BAR_2_START_POSITION_X, 20
 1CD4  BE 0000 E		      MOV SI, OFFSET SPD_PRUP_2
				   ;}
 1CD7  E2 CD			   LOOP SPD_PRUP_LOOP_2
 1CD9				   NO_SPD_PWRUP_2:
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-118


				   ;CHECK IF THE PLAYER HAS A DAMAGE POWER-UP
 1CD9  83 3E 0021 R 02		   CMP TANK_DMG_2, 2
 1CDE  75 2C			   JNE NO_DMG_PWRUP_2
				   ;{
				      ;DRAW THE DAMAGE POWER-UP ICON
 1CE0  BE 0000 E		      MOV SI, OFFSET DMG_PRUP_2
				      DRAW_OBJECT PRUP_ICON_SIZE, SI, PWRUP_BAR
				_2_START_POSITION_X, PWRUP_BAR_2_START_POSITION
				_Y
 1CE3  51                    1	   PUSH CX 
 1CE4  53                    1	   PUSH BX 
 1CE5  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1CE7  8B 16 0033 R          1	   MOV     DX, PWRUP_BAR_2_START_POSITION_Y    
				 ; Y TO START DRAWING AT 
 1CEB  8B 2E 009A R          1	   MOV BP, PRUP_ICON_SIZE 
 1CEF  8A 3C                 1	   MOV BH, [SI] 
 1CF1                        1	   ??00DC:;{ FOR(BP = 50; BD > 0; BP--) 
 1CF1  8B 0E 0031 R          1	      MOV     CX, PWRUP_BAR_2_START_POSITION_X 
				   ; X TO START 
 1CF5  8B 3E 009A R          1	      MOV DI, PRUP_ICON_SIZE 
 1CF9                        1	      ??00DB:;{ FOR(DX = 50; DX > 0; DX--) 
 1CF9  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1CFA  3A F8                 1	         CMP BH ,AL 
 1CFC  74 04                 1	         JE ??00DD 
 1CFE  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1D00  CD 10                 1	         INT     10H 
 1D02                        1	         ??00DD: 
 1D02  41                    1	         INC     CX         ; NEXT X POSITION 
 1D03  4F                    1	         DEC     DI 
 1D04  75 F3                 1	         JNZ     ??00DB 
 1D06  42                    1	      INC     DX         ; NEXT Y POSITION 
 1D07  4D                    1	      DEC     BP 
 1D08  75 E7                 1	      JNZ     ??00DC 
 1D0A  5B                    1	      POP BX 
 1D0B  59                    1	      POP CX 
				   ;}   
 1D0C				   NO_DMG_PWRUP_2:
 1D0C  5A			   POP DX
 1D0D  59			   POP CX
 1D0E  5B			   POP BX
 1D0F  58			   POP AX
 1D10  C3			   RETN
				;}
 1D11				DRW_PRUP_BAR_2 ENDP
				
				;---------------------------
				; LOSSER 
				;---------------------------
 1D11				PLAYER_LOST PROC NEAR 
				
 1D11  B8 4F02			         MOV    AX, 4F02H     ; THIS TO HANDLE 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-119


				FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
 1D14  BB 0100			         MOV    BX, 100H
 1D17  CD 10			         INT    10H
				YWN 40,40,150,220,04                ;DRAW YOU W
				ON WITH RED COLOR  
 1D19  50                    1	PUSH AX 
 1D1A  51                    1	PUSH CX 
 1D1B  52                    1	PUSH DX 
 1D1C  53                    1	PUSH BX 
 1D1D  56                    1	PUSH SI 
 1D1E  57                    1	PUSH DI 
 1D1F  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1D22  B9 0096               1	    MOV CX,150 ; X = 400 
 1D25  B0 04                 1	    MOV AL,04 
 1D27  B4 0C                 1	    MOV AH,0CH 
 1D29                        1	    ??00DE: 
 1D29                        1	        ??00DF: 
 1D29  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1D2D  77 0D                 1	                JA ??00E0 
 1D2F  CD 10                 1	                INT 10H 
 1D31  83 C1 1E              1	                ADD CX, 40 - 10 
 1D34  CD 10                 1	                INT 10H 
 1D36  83 E9 1E              1	                SUB CX,40 - 10 
 1D39  EB 0F 90              1	                JMP ??00E1 
 1D3C                        1	                ??00E0: 
 1D3C  83 C1 14              1	                ADD CX,40 / 2 
 1D3F  83 E9 05              1	                SUB CX,5 
 1D42  CD 10                 1	                INT 10H 
 1D44  83 C1 05              1	                ADD CX,5 
 1D47  83 E9 14              1	                SUB CX,40 / 2 
 1D4A                        1	         ??00E1: 
 1D4A  83 C1 32              1	                ADD CX,40 + 10 
 1D4D  CD 10                 1	                INT 10H 
 1D4F  83 C1 1E              1	                ADD CX,40 -10 
 1D52  CD 10                 1	                INT 10H 
 1D54  83 C1 14              1	            ADD CX,20 
 1D57  CD 10                 1	            INT 10H 
 1D59  83 C1 1E              1	            ADD CX,40 -10 
 1D5C  CD 10                 1	            INT 10H 
 1D5E  83 C1 1E              1	            ADD CX,30 
 1D61  CD 10                 1	            INT 10H 
 1D63  83 C1 14              1	            ADD CX,40/2 
 1D66  83 E9 05              1	            SUB CX,5 
 1D69  CD 10                 1	            INT 10H 
 1D6B  83 E9 14              1	            SUB CX,40/2 
 1D6E  83 C1 05              1	            ADD CX,5 
 1D71  83 C1 1E              1	            ADD CX,40 -10 
 1D74  CD 10                 1	            INT 10H 
 1D76  83 C1 14              1	            ADD CX,20 
 1D79  CD 10                 1	            INT 10H 
 1D7B  83 C1 1E              1	            ADD CX,40 -10 
 1D7E  CD 10                 1	            INT 10H 
 1D80  83 C1 14              1	                 ADD CX,20 
 1D83  CD 10                 1	                 INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-120


 1D85  83 C1 21              1	                 ADD CX,40 - 7 
 1D88  CD 10                 1	                 INT 10H 
 1D8A  81 E9 0125            1	         SUB CX,6*40 + 53 
 1D8E  42                    1	        INC DX 
 1D8F  81 FA 0104            1	        CMP DX,220 + 40 
 1D93  75 94                 1	        JNZ ??00DF 
 1D95  BA 00DC               1	    MOV DX,220 
 1D98  41                    1	    INC CX 
 1D99  81 F9 00A0            1	    CMP CX,150 + 10 
 1D9D  75 8A                 1	    JNZ ??00DE 
 1D9F  B9 0096               1	    MOV CX,150 
 1DA2  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1DA5                        1	    ??00E2: 
 1DA5                        1	        ??00E4: 
 1DA5  CD 10                 1	            INT 10H 
 1DA7  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1DAA  83 C1 32              1	            ADD CX, 40 + 10 
 1DAD  CD 10                 1	            INT 10H 
 1DAF  83 EA 1E              1	            SUB DX, 40 - 10 
 1DB2  CD 10                 1	            INT 10H 
 1DB4  83 C2 1E              1	            ADD DX,40 -10 
 1DB7  83 C1 32              1	            ADD CX,40 + 10 
 1DBA  CD 10                 1	            INT 10H 
 1DBC  83 C1 3C              1	            ADD CX,40 + 20 
 1DBF  CD 10                 1	            INT 10H 
 1DC1  83 C1 32              1	            ADD CX,40 + 10 
 1DC4  CD 10                 1	            INT 10H 
 1DC6  83 EA 1E              1	            SUB DX,40 -10 
 1DC9  CD 10                 1	            INT 10H 
 1DCB  81 E9 00D2            1	            SUB CX,4*40+50 
 1DCF  83 C2 14              1	            ADD DX,40/2 
 1DD2  41                    1	        INC CX 
 1DD3  81 F9 00BE            1	        CMP CX,150 + 40 
 1DD7  75 CC                 1	        JNZ ??00E4 
 1DD9  B9 0096               1	    MOV CX,150 
 1DDC  42                    1	    INC DX 
 1DDD  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1DE1  75 C2                 1	    JNZ ??00E2 
 1DE3  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1DE6  BA 00DC               1	    MOV DX,220 
 1DE9  BE 00DC               1	    MOV SI,220 
 1DEC                        1	    ??00E3: 
 1DEC                        1	        ??00E5: 
 1DEC  CD 10                 1	            INT 10H 
 1DEE  41                    1	            INC CX 
 1DEF  42                    1	            INC DX 
 1DF0  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1DF4  75 F6                 1	        JNZ ??00E5 
 1DF6  83 C6 01              1	            ADD SI,1 
 1DF9  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1DFC  8B D6                 1	            MOV DX,SI 
 1DFE  81 FA 00EA            1	            CMP DX,220 + 14 
 1E02  75 E8                 1	    JNZ ??00E3 
 1E04  5F                    1	POP DI 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-121


 1E05  5E                    1	POP SI 
 1E06  5B                    1	POP BX 
 1E07  5A                    1	POP DX 
 1E08  59                    1	POP CX 
 1E09  58                    1	POP AX 
 1E0A  83 3E 009E R 01		CMP WINNER,1 
 1E0F  75 2D			JNZ PLAYER2_WON
				;(                                  
 1E11  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER1
				   DRAW_OBJECT TANKSIZE ,SI,280,100    ;DRAW TA
				NK 1 IF PLAYER 1 IS THE WINNER
 1E14  51                    1	   PUSH CX 
 1E15  53                    1	   PUSH BX 
 1E16  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1E18  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1E1B  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 1E1F  8A 3C                 1	   MOV BH, [SI] 
 1E21                        1	   ??00E7:;{ FOR(BP = 50; BD > 0; BP--) 
 1E21  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1E24  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 1E28                        1	      ??00E6:;{ FOR(DX = 50; DX > 0; DX--) 
 1E28  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1E29  3A F8                 1	         CMP BH ,AL 
 1E2B  74 04                 1	         JE ??00E8 
 1E2D  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1E2F  CD 10                 1	         INT     10H 
 1E31                        1	         ??00E8: 
 1E31  41                    1	         INC     CX         ; NEXT X POSITION 
 1E32  4F                    1	         DEC     DI 
 1E33  75 F3                 1	         JNZ     ??00E6 
 1E35  42                    1	      INC     DX         ; NEXT Y POSITION 
 1E36  4D                    1	      DEC     BP 
 1E37  75 E8                 1	      JNZ     ??00E7 
 1E39  5B                    1	      POP BX 
 1E3A  59                    1	      POP CX 
 1E3B  E9 1F59 R		   JMP PRESS_TO_MENU
				;)
 1E3E				PLAYER2_WON:
				;(
				   YWN 40,40,150,220,01              ;DRAW YOU 
				WON WITH BLUE COLOR -OVEERWRITE THE RED ONE- 
 1E3E  50                    1	PUSH AX 
 1E3F  51                    1	PUSH CX 
 1E40  52                    1	PUSH DX 
 1E41  53                    1	PUSH BX 
 1E42  56                    1	PUSH SI 
 1E43  57                    1	PUSH DI 
 1E44  BA 00DC               1	    MOV DX,220 ; Y = 250 
 1E47  B9 0096               1	    MOV CX,150 ; X = 400 
 1E4A  B0 01                 1	    MOV AL,01 
 1E4C  B4 0C                 1	    MOV AH,0CH 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-122


 1E4E                        1	    ??00E9: 
 1E4E                        1	        ??00EA: 
 1E4E  81 FA 00F0            1	                CMP DX,220 + 40 / 2 
 1E52  77 0D                 1	                JA ??00EB 
 1E54  CD 10                 1	                INT 10H 
 1E56  83 C1 1E              1	                ADD CX, 40 - 10 
 1E59  CD 10                 1	                INT 10H 
 1E5B  83 E9 1E              1	                SUB CX,40 - 10 
 1E5E  EB 0F 90              1	                JMP ??00EC 
 1E61                        1	                ??00EB: 
 1E61  83 C1 14              1	                ADD CX,40 / 2 
 1E64  83 E9 05              1	                SUB CX,5 
 1E67  CD 10                 1	                INT 10H 
 1E69  83 C1 05              1	                ADD CX,5 
 1E6C  83 E9 14              1	                SUB CX,40 / 2 
 1E6F                        1	         ??00EC: 
 1E6F  83 C1 32              1	                ADD CX,40 + 10 
 1E72  CD 10                 1	                INT 10H 
 1E74  83 C1 1E              1	                ADD CX,40 -10 
 1E77  CD 10                 1	                INT 10H 
 1E79  83 C1 14              1	            ADD CX,20 
 1E7C  CD 10                 1	            INT 10H 
 1E7E  83 C1 1E              1	            ADD CX,40 -10 
 1E81  CD 10                 1	            INT 10H 
 1E83  83 C1 1E              1	            ADD CX,30 
 1E86  CD 10                 1	            INT 10H 
 1E88  83 C1 14              1	            ADD CX,40/2 
 1E8B  83 E9 05              1	            SUB CX,5 
 1E8E  CD 10                 1	            INT 10H 
 1E90  83 E9 14              1	            SUB CX,40/2 
 1E93  83 C1 05              1	            ADD CX,5 
 1E96  83 C1 1E              1	            ADD CX,40 -10 
 1E99  CD 10                 1	            INT 10H 
 1E9B  83 C1 14              1	            ADD CX,20 
 1E9E  CD 10                 1	            INT 10H 
 1EA0  83 C1 1E              1	            ADD CX,40 -10 
 1EA3  CD 10                 1	            INT 10H 
 1EA5  83 C1 14              1	                 ADD CX,20 
 1EA8  CD 10                 1	                 INT 10H 
 1EAA  83 C1 21              1	                 ADD CX,40 - 7 
 1EAD  CD 10                 1	                 INT 10H 
 1EAF  81 E9 0125            1	         SUB CX,6*40 + 53 
 1EB3  42                    1	        INC DX 
 1EB4  81 FA 0104            1	        CMP DX,220 + 40 
 1EB8  75 94                 1	        JNZ ??00EA 
 1EBA  BA 00DC               1	    MOV DX,220 
 1EBD  41                    1	    INC CX 
 1EBE  81 F9 00A0            1	    CMP CX,150 + 10 
 1EC2  75 8A                 1	    JNZ ??00E9 
 1EC4  B9 0096               1	    MOV CX,150 
 1EC7  BA 00F0               1	    MOV DX,220 + 40 / 2 
 1ECA                        1	    ??00ED: 
 1ECA                        1	        ??00EF: 
 1ECA  CD 10                 1	            INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-123


 1ECC  83 C2 0A              1	            ADD DX,40 / 2 - 10 
 1ECF  83 C1 32              1	            ADD CX, 40 + 10 
 1ED2  CD 10                 1	            INT 10H 
 1ED4  83 EA 1E              1	            SUB DX, 40 - 10 
 1ED7  CD 10                 1	            INT 10H 
 1ED9  83 C2 1E              1	            ADD DX,40 -10 
 1EDC  83 C1 32              1	            ADD CX,40 + 10 
 1EDF  CD 10                 1	            INT 10H 
 1EE1  83 C1 3C              1	            ADD CX,40 + 20 
 1EE4  CD 10                 1	            INT 10H 
 1EE6  83 C1 32              1	            ADD CX,40 + 10 
 1EE9  CD 10                 1	            INT 10H 
 1EEB  83 EA 1E              1	            SUB DX,40 -10 
 1EEE  CD 10                 1	            INT 10H 
 1EF0  81 E9 00D2            1	            SUB CX,4*40+50 
 1EF4  83 C2 14              1	            ADD DX,40/2 
 1EF7  41                    1	        INC CX 
 1EF8  81 F9 00BE            1	        CMP CX,150 + 40 
 1EFC  75 CC                 1	        JNZ ??00EF 
 1EFE  B9 0096               1	    MOV CX,150 
 1F01  42                    1	    INC DX 
 1F02  81 FA 00FA            1	    CMP DX,220 + 40 / 2 + 10 
 1F06  75 C2                 1	    JNZ ??00ED 
 1F08  B9 01A4               1	    MOV CX,150 + 5* 40 + 70 
 1F0B  BA 00DC               1	    MOV DX,220 
 1F0E  BE 00DC               1	    MOV SI,220 
 1F11                        1	    ??00EE: 
 1F11                        1	        ??00F0: 
 1F11  CD 10                 1	            INT 10H 
 1F13  41                    1	            INC CX 
 1F14  42                    1	            INC DX 
 1F15  81 F9 01BF            1	            CMP CX,150 + 6* 40 + 57 
 1F19  75 F6                 1	        JNZ ??00F0 
 1F1B  83 C6 01              1	            ADD SI,1 
 1F1E  B9 01A4               1	            MOV CX,150 + 5* 40 + 70 
 1F21  8B D6                 1	            MOV DX,SI 
 1F23  81 FA 00EA            1	            CMP DX,220 + 14 
 1F27  75 E8                 1	    JNZ ??00EE 
 1F29  5F                    1	POP DI 
 1F2A  5E                    1	POP SI 
 1F2B  5B                    1	POP BX 
 1F2C  5A                    1	POP DX 
 1F2D  59                    1	POP CX 
 1F2E  58                    1	POP AX 
 1F2F  BE 0000 E		   MOV SI,OFFSET BITMAP_UP_PLAYER2
				   DRAW_OBJECT TANKSIZE ,SI,280,100 
 1F32  51                    1	   PUSH CX 
 1F33  53                    1	   PUSH BX 
 1F34  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 1F36  BA 0064               1	   MOV     DX, 100     ; Y TO START DRAWING AT 
 1F39  8B 2E 0090 R          1	   MOV BP, TANKSIZE 
 1F3D  8A 3C                 1	   MOV BH, [SI] 
 1F3F                        1	   ??00F2:;{ FOR(BP = 50; BD > 0; BP--) 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-124


 1F3F  B9 0118               1	      MOV     CX, 280    ; X TO START 
 1F42  8B 3E 0090 R          1	      MOV DI, TANKSIZE 
 1F46                        1	      ??00F1:;{ FOR(DX = 50; DX > 0; DX--) 
 1F46  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 1F47  3A F8                 1	         CMP BH ,AL 
 1F49  74 04                 1	         JE ??00F3 
 1F4B  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 1F4D  CD 10                 1	         INT     10H 
 1F4F                        1	         ??00F3: 
 1F4F  41                    1	         INC     CX         ; NEXT X POSITION 
 1F50  4F                    1	         DEC     DI 
 1F51  75 F3                 1	         JNZ     ??00F1 
 1F53  42                    1	      INC     DX         ; NEXT Y POSITION 
 1F54  4D                    1	      DEC     BP 
 1F55  75 E8                 1	      JNZ     ??00F2 
 1F57  5B                    1	      POP BX 
 1F58  59                    1	      POP CX 
				;)
				 
 1F59				PRESS_TO_MENU:
 1F59  B4 00			      MOV AH,0                        ;GET KEY 
				PRESSED FOR ENDING THE GAME
 1F5B  CD 16					INT 16H
				     
 1F5D  B4 4C			      MOV    AH,4CH
 1F5F  CD 21			      INT    21H
 1F61				PLAYER_LOST ENDP
				;----------------------------------------------
				----------------------------------------
				;   _____  _   _  _______  ______  _____    ___
				___             _____  ______
				;  |_   _|| \ | ||__    __||  ____||  __ \  |  
				____|   /\      / ____||  ____|
				;    | |  |  \| |   | |   | |__   | |__) | | |_
				_     /  \    | |     | |__ 
				;    | |  | . ` |   | |   |  __|  |  _  /  |  _
				_|   / /\ \   | |     |  __|
				;   _| |_ | |\  |   | |   | |____ | | \ \  | | 
				    / ____ \  | |____ | |____ 
				;  |_____||_| \_|   |_|   |______||_|  \_\ |_| 
				   /_/    \_\  \_____||______|
				;----------------------------------------------
				--------------------------------------
 1F61				  MAIN_MENU PROC NEAR
				   ;{ OPEN VIDEO MODE
 1F61  B8 4F02			         MOV    AX, 4F02H 
 1F64  BB 0105			         MOV    BX, 105H      
 1F67  CD 10			         INT    10H   
				   ;}
				
				   
				   ;{DRAWWING THE INTERFACE
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-125


				         MENU
 1F69  B8 4F02               1	                        MOV     AX, 4F02H 
 1F6C  BB 0105               1	                        MOV     BX, 105H 
 1F6F  CD 10                 1	                        INT     10H 
 1F71  B7 00                 1	                    MOV     BH, 0      ; DISPLA
				YPAGE DOESN'T CHANGE 
 1F73  BA 0000               1	                    MOV     DX, 0     ; Y TO ST
				ART 
 1F76  B9 0000               1	                    MOV     CX, 0 
 1F79  B0 07                 1	                    MOV     AL, 7 
 1F7B  B4 0C                 1	                    MOV     AH, 0CH 
 1F7D                        1	                           ??00F4: 
 1F7D                        1	                                          ??00F
				5: 
 1F7D  CD 10                 1	                                               
				             INT     10H 
 1F7F  41                    1	                                               
				             INC     CX 
 1F80  81 F9 0400            1	                                               
				             CMP     CX, 1024 
 1F84  75 F7                 1	                                               
				             JNZ     ??00F5 
 1F86  B9 0000               1	                                    MOV     CX,
				0 
 1F89  42                    1	                                    INC     DX 
				        ; NEXT Y 
 1F8A  81 FA 030C            1	                                    CMP     DX,
				 780 
 1F8E  75 ED                 1	                                    JNZ     ??0
				0F4 
 1F90  B8 0600               1	                    MOV     AX, 0600H 
 1F93  B7 00                 1	                    MOV     BH, 0 
 1F95  B9 0000               1	                    MOV     CX, 0 
 1F98  BA 184F               1	                    MOV     DX, 184FH 
 1F9B  CD 10                 1	                    INT     10H 
 1F9D  B4 02                 1	                    MOV     AH, 2 
 1F9F  BA 1B34               1	                    MOV     DX, 1B34H 
 1FA2  CD 10                 1	                    INT     10H 
 1FA4  8D 36 00A4 R          1	                LEA     SI, MENUITEM1 
 1FA8                        1	                ??00F6: 
 1FA8  B4 09                 1	                        MOV     AH, 9 
 1FAA  B7 00                 1	                        MOV     BH, 0 
 1FAC  8A 04                 1	                        MOV     AL, [SI] 
 1FAE  B9 0001               1	                        MOV     CX, 1 
 1FB1  B3 16                 1	                        MOV     BL, 016H 
 1FB3  CD 10                 1	                        INT     10H 
 1FB5  FE C2                 1	                        INC     DL 
 1FB7  B4 02                 1	                        MOV     AH, 2 
 1FB9  CD 10                 1	                        INT     10H 
 1FBB  46                    1	                        INC     SI 
 1FBC  8A 04                 1	                        MOV     AL, [SI] 
 1FBE  3C 24                 1	                        CMP     AL, '$' 
 1FC0  75 E6                 1	                        JNZ     ??00F6 
 1FC2  B4 02                 1	                        MOV     AH, 2 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-126


 1FC4  BA 1D34               1	                        MOV     DX, 1D34H 
 1FC7  CD 10                 1	                        INT     10H 
 1FC9  8D 36 00BF R          1	                    LEA     SI, MENUITEM2 
 1FCD                        1	                    ??00F7: 
 1FCD  B4 09                 1	                        MOV     AH, 9 
 1FCF  B7 00                 1	                        MOV     BH, 0 
 1FD1  8A 04                 1	                        MOV     AL, [SI] 
 1FD3  B9 0001               1	                        MOV     CX, 1 
 1FD6  B3 16                 1	                        MOV     BL, 016H 
 1FD8  CD 10                 1	                        INT     10H 
 1FDA  FE C2                 1	                        INC     DL 
 1FDC  B4 02                 1	                        MOV     AH, 2 
 1FDE  CD 10                 1	                        INT     10H 
 1FE0  46                    1	                        INC     SI 
 1FE1  8A 04                 1	                        MOV     AL, [SI] 
 1FE3  3C 24                 1	                        CMP     AL, '$' 
 1FE5  75 E6                 1	                        JNZ     ??00F7 
 1FE7  B4 02                 1	                        MOV     AH, 2 
 1FE9  BA 1933               1	                        MOV     DX, 1933H 
 1FEC  CD 10                 1	                        INT     10H 
 1FEE  8D 36 00DA R          1	                    LEA     SI, MENUITEM3 
 1FF2                        1	                    ??00F8: 
 1FF2  B4 09                 1	                        MOV     AH, 9 
 1FF4  B7 00                 1	                        MOV     BH, 0 
 1FF6  8A 04                 1	                        MOV     AL, [SI] 
 1FF8  B9 0001               1	                        MOV     CX, 1 
 1FFB  B3 16                 1	                        MOV     BL, 016H 
 1FFD  CD 10                 1	                        INT     10H 
 1FFF  FE C2                 1	                        INC     DL 
 2001  B4 02                 1	                        MOV     AH, 2 
 2003  CD 10                 1	                        INT     10H 
 2005  46                    1	                        INC     SI 
 2006  8A 04                 1	                        MOV     AL, [SI] 
 2008  3C 24                 1	                        CMP     AL, '$' 
 200A  75 E6                 1	                        JNZ     ??00F8 
				         GHOSTWORD
 200C  BA 00FA               1	    MOV DX,250 ; Y = 250 
 200F  B9 0190               1	    MOV CX,400 ; X = 400 
 2012  B0 04                 1	    MOV AL,04 
 2014  B4 0C                 1	    MOV AH,0CH 
 2016                        1	    ??00F9: 
 2016                        1	        ??00FA: 
 2016  CD 10                 1	         INT 10H 
 2018  83 C1 1E              1	         ADD CX,30 
 201B  81 FA 010E            1	                CMP DX,270 
 201F  77 05                 1	                JA ??00FF 
 2021  CD 10                 1	                INT 10H 
 2023  EB 09 90              1	                JMP ??00FB 
 2026  81 FA 0122            1	                ??00FF: CMP DX,290 
 202A  72 02                 1	                JB ??00FB 
 202C  CD 10                 1	                INT 10H 
 202E                        1	        ??00FB: 
 202E  83 C1 14              1	            ADD CX,20 
 2031  CD 10                 1	            INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-127


 2033  83 C1 1E              1	            ADD CX,30 
 2036  CD 10                 1	            INT 10H 
 2038  83 C1 14              1	            ADD CX,20 
 203B  CD 10                 1	            INT 10H 
 203D  83 C1 1E              1	            ADD CX,30 
 2040  CD 10                 1	            INT 10H 
 2042  83 C1 14              1	         ADD CX,20 
 2045  81 FA 0113            1	                CMP DX,275 
 2049  77 05                 1	                JA ??0100 
 204B  CD 10                 1	                INT 10H 
 204D  EB 09 90              1	                JMP ??00FC 
 2050                        1	                ??0100: 
 2050  83 C1 1E              1	                ADD CX,30 
 2053  CD 10                 1	                INT 10H 
 2055  83 E9 1E              1	                SUB CX,30 
 2058                        1	         ??00FC: 
 2058  83 C1 41              1	                ADD CX,65 
 205B  CD 10                 1	                INT 10H 
 205D  81 E9 00D7            1	        SUB CX,215 
 2061  42                    1	        INC DX 
 2062  81 FA 0136            1	        CMP DX,310 
 2066  75 AE                 1	        JNZ ??00FA 
 2068  BA 00FA               1	    MOV DX,250 
 206B  41                    1	    INC CX 
 206C  81 F9 019A            1	    CMP CX,410 
 2070  75 A4                 1	    JNZ ??00F9 
 2072  B9 01A4               1	        MOV CX,420 
 2075  BA 0118               1	        MOV DX,280 
 2078                        1	        ??0102: 
 2078                        1	            ??0101: 
 2078  CD 10                 1	                INT 10H 
 207A  41                    1	                INC CX 
 207B  81 F9 01B8            1	                CMP CX,440 
 207F  75 F7                 1	            JNZ ??0101 
 2081  B9 01A4               1	        MOV CX,420 
 2084  42                    1	        INC DX 
 2085  81 FA 0122            1	        CMP DX,290 
 2089  75 ED                 1	        JNZ ??0102 
 208B  B9 0190               1	    MOV CX,400 
 208E  BA 00FA               1	    MOV DX,250 
 2091                        1	    ??00FD: 
 2091                        1	        ??00FE: 
 2091  CD 10                 1	            INT 10H 
 2093  83 C2 32              1	            ADD DX,50 
 2096  CD 10                 1	            INT 10H 
 2098  83 EA 32              1	            SUB DX,50 
 209B  83 C1 32              1	            ADD CX,50 
 209E  83 C2 19              1	            ADD DX,25 
 20A1  CD 10                 1	            INT 10H 
 20A3  83 EA 19              1	            SUB DX,25 
 20A6  83 E9 32              1	            SUB CX,50 
 20A9  83 C1 64              1	            ADD CX,100 
 20AC  CD 10                 1	            INT 10H 
 20AE  83 C2 32              1	            ADD DX,50 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-128


 20B1  CD 10                 1	            INT 10H 
 20B3  83 EA 32              1	            SUB DX,50 
 20B6  83 C1 32              1	            ADD CX,50 
 20B9  CD 10                 1	            INT 10H 
 20BB  83 C2 19              1	            ADD DX,25 
 20BE  CD 10                 1	            INT 10H 
 20C0  83 EA 19              1	            SUB DX,25 
 20C3  83 C2 32              1	            ADD DX,50 
 20C6  CD 10                 1	            INT 10H 
 20C8  83 EA 32              1	            SUB DX,50 
 20CB  83 C1 32              1	            ADD CX,50 
 20CE  CD 10                 1	            INT 10H 
 20D0  81 E9 00C8            1	        SUB CX,200 
 20D4  41                    1	        INC CX 
 20D5  81 F9 01B8            1	        CMP CX,440 
 20D9  75 B6                 1	        JNZ ??00FE 
 20DB  B9 0190               1	    MOV CX,400 
 20DE  42                    1	    INC DX 
 20DF  81 FA 0104            1	    CMP DX,260 
 20E3  75 AC                 1	    JNZ ??00FD 
				         BUSTERWORD
 20E5  BA 0140               1	    MOV DX,320 ; Y = 320 
 20E8  B9 017C               1	    MOV CX,380 ; X = 380 
 20EB  B0 01                 1	    MOV AL,01 
 20ED  B4 0C                 1	    MOV AH,0CH 
 20EF                        1	    ??0103: 
 20EF                        1	        ??0104: 
 20EF  CD 10                 1	         INT 10H 
 20F1  83 C1 1E              1	         ADD CX,30 
 20F4  81 FA 0159            1	                CMP DX,345 
 20F8  77 05                 1	                JA ??0109 
 20FA  CD 10                 1	                INT 10H 
 20FC  EB 09 90              1	                JMP ??0105 
 20FF  81 FA 0163            1	                ??0109: CMP DX,355 
 2103  72 02                 1	                JB ??0105 
 2105  CD 10                 1	                INT 10H 
 2107                        1	        ??0105: 
 2107  83 C1 14              1	            ADD CX,20 
 210A  CD 10                 1	            INT 10H 
 210C  83 C1 1E              1	            ADD CX,30 
 210F  CD 10                 1	            INT 10H 
 2111  83 C1 14              1	         ADD CX,20 
 2114  81 FA 0159            1	                CMP DX,345 
 2118  77 05                 1	                JA ??010A 
 211A  CD 10                 1	                INT 10H 
 211C  EB 09 90              1	                JMP ??0106 
 211F                        1	                ??010A: 
 211F  83 C1 1E              1	                ADD CX,30 
 2122  CD 10                 1	                INT 10H 
 2124  83 E9 1E              1	                SUB CX,30 
 2127                        1	         ??0106: 
 2127  83 C1 41              1	                ADD CX,65 
 212A  CD 10                 1	                INT 10H 
 212C  83 C1 23              1	            ADD CX,35 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-129


 212F  CD 10                 1	            INT 10H 
 2131  83 C1 32              1	            ADD CX,50 
 2134  CD 10                 1	            INT 10H 
 2136  83 C1 1E              1	            ADD CX,30 
 2139  81 FA 0159            1	                    CMP DX,345 
 213D  77 05                 1	                    JA ??010C 
 213F  CD 10                 1	                    INT 10H 
 2141  EB 09 90              1	                    JMP ??010B 
 2144  81 FA 0163            1	                    ??010C: CMP DX,355 
 2148  72 02                 1	                    JB ??010B 
 214A  CD 10                 1	                    INT 10H 
 214C                        1	        ??010B: 
 214C  81 E9 0118            1	        SUB CX,280 
 2150  42                    1	        INC DX 
 2151  81 FA 017C            1	        CMP DX,380 
 2155  75 98                 1	        JNZ ??0104 
 2157  BA 0140               1	    MOV DX,320 
 215A  41                    1	    INC CX 
 215B  81 F9 0186            1	    CMP CX,390 
 215F  75 8E                 1	    JNZ ??0103 
 2161  BA 0140               1	    MOV DX,320 
 2164  B9 017C               1	    MOV CX,380 
 2167                        1	    ??0107: 
 2167                        1	        ??0108: 
 2167  CD 10                 1	            INT 10H 
 2169  83 C2 14              1	            ADD DX,20 
 216C  81 F9 019F            1	                CMP CX,415 
 2170  77 05                 1	                JA ??010F 
 2172  CD 10                 1	                INT 10H 
 2174  EB 11 90              1	                JMP ??0110 
 2177  81 FA 0159            1	                ??010F: CMP DX,345 
 217B  77 02                 1	                JA ??010E 
 217D  CD 10                 1	                INT 10H 
 217F  81 FA 0163            1	                ??010E: CMP DX,355 
 2183  72 02                 1	                JB ??0110 
 2185  CD 10                 1	                INT 10H 
 2187  83 C2 0A              1	                ??0110: ADD DX,10 
 218A  81 F9 019F            1	                CMP CX,415 
 218E  77 05                 1	                JA ??010D 
 2190  CD 10                 1	                INT 10H 
 2192  EB 11 90              1	                JMP ??0112 
 2195  81 FA 0159            1	                ??010D: CMP DX,345 
 2199  77 02                 1	                JA ??0111 
 219B  CD 10                 1	                INT 10H 
 219D  81 FA 0163            1	                ??0111: CMP DX,355 
 21A1  72 02                 1	                JB ??0112 
 21A3  CD 10                 1	                INT 10H 
 21A5                        1	                ??0112: 
 21A5  83 C2 14              1	                ADD DX,20 
 21A8  CD 10                 1	                INT 10H 
 21AA  83 EA 32              1	        SUB DX,50 
 21AD  83 C1 32              1	            ADD CX,50 
 21B0  83 C2 32              1	            ADD DX,50 
 21B3  CD 10                 1	            INT 10H 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-130


 21B5  83 E9 32              1	            SUB CX,50 
 21B8  83 EA 32              1	            SUB DX,50 
 21BB  83 C1 64              1	            ADD CX,100 
 21BE  CD 10                 1	            INT 10H 
 21C0  83 C2 19              1	            ADD DX,25 
 21C3  CD 10                 1	            INT 10H 
 21C5  83 EA 19              1	            SUB DX,25 
 21C8  83 C2 32              1	            ADD DX,50 
 21CB  CD 10                 1	            INT 10H 
 21CD  83 EA 32              1	            SUB DX,50 
 21D0  83 E9 64              1	            SUB CX,100 
 21D3  41                    1	    INC CX 
 21D4  81 F9 01A4            1	    CMP CX,420 
 21D8  75 8D                 1	    JNZ ??0108 
 21DA  B9 017C               1	    MOV CX,380 
 21DD  42                    1	    INC DX 
 21DE  81 FA 014A            1	    CMP DX,330 
 21E2  75 83                 1	    JNZ ??0107 
 21E4  BA 0140               1	    MOV DX,320 
 21E7  B9 0212               1	    MOV CX,530 
 21EA                        1	    ??0113: 
 21EA                        1	        ??0114: 
 21EA  CD 10                 1	        INT 10H 
 21EC  83 C1 32              1	            ADD CX,50 
 21EF  CD 10                 1	            INT 10H 
 21F1  83 C2 19              1	            ADD DX,25 
 21F4  CD 10                 1	            INT 10H 
 21F6  83 C2 19              1	            ADD DX,25 
 21F9  CD 10                 1	            INT 10H 
 21FB  83 E9 32              1	            SUB CX,50 
 21FE  83 EA 32              1	            SUB DX,50 
 2201  83 C1 64              1	            ADD CX,100 
 2204  CD 10                 1	            INT 10H 
 2206  83 C2 14              1	            ADD DX,20 
 2209  81 F9 0299            1	                CMP CX,665 
 220D  77 05                 1	                JA ??0115 
 220F  CD 10                 1	                INT 10H 
 2211  EB 11 90              1	                JMP ??0117 
 2214  81 FA 0159            1	                ??0115: CMP DX,345 
 2218  77 0A                 1	                JA ??0117 
 221A  CD 10                 1	                INT 10H 
 221C  81 FA 0163            1	                ??0116: CMP DX,355 
 2220  72 02                 1	                JB ??0117 
 2222  CD 10                 1	                INT 10H 
 2224  83 C2 0A              1	                ??0117: ADD DX,10 
 2227  81 F9 0299            1	                CMP CX,665 
 222B  77 05                 1	                JA ??0119 
 222D  CD 10                 1	                INT 10H 
 222F  EB 11 90              1	                JMP ??0118 
 2232  81 FA 0159            1	                ??0119: CMP DX,345 
 2236  77 02                 1	                JA ??011A 
 2238  CD 10                 1	                INT 10H 
 223A  81 FA 0163            1	                ??011A: CMP DX,355 
 223E  72 02                 1	                JB ??0118 
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-131


 2240  CD 10                 1	                INT 10H 
 2242                        1	                ??0118: 
 2242  83 EA 1E              1	        SUB DX,30 
 2245  83 E9 64              1	        SUB CX,100 
 2248  41                    1	        INC CX 
 2249  81 F9 023A            1	        CMP CX,570 
 224D  75 9B                 1	        JNZ ??0114 
 224F  B9 0212               1	    MOV CX,530 
 2252  42                    1	    INC DX 
 2253  81 FA 014A            1	    CMP DX,330 
 2257  75 91                 1	    JNZ ??0113 
				   ;}
				
				   ;{DRAWING THE LOGO
 2259  BE 0000 E		         MOV SI , OFFSET LOGO
				         DRAW_OBJECT LOGOSIZE, SI, LOGO_X, LOGO
				_Y
 225C  51                    1	   PUSH CX 
 225D  53                    1	   PUSH BX 
 225E  8B F6                 1	   MOV SI, SI  ;TAKE THE RIGHT BITMAP FROM A RE
				GISTER CONTAINING THE OFFSET 
 2260  8B 16 00A2 R          1	   MOV     DX, LOGO_Y     ; Y TO START DRAWING 
				AT 
 2264  8B 2E 009C R          1	   MOV BP, LOGOSIZE 
 2268  8A 3C                 1	   MOV BH, [SI] 
 226A                        1	   ??011C:;{ FOR(BP = 50; BD > 0; BP--) 
 226A  8B 0E 00A0 R          1	      MOV     CX, LOGO_X    ; X TO START 
 226E  8B 3E 009C R          1	      MOV DI, LOGOSIZE 
 2272                        1	      ??011B:;{ FOR(DX = 50; DX > 0; DX--) 
 2272  AC                    1	         LODSB              ; FETCH COLOR FOR T
				HIS PIXEL 
 2273  3A F8                 1	         CMP BH ,AL 
 2275  74 04                 1	         JE ??011D 
 2277  B4 0C                 1	         MOV     AH, 0CH    ; AH=0CH IS BIOS.WR
				ITEPIXEL 
 2279  CD 10                 1	         INT     10H 
 227B                        1	         ??011D: 
 227B  41                    1	         INC     CX         ; NEXT X POSITION 
 227C  4F                    1	         DEC     DI 
 227D  75 F3                 1	         JNZ     ??011B 
 227F  42                    1	      INC     DX         ; NEXT Y POSITION 
 2280  4D                    1	      DEC     BP 
 2281  75 E7                 1	      JNZ     ??011C 
 2283  5B                    1	      POP BX 
 2284  59                    1	      POP CX 
				   ;}
				
 2285				   MENUEE:
				   ;{ IF(USER PRESS ANY KEY)
 2285  B4 01			         MOV    AH, 1
 2287  CD 16			         INT    16H
 2289  75 FA			         JNZ    MENUEE
				   ;}
				
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Page     1-132


				   ;{TAKE INPUT AND CLEAR KEYBOARD BUFFER
 228B  B4 00			         MOV     AH, 0
 228D  CD 16			         INT     16H 
 228F  E8 0300 R		         CALL    CLEARKEYBOARDBUFFER  
				   ;}
				   
				   ;{ IF(USER PRESS ECS)
 2292  3C 1B			         CMP     AL,1BH
 2294  75 0C			         JNZ     F1LABEL
				            ;{ THIS TO HANDLE FLICKERING
 2296  B8 4F02			                  MOV    AX, 4F02H 
 2299  BB 0100			                  MOV    BX, 100H
 229C  CD 10			                  INT    10H
				            ;}
 229E  B4 4C			         MOV    AH,4CH
 22A0  CD 21			         INT    21H
				   ;}
				
 22A2				   F1LABEL:
				   ;{ IF(USER PRESS F1)
				   ;     CMP    AH,3BH
 22A2  EB 01 90			         JMP    F2LABEL
				   ;}
 22A5				   F2LABEL:
				   ;{ IF(USER PRESS F2)
 22A5  80 FC 3C			         CMP    AH,3CH
 22A8  75 DB			         JNZ    MENUEE
				   ;}
 22AA  B4 2C			   MOV    AH, 2CH  ;GET SYSTEM TIME
 22AC  CD 21			   INT    21H
 22AE  88 36 008B R		   MOV    PREV_SYS_SECOND, DH  ;STORE THE CURRE
				NT SECOND OF THE SYSTEM
 22B2  C3			   RETN
 22B3				   MAIN_MENU ENDP
				   
				END MAIN 

Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-1


Macros:

		N a m e			Lines

BUSTERWORD . . . . . . . . . . .  	 194
DETECT_COLLISION . . . . . . . .  	  68
DRAW . . . . . . . . . . . . . .  	 208
DRAW_OBJECT  . . . . . . . . . .  	  27
GHOSTWORD  . . . . . . . . . . .  	 125
MENU . . . . . . . . . . . . . .  	  96
PRINTNUM . . . . . . . . . . . .  	  22
RANDOMIZE  . . . . . . . . . . .  	  29
WITHIN_BOUNDARIES  . . . . . . .  	  48
YWN  . . . . . . . . . . . . . .  	 142

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	00FA	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0040	PARA	STACK	'STACK'
MAIN_TEXT  . . . . . . . . . . .  	22B3	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

BACKTOMAINLOOP . . . . . . . . .  	L NEAR	0407	MAIN_TEXT
BACKTOMAINLOOP_1 . . . . . . . .  	L NEAR	0380	MAIN_TEXT
BITMAP_DOWNLEFT_PLAYER2  . . . .  	V BYTE	0000		External
BITMAP_DOWNRIGHT_PLAYER1 . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER1  . . . . . .  	V BYTE	0000		External
BITMAP_DOWN_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_LEFT_PLAYER2  . . . . . .  	V BYTE	0000		External
BITMAP_RIGHT_PLAYER1 . . . . . .  	V BYTE	0000		External
BITMAP_UPLEFT_PLAYER2  . . . . .  	V BYTE	0000		External
BITMAP_UPRIGHT_PLAYER1 . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER1  . . . . . . .  	V BYTE	0000		External
BITMAP_UP_PLAYER2  . . . . . . .  	V BYTE	0000		External
BUFFER . . . . . . . . . . . . .  	L BYTE	0008	_DATA
BULLETSIZE . . . . . . . . . . .  	L WORD	0096	_DATA
BULLETS_HIT  . . . . . . . . . .  	N PROC	1703	MAIN_TEXT	Length = 0081
BULLET_1_MODEL . . . . . . . . .  	V BYTE	0000		External
BULLET_1_MOTION_TYPE . . . . . .  	L WORD	003F	_DATA
BULLET_1_POSITION_X  . . . . . .  	L WORD	0039	_DATA
BULLET_1_POSITION_Y  . . . . . .  	L WORD	003B	_DATA
BULLET_1_SPEED . . . . . . . . .  	L WORD	0041	_DATA
BULLET_1_SPEED_POWER_NUM . . . .  	L WORD	0043	_DATA
BULLET_1_START_POSITION_X  . . .  	L WORD	0015	_DATA
BULLET_1_START_POSITION_Y  . . .  	L WORD	0017	_DATA
BULLET_1_STATUS  . . . . . . . .  	L WORD	003D	_DATA
BULLET_2_MODEL . . . . . . . . .  	V BYTE	0000		External
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-2


BULLET_2_MOTION_TYPE . . . . . .  	L WORD	004B	_DATA
BULLET_2_POSITION_X  . . . . . .  	L WORD	0045	_DATA
BULLET_2_POSITION_Y  . . . . . .  	L WORD	0047	_DATA
BULLET_2_SPEED . . . . . . . . .  	L WORD	004D	_DATA
BULLET_2_SPEED_POWER_NUM . . . .  	L WORD	004F	_DATA
BULLET_2_START_POSITION_X  . . .  	L WORD	0035	_DATA
BULLET_2_START_POSITION_Y  . . .  	L WORD	0037	_DATA
BULLET_2_STATUS  . . . . . . . .  	L WORD	0049	_DATA
BULLET_SPEED_POWERUPS  . . . . .  	L WORD	0051	_DATA

CHECKKEY . . . . . . . . . . . .  	L NEAR	0168	MAIN_TEXT
CHECK_HIT_BUL1_GHOST1  . . . . .  	N PROC	11DD	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST2  . . . . .  	N PROC	12A0	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_GHOST3  . . . . .  	N PROC	1363	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL1_TANK2 . . . . . .  	N PROC	1149	MAIN_TEXT	Length = 0094
CHECK_HIT_BUL2_GHOST1  . . . . .  	N PROC	14BA	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST2  . . . . .  	N PROC	157D	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_GHOST3  . . . . .  	N PROC	1640	MAIN_TEXT	Length = 00C3
CHECK_HIT_BUL2_TANK1 . . . . . .  	N PROC	1426	MAIN_TEXT	Length = 0094
CHECK_HIT_GHOST1_TANK1 . . . . .  	N PROC	1784	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST1_TANK2 . . . . .  	N PROC	1946	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK1 . . . . .  	N PROC	181A	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST2_TANK2 . . . . .  	N PROC	19DC	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK1 . . . . .  	N PROC	18B0	MAIN_TEXT	Length = 0096
CHECK_HIT_GHOST3_TANK2 . . . . .  	N PROC	1A72	MAIN_TEXT	Length = 0096
CLEARKEYBOARDBUFFER  . . . . . .  	N PROC	0300	MAIN_TEXT	Length = 0018
CN . . . . . . . . . . . . . . .  	L NEAR	024E	MAIN_TEXT
COLDD  . . . . . . . . . . . . .  	L NEAR	021D	MAIN_TEXT
COLRAW . . . . . . . . . . . . .  	L NEAR	0236	MAIN_TEXT

DECREASE_HP1_G1  . . . . . . . .  	L NEAR	1810	MAIN_TEXT
DECREASE_HP1_G2  . . . . . . . .  	L NEAR	18A6	MAIN_TEXT
DECREASE_HP1_G3  . . . . . . . .  	L NEAR	193C	MAIN_TEXT
DECREASE_HP2_G1  . . . . . . . .  	L NEAR	19D2	MAIN_TEXT
DECREASE_HP2_G2  . . . . . . . .  	L NEAR	1A68	MAIN_TEXT
DECREASE_HP2_G3  . . . . . . . .  	L NEAR	1AFE	MAIN_TEXT
DMG_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
DMG_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
DOWN1  . . . . . . . . . . . . .  	L NEAR	04B7	MAIN_TEXT
DOWN2  . . . . . . . . . . . . .  	L NEAR	05BE	MAIN_TEXT
DOWNB  . . . . . . . . . . . . .  	L NEAR	0FE5	MAIN_TEXT
DOWNB2 . . . . . . . . . . . . .  	L NEAR	1140	MAIN_TEXT
DOWNLEFT . . . . . . . . . . . .  	L NEAR	0599	MAIN_TEXT
DOWNLEFTB  . . . . . . . . . . .  	L NEAR	111B	MAIN_TEXT
DOWNLEFT_GHOST1  . . . . . . . .  	L NEAR	0B71	MAIN_TEXT
DOWNLEFT_GHOST2  . . . . . . . .  	L NEAR	0C90	MAIN_TEXT
DOWNLEFT_GHOST3  . . . . . . . .  	L NEAR	0DB1	MAIN_TEXT
DOWNRIGHT  . . . . . . . . . . .  	L NEAR	0496	MAIN_TEXT
DOWNRIGHTB . . . . . . . . . . .  	L NEAR	0FC0	MAIN_TEXT
DOWNRIGHT_GHOST1 . . . . . . . .  	L NEAR	0B5D	MAIN_TEXT
DOWNRIGHT_GHOST2 . . . . . . . .  	L NEAR	0C7C	MAIN_TEXT
DOWNRIGHT_GHOST3 . . . . . . . .  	L NEAR	0D9D	MAIN_TEXT
DOWN_LEFT  . . . . . . . . . . .  	L NEAR	112F	MAIN_TEXT
DOWN_LEFT_MOVEMENT . . . . . . .  	L NEAR	1132	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-3


DOWN_RIGHT_MOVEMENT  . . . . . .  	L NEAR	0FD7	MAIN_TEXT
DOWN_RIGHT_SPEED . . . . . . . .  	L NEAR	0FD4	MAIN_TEXT
DRAW1  . . . . . . . . . . . . .  	L NEAR	0B24	MAIN_TEXT
DRAW2  . . . . . . . . . . . . .  	L NEAR	0C43	MAIN_TEXT
DRAW3  . . . . . . . . . . . . .  	L NEAR	0D64	MAIN_TEXT
DRAWTANK . . . . . . . . . . . .  	L NEAR	04DB	MAIN_TEXT
DRAWTANK2  . . . . . . . . . . .  	L NEAR	05E2	MAIN_TEXT
DRAW_BULLET_1  . . . . . . . . .  	N PROC	0EC0	MAIN_TEXT	Length = 00B1
DRAW_BULLET_2  . . . . . . . . .  	N PROC	101F	MAIN_TEXT	Length = 00AD
DRAW_CASE  . . . . . . . . . . .  	L NEAR	018B	MAIN_TEXT
DRAW_GHOST1  . . . . . . . . . .  	N PROC	0A91	MAIN_TEXT	Length = 00C1
DRAW_GHOST2  . . . . . . . . . .  	N PROC	0BB0	MAIN_TEXT	Length = 00C1
DRAW_GHOST3  . . . . . . . . . .  	N PROC	0CD1	MAIN_TEXT	Length = 00C1
DRAW_HEALTH_BAR_1  . . . . . . .  	N PROC	1B08	MAIN_TEXT	Length = 0082
DRAW_HEALTH_BAR_2  . . . . . . .  	N PROC	1B8A	MAIN_TEXT	Length = 0085
DRAW_PORTALS . . . . . . . . . .  	N PROC	0DF2	MAIN_TEXT	Length = 009D
DRAW_RED . . . . . . . . . . . .  	L NEAR	1BD0	MAIN_TEXT
DRAW_TANK1 . . . . . . . . . . .  	N PROC	040C	MAIN_TEXT	Length = 00FD
DRAW_TANK2 . . . . . . . . . . .  	N PROC	0509	MAIN_TEXT	Length = 0107
DRW_PRUP_BAR_1 . . . . . . . . .  	N PROC	1C0F	MAIN_TEXT	Length = 0081
DRW_PRUP_BAR_2 . . . . . . . . .  	N PROC	1C90	MAIN_TEXT	Length = 0081

ENDDRAW_GHOST1 . . . . . . . . .  	L NEAR	0B4D	MAIN_TEXT
ENDDRAW_GHOST11  . . . . . . . .  	L NEAR	0B0B	MAIN_TEXT
ENDDRAW_GHOST2 . . . . . . . . .  	L NEAR	0C6C	MAIN_TEXT
ENDDRAW_GHOST21  . . . . . . . .  	L NEAR	0C2A	MAIN_TEXT
ENDDRAW_GHOST3 . . . . . . . . .  	L NEAR	0D8D	MAIN_TEXT
ENDDRAW_GHOST31  . . . . . . . .  	L NEAR	0D4B	MAIN_TEXT
ENDMOVE_GHOST1 . . . . . . . . .  	L NEAR	0BAB	MAIN_TEXT
ENDMOVE_GHOST2 . . . . . . . . .  	L NEAR	0CCC	MAIN_TEXT
ENDMOVE_GHOST3 . . . . . . . . .  	L NEAR	0DED	MAIN_TEXT
ENDPROGRAM . . . . . . . . . . .  	L NEAR	016E	MAIN_TEXT
ENDPROGRAM1  . . . . . . . . . .  	L NEAR	00C7	MAIN_TEXT
EXISTS_GHOST1  . . . . . . . . .  	L WORD	0057	_DATA
EXISTS_GHOST2  . . . . . . . . .  	L WORD	0067	_DATA
EXISTS_GHOST3  . . . . . . . . .  	L WORD	0077	_DATA
EXITPROG . . . . . . . . . . . .  	L NEAR	03F7	MAIN_TEXT

F1LABEL  . . . . . . . . . . . .  	L NEAR	22A2	MAIN_TEXT
F2LABEL  . . . . . . . . . . . .  	L NEAR	22A5	MAIN_TEXT
FIREBULLET1  . . . . . . . . . .  	L NEAR	0383	MAIN_TEXT
FIRE_BULLET2 . . . . . . . . . .  	N PROC	0FEE	MAIN_TEXT	Length = 0031
FIRE_BULLET_1  . . . . . . . . .  	N PROC	0E8F	MAIN_TEXT	Length = 0031
FIRE_BULLET_2  . . . . . . . . .  	L NEAR	03ED	MAIN_TEXT

GHOST1_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST1_LIVES . . . . . . . . . .  	L NEAR	129B	MAIN_TEXT
GHOST1_LIVES2  . . . . . . . . .  	L NEAR	1578	MAIN_TEXT
GHOST2_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST2_LIVES . . . . . . . . . .  	L NEAR	135E	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-4


GHOST2_LIVES2  . . . . . . . . .  	L NEAR	163B	MAIN_TEXT
GHOST3_0 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_1 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_2 . . . . . . . . . . . .  	V BYTE	0000		External
GHOST3_LIVES . . . . . . . . . .  	L NEAR	1421	MAIN_TEXT
GHOST3_LIVES2  . . . . . . . . .  	L NEAR	16FE	MAIN_TEXT
GHOSTSIZE  . . . . . . . . . . .  	L WORD	0094	_DATA

HEARTSIZE  . . . . . . . . . . .  	L WORD	0098	_DATA
HEARTS_1_START_POSITION_X  . . .  	L WORD	0025	_DATA
HEARTS_1_START_POSITION_Y  . . .  	L WORD	0027	_DATA
HEARTS_2_START_POSITION_X  . . .  	L WORD	0029	_DATA
HEARTS_2_START_POSITION_Y  . . .  	L WORD	002B	_DATA
HP2_LIMIT1 . . . . . . . . . . .  	L NEAR	1539	MAIN_TEXT
HP2_LIMIT2 . . . . . . . . . . .  	L NEAR	15FC	MAIN_TEXT
HP2_LIMIT3 . . . . . . . . . . .  	L NEAR	16BF	MAIN_TEXT
HP_LIMIT1  . . . . . . . . . . .  	L NEAR	125C	MAIN_TEXT
HP_LIMIT2  . . . . . . . . . . .  	L NEAR	131F	MAIN_TEXT
HP_LIMIT3  . . . . . . . . . . .  	L NEAR	13E2	MAIN_TEXT

INCREASE2_DAMAGE1  . . . . . . .  	L NEAR	1551	MAIN_TEXT
INCREASE2_DAMAGE2  . . . . . . .  	L NEAR	1614	MAIN_TEXT
INCREASE2_DAMAGE3  . . . . . . .  	L NEAR	16D7	MAIN_TEXT
INCREASE_DAMAGE1 . . . . . . . .  	L NEAR	1274	MAIN_TEXT
INCREASE_DAMAGE2 . . . . . . . .  	L NEAR	1337	MAIN_TEXT
INCREASE_DAMAGE3 . . . . . . . .  	L NEAR	13FA	MAIN_TEXT

LEFT . . . . . . . . . . . . . .  	L NEAR	0564	MAIN_TEXT
LEFTB  . . . . . . . . . . . . .  	L NEAR	110D	MAIN_TEXT
LEFTBOUND_X  . . . . . . . . . .  	L WORD	0004	_DATA
LOGO . . . . . . . . . . . . . .  	V BYTE	0000		External
LOGOSIZE . . . . . . . . . . . .  	L WORD	009C	_DATA
LOGO_X . . . . . . . . . . . . .  	L WORD	00A0	_DATA
LOGO_Y . . . . . . . . . . . . .  	L WORD	00A2	_DATA
LOSER1 . . . . . . . . . . . . .  	L NEAR	14AC	MAIN_TEXT
LOSER2 . . . . . . . . . . . . .  	L NEAR	11CF	MAIN_TEXT
LOWER4MACRO  . . . . . . . . . .  	L WORD	008C	_DATA
LOWERBOUND_Y . . . . . . . . . .  	L WORD	0002	_DATA

MAIN . . . . . . . . . . . . . .  	F PROC	0000	MAIN_TEXT	Length = 0300
MAINLOOP . . . . . . . . . . . .  	L NEAR	0012	MAIN_TEXT
MAIN_MENU  . . . . . . . . . . .  	N PROC	1F61	MAIN_TEXT	Length = 0352
MENUEE . . . . . . . . . . . . .  	L NEAR	2285	MAIN_TEXT
MENUITEM1  . . . . . . . . . . .  	L BYTE	00A4	_DATA
MENUITEM2  . . . . . . . . . . .  	L BYTE	00BF	_DATA
MENUITEM3  . . . . . . . . . . .  	L BYTE	00DA	_DATA
MOTION_GHOST1  . . . . . . . . .  	L WORD	0059	_DATA
MOTION_GHOST2  . . . . . . . . .  	L WORD	0069	_DATA
MOTION_GHOST3  . . . . . . . . .  	L WORD	0079	_DATA
MOVEDOWN1  . . . . . . . . . . .  	L NEAR	033E	MAIN_TEXT
MOVEDOWN2  . . . . . . . . . . .  	L NEAR	03A8	MAIN_TEXT
MOVEUP1  . . . . . . . . . . . .  	L NEAR	0323	MAIN_TEXT
MOVEUP2  . . . . . . . . . . . .  	L NEAR	038D	MAIN_TEXT
MOVE_BULLET_1  . . . . . . . . .  	N PROC	0F71	MAIN_TEXT	Length = 007D
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-5


MOVE_BULLET_2  . . . . . . . . .  	N PROC	10CC	MAIN_TEXT	Length = 007D
MOVE_GHOST1  . . . . . . . . . .  	N PROC	0B52	MAIN_TEXT	Length = 005E
MOVE_GHOST2  . . . . . . . . . .  	N PROC	0C71	MAIN_TEXT	Length = 0060
MOVE_GHOST3  . . . . . . . . . .  	N PROC	0D92	MAIN_TEXT	Length = 0060
MOV_DOWNLEFT2  . . . . . . . . .  	L NEAR	07DD	MAIN_TEXT
MOV_DOWNRIGHT3 . . . . . . . . .  	L NEAR	0961	MAIN_TEXT
MOV_UPLEFT2  . . . . . . . . . .  	L NEAR	07E3	MAIN_TEXT
MOV_UPRIGHT3 . . . . . . . . . .  	L NEAR	0967	MAIN_TEXT

NOGHOST1 . . . . . . . . . . . .  	L NEAR	0E26	MAIN_TEXT
NOGHOST2 . . . . . . . . . . . .  	L NEAR	0E5A	MAIN_TEXT
NOGHOST3 . . . . . . . . . . . .  	L NEAR	0E8E	MAIN_TEXT
NOGHOSTWAVE  . . . . . . . . . .  	L NEAR	007B	MAIN_TEXT
NOHIT1 . . . . . . . . . . . . .  	L NEAR	11D8	MAIN_TEXT
NOHIT2 . . . . . . . . . . . . .  	L NEAR	14B5	MAIN_TEXT
NOTIMECHANGE . . . . . . . . . .  	L NEAR	007B	MAIN_TEXT
NOT_HITTING  . . . . . . . . . .  	L NEAR	177F	MAIN_TEXT
NO_DMG_PWRUP_1 . . . . . . . . .  	L NEAR	1C8B	MAIN_TEXT
NO_DMG_PWRUP_2 . . . . . . . . .  	L NEAR	1D0C	MAIN_TEXT
NO_SPD_PWRUP_1 . . . . . . . . .  	L NEAR	1C58	MAIN_TEXT
NO_SPD_PWRUP_2 . . . . . . . . .  	L NEAR	1CD9	MAIN_TEXT

ORIENTATION_PLAYER1  . . . . . .  	L WORD	0013	_DATA
ORIENTATION_PLAYER2  . . . . . .  	L WORD	0023	_DATA
ORIENT_DOWN1 . . . . . . . . . .  	L NEAR	0370	MAIN_TEXT
ORIENT_DOWN2 . . . . . . . . . .  	L NEAR	03DA	MAIN_TEXT
ORIENT_UP1 . . . . . . . . . . .  	L NEAR	035D	MAIN_TEXT
ORIENT_UP2 . . . . . . . . . . .  	L NEAR	03C7	MAIN_TEXT

PLAYER1_WON  . . . . . . . . . .  	L NEAR	0182	MAIN_TEXT
PLAYER2_WON  . . . . . . . . . .  	L NEAR	1E3E	MAIN_TEXT
PLAYER_LOST  . . . . . . . . . .  	N PROC	1D11	MAIN_TEXT	Length = 0250
PORTAL . . . . . . . . . . . . .  	V BYTE	0000		External
PORTAL_SIZE  . . . . . . . . . .  	L WORD	0092	_DATA
POWERUP_GHOST1 . . . . . . . . .  	L WORD	005B	_DATA
POWERUP_GHOST2 . . . . . . . . .  	L WORD	006B	_DATA
POWERUP_GHOST3 . . . . . . . . .  	L WORD	007B	_DATA
PRESS_TO_MENU  . . . . . . . . .  	L NEAR	1F59	MAIN_TEXT
PREV_SYS_SECOND  . . . . . . . .  	L BYTE	008B	_DATA
PRUP_ICON_SIZE . . . . . . . . .  	L WORD	009A	_DATA
PWRUP_BAR_1_START_POSITION_X . .  	L WORD	002D	_DATA
PWRUP_BAR_1_START_POSITION_Y . .  	L WORD	002F	_DATA
PWRUP_BAR_2_START_POSITION_X . .  	L WORD	0031	_DATA
PWRUP_BAR_2_START_POSITION_Y . .  	L WORD	0033	_DATA

RANDOMIZE_GHOST1 . . . . . . . .  	N PROC	0610	MAIN_TEXT	Length = 0179
RANDOMIZE_GHOST2 . . . . . . . .  	N PROC	0789	MAIN_TEXT	Length = 0184
RANDOMIZE_GHOST3 . . . . . . . .  	N PROC	090D	MAIN_TEXT	Length = 0184
RANDSEED . . . . . . . . . . . .  	L WORD	0089	_DATA
RED_HEART  . . . . . . . . . . .  	V BYTE	0000		External
RED_PLAYER1  . . . . . . . . . .  	L NEAR	1B16	MAIN_TEXT
RED_PLAYER2  . . . . . . . . . .  	L NEAR	1BD4	MAIN_TEXT
RESULT . . . . . . . . . . . . .  	L NEAR	0188	MAIN_TEXT
RETNURN_DATA2  . . . . . . . . .  	L NEAR	1C0A	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-6


RETNURN_HEALTH1  . . . . . . . .  	L NEAR	1B85	MAIN_TEXT
RETN_DRW_BUL_1 . . . . . . . . .  	L NEAR	0F6C	MAIN_TEXT
RETN_DRW_BUL_11  . . . . . . . .  	L NEAR	0F3A	MAIN_TEXT
RETN_DRW_BUL_2 . . . . . . . . .  	L NEAR	10C7	MAIN_TEXT
RETN_DRW_BUL_22  . . . . . . . .  	L NEAR	1099	MAIN_TEXT
RETN_FIRE_BUL_1  . . . . . . . .  	L NEAR	0EBB	MAIN_TEXT
RETN_FIRE_BUL_2  . . . . . . . .  	L NEAR	101A	MAIN_TEXT
RETN_MOV_BUL_1 . . . . . . . . .  	L NEAR	0FE9	MAIN_TEXT
RETN_MOV_BUL_2 . . . . . . . . .  	L NEAR	1144	MAIN_TEXT
RIGHT  . . . . . . . . . . . . .  	L NEAR	0465	MAIN_TEXT
RIGHTB . . . . . . . . . . . . .  	L NEAR	0FB2	MAIN_TEXT
RIGHTBOUND_X . . . . . . . . . .  	L WORD	0006	_DATA

SKIP1  . . . . . . . . . . . . .  	L NEAR	00CA	MAIN_TEXT
SKIP_BUL1_CHECKS1  . . . . . . .  	L NEAR	00F2	MAIN_TEXT
SKIP_BUL1_CHECKS2  . . . . . . .  	L NEAR	00FC	MAIN_TEXT
SKIP_BUL1_CHECKS3  . . . . . . .  	L NEAR	0106	MAIN_TEXT
SKIP_BUL1_CHECKS4  . . . . . . .  	L NEAR	0110	MAIN_TEXT
SKIP_BUL2_CHECKS1  . . . . . . .  	L NEAR	011A	MAIN_TEXT
SKIP_BUL2_CHECKS2  . . . . . . .  	L NEAR	0124	MAIN_TEXT
SKIP_BUL2_CHECKS3  . . . . . . .  	L NEAR	012E	MAIN_TEXT
SKIP_BUL2_CHECKS4  . . . . . . .  	L NEAR	0138	MAIN_TEXT
SKIP_GHOST1_CHECK1 . . . . . . .  	L NEAR	0092	MAIN_TEXT
SKIP_GHOST1_CHECK2 . . . . . . .  	L NEAR	00B0	MAIN_TEXT
SKIP_GHOST2_CHECK1 . . . . . . .  	L NEAR	009C	MAIN_TEXT
SKIP_GHOST2_CHECK2 . . . . . . .  	L NEAR	00BA	MAIN_TEXT
SKIP_GHOST3_CHECK1 . . . . . . .  	L NEAR	00A6	MAIN_TEXT
SKIP_GHOST3_CHECK3 . . . . . . .  	L NEAR	00C4	MAIN_TEXT
SKIP_HITTING_CHECK . . . . . . .  	L NEAR	014F	MAIN_TEXT
SPD_PRUP_1 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_2 . . . . . . . . . . .  	V BYTE	0000		External
SPD_PRUP_LOOP_1  . . . . . . . .  	L NEAR	1C25	MAIN_TEXT
SPD_PRUP_LOOP_2  . . . . . . . .  	L NEAR	1CA6	MAIN_TEXT
SPEED2_INCREASE1 . . . . . . . .  	L NEAR	1548	MAIN_TEXT
SPEED2_INCREASE2 . . . . . . . .  	L NEAR	160B	MAIN_TEXT
SPEED2_INCREASE3 . . . . . . . .  	L NEAR	16CE	MAIN_TEXT
SPEED2_LIMIT1  . . . . . . . . .  	L NEAR	155A	MAIN_TEXT
SPEED2_LIMIT2  . . . . . . . . .  	L NEAR	161D	MAIN_TEXT
SPEED2_LIMIT3  . . . . . . . . .  	L NEAR	16E0	MAIN_TEXT
SPEED_INCREASE1  . . . . . . . .  	L NEAR	126B	MAIN_TEXT
SPEED_INCREASE2  . . . . . . . .  	L NEAR	132E	MAIN_TEXT
SPEED_INCREASE3  . . . . . . . .  	L NEAR	13F1	MAIN_TEXT
SPEED_LIMIT1 . . . . . . . . . .  	L NEAR	127D	MAIN_TEXT
SPEED_LIMIT2 . . . . . . . . . .  	L NEAR	1340	MAIN_TEXT
SPEED_LIMIT3 . . . . . . . . . .  	L NEAR	1403	MAIN_TEXT
STARTPOS_X_GHOST1  . . . . . . .  	L WORD	0053	_DATA
STARTPOS_X_GHOST2  . . . . . . .  	L WORD	0063	_DATA
STARTPOS_X_GHOST3  . . . . . . .  	L WORD	0073	_DATA
STARTPOS_X_PLAYER1 . . . . . . .  	L WORD	0009	_DATA
STARTPOS_X_PLAYER2 . . . . . . .  	L WORD	0019	_DATA
STARTPOS_X_PORTAL1 . . . . . . .  	L WORD	005D	_DATA
STARTPOS_X_PORTAL2 . . . . . . .  	L WORD	006D	_DATA
STARTPOS_X_PORTAL3 . . . . . . .  	L WORD	007D	_DATA
STARTPOS_Y_GHOST1  . . . . . . .  	L WORD	0055	_DATA
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-7


STARTPOS_Y_GHOST2  . . . . . . .  	L WORD	0065	_DATA
STARTPOS_Y_GHOST3  . . . . . . .  	L WORD	0075	_DATA
STARTPOS_Y_PLAYER1 . . . . . . .  	L WORD	000B	_DATA
STARTPOS_Y_PLAYER2 . . . . . . .  	L WORD	001B	_DATA
STARTPOS_Y_PORTAL1 . . . . . . .  	L WORD	005F	_DATA
STARTPOS_Y_PORTAL2 . . . . . . .  	L WORD	006F	_DATA
STARTPOS_Y_PORTAL3 . . . . . . .  	L WORD	007F	_DATA

T1_KILL_G1 . . . . . . . . . . .  	L NEAR	128F	MAIN_TEXT
T1_KILL_G2 . . . . . . . . . . .  	L NEAR	1352	MAIN_TEXT
T1_KILL_G3 . . . . . . . . . . .  	L NEAR	1415	MAIN_TEXT
T2_KILL_G1 . . . . . . . . . . .  	L NEAR	156C	MAIN_TEXT
T2_KILL_G2 . . . . . . . . . . .  	L NEAR	162F	MAIN_TEXT
T2_KILL_G3 . . . . . . . . . . .  	L NEAR	16F2	MAIN_TEXT
TANK1_SAFE1  . . . . . . . . . .  	L NEAR	1815	MAIN_TEXT
TANK1_SAFE2  . . . . . . . . . .  	L NEAR	18AB	MAIN_TEXT
TANK1_SAFE3  . . . . . . . . . .  	L NEAR	1941	MAIN_TEXT
TANK2_SAFE1  . . . . . . . . . .  	L NEAR	19D7	MAIN_TEXT
TANK2_SAFE2  . . . . . . . . . .  	L NEAR	1A6D	MAIN_TEXT
TANK2_SAFE3  . . . . . . . . . .  	L NEAR	1B03	MAIN_TEXT
TANKSIZE . . . . . . . . . . . .  	L WORD	0090	_DATA
TANK_DMG_1 . . . . . . . . . . .  	L WORD	0011	_DATA
TANK_DMG_2 . . . . . . . . . . .  	L WORD	0021	_DATA
TANK_HP_1  . . . . . . . . . . .  	L WORD	000D	_DATA
TANK_HP_2  . . . . . . . . . . .  	L WORD	001D	_DATA
TANK_SPEED_1 . . . . . . . . . .  	L WORD	000F	_DATA
TANK_SPEED_2 . . . . . . . . . .  	L WORD	001F	_DATA
TIME . . . . . . . . . . . . . .  	L WORD	0083	_DATA
TIME_DECIMAL . . . . . . . . . .  	L BYTE	0085	_DATA	Length = 0004
TYPE_GHOST1  . . . . . . . . . .  	L WORD	0061	_DATA
TYPE_GHOST2  . . . . . . . . . .  	L WORD	0071	_DATA
TYPE_GHOST3  . . . . . . . . . .  	L WORD	0081	_DATA

UPLEFT . . . . . . . . . . . . .  	L NEAR	053F	MAIN_TEXT
UPLEFTB  . . . . . . . . . . . .  	L NEAR	10E8	MAIN_TEXT
UPLEFT_GHOST1  . . . . . . . . .  	L NEAR	0B99	MAIN_TEXT
UPLEFT_GHOST2  . . . . . . . . .  	L NEAR	0CB8	MAIN_TEXT
UPLEFT_GHOST3  . . . . . . . . .  	L NEAR	0DD9	MAIN_TEXT
UPPER4MACRO  . . . . . . . . . .  	L WORD	008E	_DATA
UPPERBOUND_Y . . . . . . . . . .  	L WORD	0000	_DATA
UPRIGHT  . . . . . . . . . . . .  	L NEAR	0442	MAIN_TEXT
UPRIGHTB . . . . . . . . . . . .  	L NEAR	0F8D	MAIN_TEXT
UPRIGHT_GHOST1 . . . . . . . . .  	L NEAR	0B85	MAIN_TEXT
UPRIGHT_GHOST2 . . . . . . . . .  	L NEAR	0CA4	MAIN_TEXT
UPRIGHT_GHOST3 . . . . . . . . .  	L NEAR	0DC5	MAIN_TEXT
UP_LEFT  . . . . . . . . . . . .  	L NEAR	10FC	MAIN_TEXT
UP_LEFT_MOVEMENT . . . . . . . .  	L NEAR	10FF	MAIN_TEXT
UP_RIGHT_MOVEMENT  . . . . . . .  	L NEAR	0FA4	MAIN_TEXT
UP_RIGHT_SPEED . . . . . . . . .  	L NEAR	0FA1	MAIN_TEXT
USERINPUT  . . . . . . . . . . .  	N PROC	0318	MAIN_TEXT	Length = 00F4

WHITE_HEART  . . . . . . . . . .  	V BYTE	0000		External
WHITE_PLAYER1  . . . . . . . . .  	L NEAR	1B52	MAIN_TEXT
WHITE_PLAYER2  . . . . . . . . .  	L NEAR	1B9D	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-8


WINNER . . . . . . . . . . . . .  	L WORD	009E	_DATA

??0000 . . . . . . . . . . . . .  	L NEAR	0031	MAIN_TEXT
??0001 . . . . . . . . . . . . .  	L NEAR	019B	MAIN_TEXT
??0002 . . . . . . . . . . . . .  	L NEAR	019B	MAIN_TEXT
??0004 . . . . . . . . . . . . .  	L NEAR	01A2	MAIN_TEXT
??0005 . . . . . . . . . . . . .  	L NEAR	01BC	MAIN_TEXT
??0006 . . . . . . . . . . . . .  	L NEAR	0201	MAIN_TEXT
??0007 . . . . . . . . . . . . .  	L NEAR	01BC	MAIN_TEXT
??0008 . . . . . . . . . . . . .  	L NEAR	0201	MAIN_TEXT
??0009 . . . . . . . . . . . . .  	L NEAR	01E0	MAIN_TEXT
??000A . . . . . . . . . . . . .  	L NEAR	01E0	MAIN_TEXT
??000C . . . . . . . . . . . . .  	L NEAR	021D	MAIN_TEXT
??000D . . . . . . . . . . . . .  	L NEAR	0246	MAIN_TEXT
??000E . . . . . . . . . . . . .  	L NEAR	0236	MAIN_TEXT
??000F . . . . . . . . . . . . .  	L NEAR	028B	MAIN_TEXT
??0010 . . . . . . . . . . . . .  	L NEAR	028B	MAIN_TEXT
??0011 . . . . . . . . . . . . .  	L NEAR	029B	MAIN_TEXT
??0012 . . . . . . . . . . . . .  	L NEAR	02AB	MAIN_TEXT
??0013 . . . . . . . . . . . . .  	L NEAR	02C9	MAIN_TEXT
??0014 . . . . . . . . . . . . .  	L NEAR	02C1	MAIN_TEXT
??0015 . . . . . . . . . . . . .  	L NEAR	02A3	MAIN_TEXT
??0016 . . . . . . . . . . . . .  	L NEAR	02B9	MAIN_TEXT
??0017 . . . . . . . . . . . . .  	L NEAR	04F1	MAIN_TEXT
??0018 . . . . . . . . . . . . .  	L NEAR	04E9	MAIN_TEXT
??0019 . . . . . . . . . . . . .  	L NEAR	04FA	MAIN_TEXT
??001A . . . . . . . . . . . . .  	L NEAR	05F8	MAIN_TEXT
??001B . . . . . . . . . . . . .  	L NEAR	05F0	MAIN_TEXT
??001C . . . . . . . . . . . . .  	L NEAR	0601	MAIN_TEXT
??001D . . . . . . . . . . . . .  	L NEAR	0636	MAIN_TEXT
??001E . . . . . . . . . . . . .  	L NEAR	0649	MAIN_TEXT
??001F . . . . . . . . . . . . .  	L NEAR	0670	MAIN_TEXT
??0020 . . . . . . . . . . . . .  	L NEAR	0683	MAIN_TEXT
??0021 . . . . . . . . . . . . .  	L NEAR	06AA	MAIN_TEXT
??0022 . . . . . . . . . . . . .  	L NEAR	06BD	MAIN_TEXT
??0023 . . . . . . . . . . . . .  	L NEAR	06FC	MAIN_TEXT
??0024 . . . . . . . . . . . . .  	L NEAR	0711	MAIN_TEXT
??0025 . . . . . . . . . . . . .  	L NEAR	0751	MAIN_TEXT
??0026 . . . . . . . . . . . . .  	L NEAR	0766	MAIN_TEXT
??0027 . . . . . . . . . . . . .  	L NEAR	07AF	MAIN_TEXT
??0028 . . . . . . . . . . . . .  	L NEAR	07C2	MAIN_TEXT
??0029 . . . . . . . . . . . . .  	L NEAR	07FF	MAIN_TEXT
??002A . . . . . . . . . . . . .  	L NEAR	0812	MAIN_TEXT
??002B . . . . . . . . . . . . .  	L NEAR	0839	MAIN_TEXT
??002C . . . . . . . . . . . . .  	L NEAR	084C	MAIN_TEXT
??002D . . . . . . . . . . . . .  	L NEAR	0882	MAIN_TEXT
??002E . . . . . . . . . . . . .  	L NEAR	0897	MAIN_TEXT
??002F . . . . . . . . . . . . .  	L NEAR	08D5	MAIN_TEXT
??0030 . . . . . . . . . . . . .  	L NEAR	08EA	MAIN_TEXT
??0031 . . . . . . . . . . . . .  	L NEAR	0933	MAIN_TEXT
??0032 . . . . . . . . . . . . .  	L NEAR	0946	MAIN_TEXT
??0033 . . . . . . . . . . . . .  	L NEAR	0983	MAIN_TEXT
??0034 . . . . . . . . . . . . .  	L NEAR	0996	MAIN_TEXT
??0035 . . . . . . . . . . . . .  	L NEAR	09BD	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-9


??0036 . . . . . . . . . . . . .  	L NEAR	09D0	MAIN_TEXT
??0037 . . . . . . . . . . . . .  	L NEAR	0A06	MAIN_TEXT
??0038 . . . . . . . . . . . . .  	L NEAR	0A1B	MAIN_TEXT
??0039 . . . . . . . . . . . . .  	L NEAR	0A59	MAIN_TEXT
??003A . . . . . . . . . . . . .  	L NEAR	0A6E	MAIN_TEXT
??003B . . . . . . . . . . . . .  	L NEAR	0AA6	MAIN_TEXT
??003C . . . . . . . . . . . . .  	L NEAR	0ABB	MAIN_TEXT
??003D . . . . . . . . . . . . .  	L NEAR	0AED	MAIN_TEXT
??003E . . . . . . . . . . . . .  	L NEAR	0AD4	MAIN_TEXT
??003F . . . . . . . . . . . . .  	L NEAR	0B02	MAIN_TEXT
??0040 . . . . . . . . . . . . .  	L NEAR	0B3A	MAIN_TEXT
??0041 . . . . . . . . . . . . .  	L NEAR	0B32	MAIN_TEXT
??0042 . . . . . . . . . . . . .  	L NEAR	0B43	MAIN_TEXT
??0043 . . . . . . . . . . . . .  	L NEAR	0BC5	MAIN_TEXT
??0044 . . . . . . . . . . . . .  	L NEAR	0BDA	MAIN_TEXT
??0045 . . . . . . . . . . . . .  	L NEAR	0C0C	MAIN_TEXT
??0046 . . . . . . . . . . . . .  	L NEAR	0BF3	MAIN_TEXT
??0047 . . . . . . . . . . . . .  	L NEAR	0C21	MAIN_TEXT
??0048 . . . . . . . . . . . . .  	L NEAR	0C59	MAIN_TEXT
??0049 . . . . . . . . . . . . .  	L NEAR	0C51	MAIN_TEXT
??004A . . . . . . . . . . . . .  	L NEAR	0C62	MAIN_TEXT
??004B . . . . . . . . . . . . .  	L NEAR	0CE6	MAIN_TEXT
??004C . . . . . . . . . . . . .  	L NEAR	0CFB	MAIN_TEXT
??004D . . . . . . . . . . . . .  	L NEAR	0D2D	MAIN_TEXT
??004E . . . . . . . . . . . . .  	L NEAR	0D14	MAIN_TEXT
??004F . . . . . . . . . . . . .  	L NEAR	0D42	MAIN_TEXT
??0050 . . . . . . . . . . . . .  	L NEAR	0D7A	MAIN_TEXT
??0051 . . . . . . . . . . . . .  	L NEAR	0D72	MAIN_TEXT
??0052 . . . . . . . . . . . . .  	L NEAR	0D83	MAIN_TEXT
??0053 . . . . . . . . . . . . .  	L NEAR	0E13	MAIN_TEXT
??0054 . . . . . . . . . . . . .  	L NEAR	0E0B	MAIN_TEXT
??0055 . . . . . . . . . . . . .  	L NEAR	0E1C	MAIN_TEXT
??0056 . . . . . . . . . . . . .  	L NEAR	0E47	MAIN_TEXT
??0057 . . . . . . . . . . . . .  	L NEAR	0E3F	MAIN_TEXT
??0058 . . . . . . . . . . . . .  	L NEAR	0E50	MAIN_TEXT
??0059 . . . . . . . . . . . . .  	L NEAR	0E7B	MAIN_TEXT
??005A . . . . . . . . . . . . .  	L NEAR	0E73	MAIN_TEXT
??005B . . . . . . . . . . . . .  	L NEAR	0E84	MAIN_TEXT
??005C . . . . . . . . . . . . .  	L NEAR	0ED5	MAIN_TEXT
??005D . . . . . . . . . . . . .  	L NEAR	0EEA	MAIN_TEXT
??005E . . . . . . . . . . . . .  	L NEAR	0F1C	MAIN_TEXT
??005F . . . . . . . . . . . . .  	L NEAR	0F03	MAIN_TEXT
??0060 . . . . . . . . . . . . .  	L NEAR	0F31	MAIN_TEXT
??0061 . . . . . . . . . . . . .  	L NEAR	0F59	MAIN_TEXT
??0062 . . . . . . . . . . . . .  	L NEAR	0F51	MAIN_TEXT
??0063 . . . . . . . . . . . . .  	L NEAR	0F62	MAIN_TEXT
??0064 . . . . . . . . . . . . .  	L NEAR	1034	MAIN_TEXT
??0065 . . . . . . . . . . . . .  	L NEAR	1049	MAIN_TEXT
??0066 . . . . . . . . . . . . .  	L NEAR	107B	MAIN_TEXT
??0067 . . . . . . . . . . . . .  	L NEAR	1062	MAIN_TEXT
??0068 . . . . . . . . . . . . .  	L NEAR	1090	MAIN_TEXT
??0069 . . . . . . . . . . . . .  	L NEAR	10B4	MAIN_TEXT
??006A . . . . . . . . . . . . .  	L NEAR	10AC	MAIN_TEXT
??006B . . . . . . . . . . . . .  	L NEAR	10BD	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-10


??006C . . . . . . . . . . . . .  	L NEAR	1180	MAIN_TEXT
??006D . . . . . . . . . . . . .  	L NEAR	1186	MAIN_TEXT
??006E . . . . . . . . . . . . .  	L NEAR	11AD	MAIN_TEXT
??006F . . . . . . . . . . . . .  	L NEAR	119E	MAIN_TEXT
??0070 . . . . . . . . . . . . .  	L NEAR	11A4	MAIN_TEXT
??0071 . . . . . . . . . . . . .  	L NEAR	11B3	MAIN_TEXT
??0072 . . . . . . . . . . . . .  	L NEAR	1214	MAIN_TEXT
??0073 . . . . . . . . . . . . .  	L NEAR	121A	MAIN_TEXT
??0074 . . . . . . . . . . . . .  	L NEAR	1241	MAIN_TEXT
??0075 . . . . . . . . . . . . .  	L NEAR	1232	MAIN_TEXT
??0076 . . . . . . . . . . . . .  	L NEAR	1238	MAIN_TEXT
??0077 . . . . . . . . . . . . .  	L NEAR	1247	MAIN_TEXT
??0078 . . . . . . . . . . . . .  	L NEAR	12D7	MAIN_TEXT
??0079 . . . . . . . . . . . . .  	L NEAR	12DD	MAIN_TEXT
??007A . . . . . . . . . . . . .  	L NEAR	1304	MAIN_TEXT
??007B . . . . . . . . . . . . .  	L NEAR	12F5	MAIN_TEXT
??007C . . . . . . . . . . . . .  	L NEAR	12FB	MAIN_TEXT
??007D . . . . . . . . . . . . .  	L NEAR	130A	MAIN_TEXT
??007E . . . . . . . . . . . . .  	L NEAR	139A	MAIN_TEXT
??007F . . . . . . . . . . . . .  	L NEAR	13A0	MAIN_TEXT
??0080 . . . . . . . . . . . . .  	L NEAR	13C7	MAIN_TEXT
??0081 . . . . . . . . . . . . .  	L NEAR	13B8	MAIN_TEXT
??0082 . . . . . . . . . . . . .  	L NEAR	13BE	MAIN_TEXT
??0083 . . . . . . . . . . . . .  	L NEAR	13CD	MAIN_TEXT
??0084 . . . . . . . . . . . . .  	L NEAR	145D	MAIN_TEXT
??0085 . . . . . . . . . . . . .  	L NEAR	1463	MAIN_TEXT
??0086 . . . . . . . . . . . . .  	L NEAR	148A	MAIN_TEXT
??0087 . . . . . . . . . . . . .  	L NEAR	147B	MAIN_TEXT
??0088 . . . . . . . . . . . . .  	L NEAR	1481	MAIN_TEXT
??0089 . . . . . . . . . . . . .  	L NEAR	1490	MAIN_TEXT
??008A . . . . . . . . . . . . .  	L NEAR	14F1	MAIN_TEXT
??008B . . . . . . . . . . . . .  	L NEAR	14F7	MAIN_TEXT
??008C . . . . . . . . . . . . .  	L NEAR	151E	MAIN_TEXT
??008D . . . . . . . . . . . . .  	L NEAR	150F	MAIN_TEXT
??008E . . . . . . . . . . . . .  	L NEAR	1515	MAIN_TEXT
??008F . . . . . . . . . . . . .  	L NEAR	1524	MAIN_TEXT
??0090 . . . . . . . . . . . . .  	L NEAR	15B4	MAIN_TEXT
??0091 . . . . . . . . . . . . .  	L NEAR	15BA	MAIN_TEXT
??0092 . . . . . . . . . . . . .  	L NEAR	15E1	MAIN_TEXT
??0093 . . . . . . . . . . . . .  	L NEAR	15D2	MAIN_TEXT
??0094 . . . . . . . . . . . . .  	L NEAR	15D8	MAIN_TEXT
??0095 . . . . . . . . . . . . .  	L NEAR	15E7	MAIN_TEXT
??0096 . . . . . . . . . . . . .  	L NEAR	1677	MAIN_TEXT
??0097 . . . . . . . . . . . . .  	L NEAR	167D	MAIN_TEXT
??0098 . . . . . . . . . . . . .  	L NEAR	16A4	MAIN_TEXT
??0099 . . . . . . . . . . . . .  	L NEAR	1695	MAIN_TEXT
??009A . . . . . . . . . . . . .  	L NEAR	169B	MAIN_TEXT
??009B . . . . . . . . . . . . .  	L NEAR	16AA	MAIN_TEXT
??009C . . . . . . . . . . . . .  	L NEAR	173A	MAIN_TEXT
??009D . . . . . . . . . . . . .  	L NEAR	1740	MAIN_TEXT
??009E . . . . . . . . . . . . .  	L NEAR	1767	MAIN_TEXT
??009F . . . . . . . . . . . . .  	L NEAR	1758	MAIN_TEXT
??00A0 . . . . . . . . . . . . .  	L NEAR	175E	MAIN_TEXT
??00A1 . . . . . . . . . . . . .  	L NEAR	176D	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-11


??00A2 . . . . . . . . . . . . .  	L NEAR	17BB	MAIN_TEXT
??00A3 . . . . . . . . . . . . .  	L NEAR	17C1	MAIN_TEXT
??00A4 . . . . . . . . . . . . .  	L NEAR	17E8	MAIN_TEXT
??00A5 . . . . . . . . . . . . .  	L NEAR	17D9	MAIN_TEXT
??00A6 . . . . . . . . . . . . .  	L NEAR	17DF	MAIN_TEXT
??00A7 . . . . . . . . . . . . .  	L NEAR	17EE	MAIN_TEXT
??00A8 . . . . . . . . . . . . .  	L NEAR	1851	MAIN_TEXT
??00A9 . . . . . . . . . . . . .  	L NEAR	1857	MAIN_TEXT
??00AA . . . . . . . . . . . . .  	L NEAR	187E	MAIN_TEXT
??00AB . . . . . . . . . . . . .  	L NEAR	186F	MAIN_TEXT
??00AC . . . . . . . . . . . . .  	L NEAR	1875	MAIN_TEXT
??00AD . . . . . . . . . . . . .  	L NEAR	1884	MAIN_TEXT
??00AE . . . . . . . . . . . . .  	L NEAR	18E7	MAIN_TEXT
??00AF . . . . . . . . . . . . .  	L NEAR	18ED	MAIN_TEXT
??00B0 . . . . . . . . . . . . .  	L NEAR	1914	MAIN_TEXT
??00B1 . . . . . . . . . . . . .  	L NEAR	1905	MAIN_TEXT
??00B2 . . . . . . . . . . . . .  	L NEAR	190B	MAIN_TEXT
??00B3 . . . . . . . . . . . . .  	L NEAR	191A	MAIN_TEXT
??00B4 . . . . . . . . . . . . .  	L NEAR	197D	MAIN_TEXT
??00B5 . . . . . . . . . . . . .  	L NEAR	1983	MAIN_TEXT
??00B6 . . . . . . . . . . . . .  	L NEAR	19AA	MAIN_TEXT
??00B7 . . . . . . . . . . . . .  	L NEAR	199B	MAIN_TEXT
??00B8 . . . . . . . . . . . . .  	L NEAR	19A1	MAIN_TEXT
??00B9 . . . . . . . . . . . . .  	L NEAR	19B0	MAIN_TEXT
??00BA . . . . . . . . . . . . .  	L NEAR	1A13	MAIN_TEXT
??00BB . . . . . . . . . . . . .  	L NEAR	1A19	MAIN_TEXT
??00BC . . . . . . . . . . . . .  	L NEAR	1A40	MAIN_TEXT
??00BD . . . . . . . . . . . . .  	L NEAR	1A31	MAIN_TEXT
??00BE . . . . . . . . . . . . .  	L NEAR	1A37	MAIN_TEXT
??00BF . . . . . . . . . . . . .  	L NEAR	1A46	MAIN_TEXT
??00C0 . . . . . . . . . . . . .  	L NEAR	1AA9	MAIN_TEXT
??00C1 . . . . . . . . . . . . .  	L NEAR	1AAF	MAIN_TEXT
??00C2 . . . . . . . . . . . . .  	L NEAR	1AD6	MAIN_TEXT
??00C3 . . . . . . . . . . . . .  	L NEAR	1AC7	MAIN_TEXT
??00C4 . . . . . . . . . . . . .  	L NEAR	1ACD	MAIN_TEXT
??00C5 . . . . . . . . . . . . .  	L NEAR	1ADC	MAIN_TEXT
??00C6 . . . . . . . . . . . . .  	L NEAR	1B2F	MAIN_TEXT
??00C7 . . . . . . . . . . . . .  	L NEAR	1B27	MAIN_TEXT
??00C8 . . . . . . . . . . . . .  	L NEAR	1B38	MAIN_TEXT
??00C9 . . . . . . . . . . . . .  	L NEAR	1B6B	MAIN_TEXT
??00CA . . . . . . . . . . . . .  	L NEAR	1B63	MAIN_TEXT
??00CB . . . . . . . . . . . . .  	L NEAR	1B74	MAIN_TEXT
??00CC . . . . . . . . . . . . .  	L NEAR	1BB6	MAIN_TEXT
??00CD . . . . . . . . . . . . .  	L NEAR	1BAE	MAIN_TEXT
??00CE . . . . . . . . . . . . .  	L NEAR	1BBF	MAIN_TEXT
??00CF . . . . . . . . . . . . .  	L NEAR	1BED	MAIN_TEXT
??00D0 . . . . . . . . . . . . .  	L NEAR	1BE5	MAIN_TEXT
??00D1 . . . . . . . . . . . . .  	L NEAR	1BF6	MAIN_TEXT
??00D2 . . . . . . . . . . . . .  	L NEAR	1C3B	MAIN_TEXT
??00D3 . . . . . . . . . . . . .  	L NEAR	1C33	MAIN_TEXT
??00D4 . . . . . . . . . . . . .  	L NEAR	1C44	MAIN_TEXT
??00D5 . . . . . . . . . . . . .  	L NEAR	1C78	MAIN_TEXT
??00D6 . . . . . . . . . . . . .  	L NEAR	1C70	MAIN_TEXT
??00D7 . . . . . . . . . . . . .  	L NEAR	1C81	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-12


??00D8 . . . . . . . . . . . . .  	L NEAR	1CBC	MAIN_TEXT
??00D9 . . . . . . . . . . . . .  	L NEAR	1CB4	MAIN_TEXT
??00DA . . . . . . . . . . . . .  	L NEAR	1CC5	MAIN_TEXT
??00DB . . . . . . . . . . . . .  	L NEAR	1CF9	MAIN_TEXT
??00DC . . . . . . . . . . . . .  	L NEAR	1CF1	MAIN_TEXT
??00DD . . . . . . . . . . . . .  	L NEAR	1D02	MAIN_TEXT
??00DE . . . . . . . . . . . . .  	L NEAR	1D29	MAIN_TEXT
??00DF . . . . . . . . . . . . .  	L NEAR	1D29	MAIN_TEXT
??00E0 . . . . . . . . . . . . .  	L NEAR	1D3C	MAIN_TEXT
??00E1 . . . . . . . . . . . . .  	L NEAR	1D4A	MAIN_TEXT
??00E2 . . . . . . . . . . . . .  	L NEAR	1DA5	MAIN_TEXT
??00E3 . . . . . . . . . . . . .  	L NEAR	1DEC	MAIN_TEXT
??00E4 . . . . . . . . . . . . .  	L NEAR	1DA5	MAIN_TEXT
??00E5 . . . . . . . . . . . . .  	L NEAR	1DEC	MAIN_TEXT
??00E6 . . . . . . . . . . . . .  	L NEAR	1E28	MAIN_TEXT
??00E7 . . . . . . . . . . . . .  	L NEAR	1E21	MAIN_TEXT
??00E8 . . . . . . . . . . . . .  	L NEAR	1E31	MAIN_TEXT
??00E9 . . . . . . . . . . . . .  	L NEAR	1E4E	MAIN_TEXT
??00EA . . . . . . . . . . . . .  	L NEAR	1E4E	MAIN_TEXT
??00EB . . . . . . . . . . . . .  	L NEAR	1E61	MAIN_TEXT
??00EC . . . . . . . . . . . . .  	L NEAR	1E6F	MAIN_TEXT
??00ED . . . . . . . . . . . . .  	L NEAR	1ECA	MAIN_TEXT
??00EE . . . . . . . . . . . . .  	L NEAR	1F11	MAIN_TEXT
??00EF . . . . . . . . . . . . .  	L NEAR	1ECA	MAIN_TEXT
??00F0 . . . . . . . . . . . . .  	L NEAR	1F11	MAIN_TEXT
??00F1 . . . . . . . . . . . . .  	L NEAR	1F46	MAIN_TEXT
??00F2 . . . . . . . . . . . . .  	L NEAR	1F3F	MAIN_TEXT
??00F3 . . . . . . . . . . . . .  	L NEAR	1F4F	MAIN_TEXT
??00F4 . . . . . . . . . . . . .  	L NEAR	1F7D	MAIN_TEXT
??00F5 . . . . . . . . . . . . .  	L NEAR	1F7D	MAIN_TEXT
??00F6 . . . . . . . . . . . . .  	L NEAR	1FA8	MAIN_TEXT
??00F7 . . . . . . . . . . . . .  	L NEAR	1FCD	MAIN_TEXT
??00F8 . . . . . . . . . . . . .  	L NEAR	1FF2	MAIN_TEXT
??00F9 . . . . . . . . . . . . .  	L NEAR	2016	MAIN_TEXT
??00FA . . . . . . . . . . . . .  	L NEAR	2016	MAIN_TEXT
??00FB . . . . . . . . . . . . .  	L NEAR	202E	MAIN_TEXT
??00FC . . . . . . . . . . . . .  	L NEAR	2058	MAIN_TEXT
??00FD . . . . . . . . . . . . .  	L NEAR	2091	MAIN_TEXT
??00FE . . . . . . . . . . . . .  	L NEAR	2091	MAIN_TEXT
??00FF . . . . . . . . . . . . .  	L NEAR	2026	MAIN_TEXT
??0100 . . . . . . . . . . . . .  	L NEAR	2050	MAIN_TEXT
??0101 . . . . . . . . . . . . .  	L NEAR	2078	MAIN_TEXT
??0102 . . . . . . . . . . . . .  	L NEAR	2078	MAIN_TEXT
??0103 . . . . . . . . . . . . .  	L NEAR	20EF	MAIN_TEXT
??0104 . . . . . . . . . . . . .  	L NEAR	20EF	MAIN_TEXT
??0105 . . . . . . . . . . . . .  	L NEAR	2107	MAIN_TEXT
??0106 . . . . . . . . . . . . .  	L NEAR	2127	MAIN_TEXT
??0107 . . . . . . . . . . . . .  	L NEAR	2167	MAIN_TEXT
??0108 . . . . . . . . . . . . .  	L NEAR	2167	MAIN_TEXT
??0109 . . . . . . . . . . . . .  	L NEAR	20FF	MAIN_TEXT
??010A . . . . . . . . . . . . .  	L NEAR	211F	MAIN_TEXT
??010B . . . . . . . . . . . . .  	L NEAR	214C	MAIN_TEXT
??010C . . . . . . . . . . . . .  	L NEAR	2144	MAIN_TEXT
??010D . . . . . . . . . . . . .  	L NEAR	2195	MAIN_TEXT
Microsoft (R) Macro Assembler Version 5.10                  12/7/19 20:58:37
                                                             Symbols-13


??010E . . . . . . . . . . . . .  	L NEAR	217F	MAIN_TEXT
??010F . . . . . . . . . . . . .  	L NEAR	2177	MAIN_TEXT
??0110 . . . . . . . . . . . . .  	L NEAR	2187	MAIN_TEXT
??0111 . . . . . . . . . . . . .  	L NEAR	219D	MAIN_TEXT
??0112 . . . . . . . . . . . . .  	L NEAR	21A5	MAIN_TEXT
??0113 . . . . . . . . . . . . .  	L NEAR	21EA	MAIN_TEXT
??0114 . . . . . . . . . . . . .  	L NEAR	21EA	MAIN_TEXT
??0115 . . . . . . . . . . . . .  	L NEAR	2214	MAIN_TEXT
??0116 . . . . . . . . . . . . .  	L NEAR	221C	MAIN_TEXT
??0117 . . . . . . . . . . . . .  	L NEAR	2224	MAIN_TEXT
??0118 . . . . . . . . . . . . .  	L NEAR	2242	MAIN_TEXT
??0119 . . . . . . . . . . . . .  	L NEAR	2232	MAIN_TEXT
??011A . . . . . . . . . . . . .  	L NEAR	223A	MAIN_TEXT
??011B . . . . . . . . . . . . .  	L NEAR	2272	MAIN_TEXT
??011C . . . . . . . . . . . . .  	L NEAR	226A	MAIN_TEXT
??011D . . . . . . . . . . . . .  	L NEAR	227B	MAIN_TEXT
@CODE  . . . . . . . . . . . . .  	TEXT  main_TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  1		
@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@DATASIZE  . . . . . . . . . . .  	TEXT  1		
@FILENAME  . . . . . . . . . . .  	TEXT  main		
@VERSION . . . . . . . . . . . .  	TEXT  510		


   3676 Source  Lines
   6867 Total   Lines
    644 Symbols

  46908 + 348925 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
