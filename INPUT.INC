
;------------------------------------------------------------------------
; TAKE ACTION BASED ON USER INPUT
;--------------------------------------------------------------------------

USERINPUT MACRO 
;{    
LOCAL MOVEUP1, MOVEDOWN1, ORIENT_UP1, ORIENT_DOWN1, MOVEUP2, BACKTOMAINLOOP, EXITPROG, ORIENT_DOWN2, ORIENT_UP2MOVEDOWN2
   PUSH AX
   PUSH BX
   PUSH CX
   PUSH DX

   MOV AH, 0
   INT 16H     ; TAKE THE USER INPUT FROM THE KEYBOARD BUFFER 
   CALL CLEARKEYBOARDBUFFER  
   
   
   MOVEUP1:
   ;{
      CMP AL, 'w' 
      JNE MOVEDOWN1
      MOV CX, STARTPOS_Y_PLAYER1
      MOV BX, UPPERBOUND_Y
      SUB CX, BX
      CMP CX, 3  ;CURRENT Y DISTANCE TO THE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDARY
      JL BACKTOMAINLOOP_1
      SUB STARTPOS_Y_PLAYER1, 3
      JMP BACKTOMAINLOOP_1     
   ;}
   
   MOVEDOWN1:
   ;{
      CMP AL, 's' 
      JNE ORIENT_UP1
      MOV CX, STARTPOS_Y_PLAYER1
      ADD CX, TANKSIZE    ;GET THE Y COORDINATE OF THE LOWEST POINT OF THE TANK
      MOV BX, LOWERBOUND_Y
      SUB BX, CX
      CMP BX, 3  ;CURRENT Y DISTANCE TO THE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDARY
      JL BACKTOMAINLOOP_1
      ADD STARTPOS_Y_PLAYER1, 3
      JMP BACKTOMAINLOOP_1 
   ;}
      
   
   ORIENT_UP1:
   ;{
      CMP AL, 'q' 
      JNE ORIENT_DOWN1
      CMP ORIENTATION_PLAYER1, 0
      JE BACKTOMAINLOOP_1
      SUB ORIENTATION_PLAYER1, 1 
      JMP BACKTOMAINLOOP_1
   ;}
   ORIENT_DOWN1:
   ;{
      CMP AL, 'e' 
      JNE MOVEUP2
      CMP ORIENTATION_PLAYER1, 4
      JE BACKTOMAINLOOP
      ADD ORIENTATION_PLAYER1, 1 
      BACKTOMAINLOOP_1:      ;JUST A MIDDLE JUMP TO USE IT FOR THE PREVIOUS LABELS
      JMP BACKTOMAINLOOP         
   ;}

    MOVEUP2:
   ;{
      CMP AL, 'i' 
      JNE MOVEDOWN2
      MOV CX, STARTPOS_Y_PLAYER2
      MOV BX, UPPERBOUND_Y
      SUB CX, BX
      CMP CX, 3  ;CURRENT Y DISTANCE TO THE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDARY
      JL BACKTOMAINLOOP
      SUB STARTPOS_Y_PLAYER2, 3
      JMP BACKTOMAINLOOP   
   ;}
   
   MOVEDOWN2:
   ;{
      CMP AL, 'k' 
      JNE ORIENT_UP2
      MOV CX, STARTPOS_Y_PLAYER2
      ADD CX, TANKSIZE    ;GET THE Y COORDINATE OF THE LOWEST POINT OF THE TANK
      MOV BX, LOWERBOUND_Y
      SUB BX, CX
      CMP BX, 3  ;CURRENT Y DISTANCE TO THE BOUNDARY VS REMAINING DISTANCE TO THE BOUNDARY
      JL BACKTOMAINLOOP
      ADD STARTPOS_Y_PLAYER2, 3
      JMP BACKTOMAINLOOP 
   ;}
      
   
   ORIENT_UP2:
   ;{
      CMP AL, 'o' 
      JNE ORIENT_DOWN2
      CMP ORIENTATION_PLAYER2, 0
      JE BACKTOMAINLOOP
      SUB ORIENTATION_PLAYER2, 1 
      JMP BACKTOMAINLOOP
   ;}
   ORIENT_DOWN2:
   ;{
      CMP AL, 'u' 
      JNE EXITPROG
      CMP ORIENTATION_PLAYER2, 4
      JE BACKTOMAINLOOP
      ADD ORIENTATION_PLAYER2, 1 
      JMP BACKTOMAINLOOP          
   ;}
   EXITPROG:
   ;{
      CMP AL,1BH
      JNE BACKTOMAINLOOP
      MOV AX, 4F02H     ; THIS TO HANDLE FLICKERING WE REOPEN THE VIDEO MODE EVERYTIME 
      MOV BX, 100H
      INT 10H
      MOV AH, 4CH
      INT 21H
   ;}

   BACKTOMAINLOOP:
   POP DX
   POP CX
   POP BX
   POP AX   
ENDM USERINPUT		